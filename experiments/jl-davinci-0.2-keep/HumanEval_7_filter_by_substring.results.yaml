name: HumanEval_7_filter_by_substring
language: julia
results:
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpme32iphz.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpme32iphz.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpme32iphz.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpme32iphz.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpme32iphz.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpme32iphz.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpme32iphz.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpme32iphz.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpme32iphz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz3x7i_uh.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpz3x7i_uh.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpz3x7i_uh.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpz3x7i_uh.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpz3x7i_uh.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpz3x7i_uh.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpz3x7i_uh.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpz3x7i_uh.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz3x7i_uh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_jhxbb4t.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_jhxbb4t.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_jhxbb4t.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_jhxbb4t.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_jhxbb4t.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp_jhxbb4t.jl:8\n    [9] macro expansion\n      @ /tmp/tmp_jhxbb4t.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_jhxbb4t.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_jhxbb4t.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsebf9eto.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsebf9eto.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsebf9eto.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsebf9eto.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpsebf9eto.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsebf9eto.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsebf9eto.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsebf9eto.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsebf9eto.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfp8git7x.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpfp8git7x.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpfp8git7x.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpfp8git7x.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfp8git7x.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpfp8git7x.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpfp8git7x.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpfp8git7x.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfp8git7x.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplnsw__o0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmplnsw__o0.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmplnsw__o0.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmplnsw__o0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplnsw__o0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmplnsw__o0.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmplnsw__o0.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmplnsw__o0.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplnsw__o0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwzaw8l2p.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpwzaw8l2p.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpwzaw8l2p.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpwzaw8l2p.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpwzaw8l2p.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpwzaw8l2p.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpwzaw8l2p.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpwzaw8l2p.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwzaw8l2p.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm8moarum.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpm8moarum.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpm8moarum.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpm8moarum.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpm8moarum.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpm8moarum.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpm8moarum.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpm8moarum.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8moarum.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw3spn055.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpw3spn055.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpw3spn055.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpw3spn055.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpw3spn055.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpw3spn055.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpw3spn055.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpw3spn055.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw3spn055.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvb16esj3.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvb16esj3.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpvb16esj3.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpvb16esj3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpvb16esj3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvb16esj3.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpvb16esj3.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpvb16esj3.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvb16esj3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvx3nage0.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvx3nage0.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpvx3nage0.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpvx3nage0.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpvx3nage0.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpvx3nage0.jl:8\n    [9] macro expansion\n      @ /tmp/tmpvx3nage0.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpvx3nage0.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvx3nage0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpytfixxi9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpytfixxi9.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpytfixxi9.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpytfixxi9.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpytfixxi9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpytfixxi9.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpytfixxi9.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpytfixxi9.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpytfixxi9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2vplryrx.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp2vplryrx.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp2vplryrx.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp2vplryrx.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2vplryrx.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp2vplryrx.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp2vplryrx.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp2vplryrx.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2vplryrx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplct3ca5z.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmplct3ca5z.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmplct3ca5z.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmplct3ca5z.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplct3ca5z.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmplct3ca5z.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmplct3ca5z.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmplct3ca5z.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplct3ca5z.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbx24h2_3.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpbx24h2_3.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpbx24h2_3.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpbx24h2_3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpbx24h2_3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpbx24h2_3.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpbx24h2_3.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpbx24h2_3.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbx24h2_3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw0m46o_y.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpw0m46o_y.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpw0m46o_y.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpw0m46o_y.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpw0m46o_y.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpw0m46o_y.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpw0m46o_y.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpw0m46o_y.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw0m46o_y.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqv0rc62q.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpqv0rc62q.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpqv0rc62q.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpqv0rc62q.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpqv0rc62q.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpqv0rc62q.jl:8\n    [9] macro expansion\n      @ /tmp/tmpqv0rc62q.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpqv0rc62q.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqv0rc62q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9drksu2n.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp9drksu2n.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp9drksu2n.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp9drksu2n.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp9drksu2n.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp9drksu2n.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp9drksu2n.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp9drksu2n.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9drksu2n.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa8ybapid.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpa8ybapid.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpa8ybapid.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpa8ybapid.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpa8ybapid.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpa8ybapid.jl:8\n    [9] macro expansion\n      @ /tmp/tmpa8ybapid.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpa8ybapid.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa8ybapid.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_f0rrwog.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_f0rrwog.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_f0rrwog.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_f0rrwog.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_f0rrwog.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_f0rrwog.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_f0rrwog.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_f0rrwog.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_f0rrwog.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_dgttdjn.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp_dgttdjn.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp_dgttdjn.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp_dgttdjn.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmp_dgttdjn.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp_dgttdjn.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp_dgttdjn.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn28bb947.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpn28bb947.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpn28bb947.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpn28bb947.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpn28bb947.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpn28bb947.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpn28bb947.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpn28bb947.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn28bb947.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpma_zans8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpma_zans8.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpma_zans8.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpma_zans8.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpma_zans8.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpma_zans8.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpma_zans8.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpma_zans8.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpma_zans8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0mmuts63.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp0mmuts63.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp0mmuts63.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp0mmuts63.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp0mmuts63.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp0mmuts63.jl:8\n    [9] macro expansion\n      @ /tmp/tmp0mmuts63.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp0mmuts63.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0mmuts63.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8egv4oxi.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8egv4oxi.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp8egv4oxi.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp8egv4oxi.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp8egv4oxi.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp8egv4oxi.jl:8\n    [9] macro expansion\n      @ /tmp/tmp8egv4oxi.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp8egv4oxi.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8egv4oxi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpghz1ml4f.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpghz1ml4f.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpghz1ml4f.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpghz1ml4f.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpghz1ml4f.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpghz1ml4f.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpghz1ml4f.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11]"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3r1yute4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp3r1yute4.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp3r1yute4.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp3r1yute4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp3r1yute4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp3r1yute4.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp3r1yute4.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp3r1yute4.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3r1yute4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqbuckk6g.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpqbuckk6g.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpqbuckk6g.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpqbuckk6g.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpqbuckk6g.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpqbuckk6g.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpqbuckk6g.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpqbuckk6g.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqbuckk6g.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdww5tivb.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpdww5tivb.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpdww5tivb.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpdww5tivb.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpdww5tivb.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpdww5tivb.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpdww5tivb.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpdww5tivb.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdww5tivb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkrb3qtbz.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpkrb3qtbz.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpkrb3qtbz.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpkrb3qtbz.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpkrb3qtbz.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpkrb3qtbz.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpkrb3qtbz.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp92unvdot.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp92unvdot.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp92unvdot.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp92unvdot.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp92unvdot.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp92unvdot.jl:8\n    [9] macro expansion\n      @ /tmp/tmp92unvdot.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp92unvdot.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp92unvdot.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7wzy307y.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7wzy307y.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp7wzy307y.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp7wzy307y.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp7wzy307y.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7wzy307y.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp7wzy307y.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp7wzy307y.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7wzy307y.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph75nsxa9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmph75nsxa9.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmph75nsxa9.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmph75nsxa9.jl:14\ntest set:\
    \ Error During Test at /tmp/tmph75nsxa9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmph75nsxa9.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmph75nsxa9.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmph75nsxa9.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph75nsxa9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpespo2kgj.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpespo2kgj.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpespo2kgj.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpespo2kgj.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpespo2kgj.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpespo2kgj.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpespo2kgj.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5rdgvm3s.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp5rdgvm3s.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp5rdgvm3s.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp5rdgvm3s.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5rdgvm3s.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp5rdgvm3s.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp5rdgvm3s.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp5rdgvm3s.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5rdgvm3s.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp925eqf_1.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp925eqf_1.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp925eqf_1.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp925eqf_1.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp925eqf_1.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp925eqf_1.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp925eqf_1.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp925eqf_1.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp925eqf_1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkgs7ca_f.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpkgs7ca_f.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpkgs7ca_f.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpkgs7ca_f.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpkgs7ca_f.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpkgs7ca_f.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpkgs7ca_f.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpkgs7ca_f.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkgs7ca_f.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp02dpf8xw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp02dpf8xw.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp02dpf8xw.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp02dpf8xw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp02dpf8xw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp02dpf8xw.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp02dpf8xw.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp02dpf8xw.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02dpf8xw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv23qw3nx.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpv23qw3nx.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpv23qw3nx.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpv23qw3nx.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpv23qw3nx.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpv23qw3nx.jl:8\n    [9] macro expansion\n      @ /tmp/tmpv23qw3nx.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpv23qw3nx.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv23qw3nx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj5dz4jh0.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpj5dz4jh0.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpj5dz4jh0.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpj5dz4jh0.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpj5dz4jh0.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpj5dz4jh0.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpj5dz4jh0.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5wnpl_ge.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp5wnpl_ge.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp5wnpl_ge.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp5wnpl_ge.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmp5wnpl_ge.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp5wnpl_ge.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp5wnpl_ge.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpapc2h31t.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpapc2h31t.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpapc2h31t.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpapc2h31t.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpapc2h31t.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpapc2h31t.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpapc2h31t.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp588bx100.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp588bx100.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp588bx100.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp588bx100.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmp588bx100.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp588bx100.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp588bx100.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjya04nkk.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjya04nkk.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpjya04nkk.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpjya04nkk.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpjya04nkk.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjya04nkk.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpjya04nkk.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpjya04nkk.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjya04nkk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp5o1mn0a.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpp5o1mn0a.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpp5o1mn0a.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpp5o1mn0a.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpp5o1mn0a.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpp5o1mn0a.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpp5o1mn0a.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpp5o1mn0a.jl:12\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbl40pglw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpbl40pglw.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpbl40pglw.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpbl40pglw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpbl40pglw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpbl40pglw.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpbl40pglw.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpbl40pglw.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbl40pglw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw7c6rg4j.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpw7c6rg4j.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpw7c6rg4j.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpw7c6rg4j.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpw7c6rg4j.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpw7c6rg4j.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpw7c6rg4j.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9wb4galp.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp9wb4galp.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp9wb4galp.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp9wb4galp.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp9wb4galp.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp9wb4galp.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp9wb4galp.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp9wb4galp.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9wb4galp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb4nsymkt.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpb4nsymkt.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpb4nsymkt.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpb4nsymkt.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpb4nsymkt.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpb4nsymkt.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpb4nsymkt.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpb4nsymkt.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb4nsymkt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_dvwr82e.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_dvwr82e.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_dvwr82e.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_dvwr82e.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_dvwr82e.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp_dvwr82e.jl:8\n    [9] macro expansion\n      @ /tmp/tmp_dvwr82e.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_dvwr82e.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_dvwr82e.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1d2aqfl8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1d2aqfl8.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp1d2aqfl8.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp1d2aqfl8.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1d2aqfl8.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1d2aqfl8.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp1d2aqfl8.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp1d2aqfl8.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1d2aqfl8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn9p_q9r4.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpn9p_q9r4.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpn9p_q9r4.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpn9p_q9r4.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpn9p_q9r4.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpn9p_q9r4.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpn9p_q9r4.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11]"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzed48j24.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzed48j24.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpzed48j24.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpzed48j24.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpzed48j24.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpzed48j24.jl:8\n    [9] macro expansion\n      @ /tmp/tmpzed48j24.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpzed48j24.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzed48j24.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo7o_4mq4.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpo7o_4mq4.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpo7o_4mq4.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpo7o_4mq4.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpo7o_4mq4.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpo7o_4mq4.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpo7o_4mq4.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11]"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpby2fys56.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpby2fys56.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpby2fys56.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpby2fys56.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpby2fys56.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpby2fys56.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpby2fys56.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpby2fys56.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpby2fys56.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcjn9pav6.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpcjn9pav6.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpcjn9pav6.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpcjn9pav6.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpcjn9pav6.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpcjn9pav6.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpcjn9pav6.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmgdqdgv2.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpmgdqdgv2.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpmgdqdgv2.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpmgdqdgv2.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpmgdqdgv2.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpmgdqdgv2.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpmgdqdgv2.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpacjjeyz5.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpacjjeyz5.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpacjjeyz5.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpacjjeyz5.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpacjjeyz5.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpacjjeyz5.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpacjjeyz5.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpacjjeyz5.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpacjjeyz5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkn34z3rv.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpkn34z3rv.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpkn34z3rv.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpkn34z3rv.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpkn34z3rv.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpkn34z3rv.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpkn34z3rv.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7kje6gxy.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7kje6gxy.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp7kje6gxy.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp7kje6gxy.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp7kje6gxy.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7kje6gxy.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp7kje6gxy.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp7kje6gxy.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7kje6gxy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcd4ohzep.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpcd4ohzep.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpcd4ohzep.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpcd4ohzep.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpcd4ohzep.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpcd4ohzep.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpcd4ohzep.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpcd4ohzep.jl:12\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsy4v0abw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsy4v0abw.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsy4v0abw.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsy4v0abw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpsy4v0abw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsy4v0abw.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsy4v0abw.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsy4v0abw.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsy4v0abw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4udvo7ul.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp4udvo7ul.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp4udvo7ul.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp4udvo7ul.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp4udvo7ul.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp4udvo7ul.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp4udvo7ul.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp4udvo7ul.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4udvo7ul.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpevrks3e4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpevrks3e4.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpevrks3e4.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpevrks3e4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpevrks3e4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpevrks3e4.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpevrks3e4.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpevrks3e4.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpevrks3e4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphp6f72s7.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmphp6f72s7.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmphp6f72s7.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmphp6f72s7.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphp6f72s7.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmphp6f72s7.jl:8\n    [9] macro expansion\n      @ /tmp/tmphp6f72s7.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmphp6f72s7.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphp6f72s7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdvnqvdov.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpdvnqvdov.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpdvnqvdov.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpdvnqvdov.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpdvnqvdov.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpdvnqvdov.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpdvnqvdov.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpdvnqvdov.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdvnqvdov.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_zawll0v.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_zawll0v.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_zawll0v.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_zawll0v.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_zawll0v.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp_zawll0v.jl:8\n    [9] macro expansion\n      @ /tmp/tmp_zawll0v.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_zawll0v.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zawll0v.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8fnmdbdn.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8fnmdbdn.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp8fnmdbdn.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp8fnmdbdn.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp8fnmdbdn.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8fnmdbdn.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp8fnmdbdn.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp8fnmdbdn.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8fnmdbdn.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjol_k40v.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjol_k40v.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpjol_k40v.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpjol_k40v.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpjol_k40v.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjol_k40v.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpjol_k40v.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpjol_k40v.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjol_k40v.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2z2r9823.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp2z2r9823.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp2z2r9823.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp2z2r9823.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmp2z2r9823.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp2z2r9823.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp2z2r9823.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz5lcrzc0.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpz5lcrzc0.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpz5lcrzc0.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpz5lcrzc0.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpz5lcrzc0.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpz5lcrzc0.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpz5lcrzc0.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0puh74d_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp0puh74d_.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp0puh74d_.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp0puh74d_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp0puh74d_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp0puh74d_.jl:8\n    [9] macro expansion\n      @ /tmp/tmp0puh74d_.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp0puh74d_.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0puh74d_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmgrosu4o.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpmgrosu4o.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpmgrosu4o.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpmgrosu4o.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpmgrosu4o.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpmgrosu4o.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpmgrosu4o.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfcdiqc51.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpfcdiqc51.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpfcdiqc51.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpfcdiqc51.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfcdiqc51.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpfcdiqc51.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpfcdiqc51.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpfcdiqc51.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfcdiqc51.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = String[]\n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend\nusing Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\
    \t@test(candidate(Vector{String}([]), \"john\") == Vector{String}([]))\n\t@test(candidate([\"\
    xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\"\
    , \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john\
    \ doe\", \"xxxAAA\", \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"\
    xxx\"])\n\t@test(candidate([\"grunt\", \"trumpet\", \"prune\", \"gruesome\"],\
    \ \"run\") == [\"grunt\", \"prune\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu3cutdft.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpu3cutdft.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpu3cutdft.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpu3cutdft.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpu3cutdft.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpu3cutdft.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpu3cutdft.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpu3cutdft.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu3cutdft.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpa5qrl3zy.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpa5qrl3zy.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpa5qrl3zy.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpa5qrl3zy.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpa5qrl3zy.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpa5qrl3zy.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpa5qrl3zy.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11]"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpa5qrl3zy.jl:12\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2bcjflwi.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp2bcjflwi.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp2bcjflwi.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp2bcjflwi.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp2bcjflwi.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp2bcjflwi.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp2bcjflwi.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp2bcjflwi.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2bcjflwi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjt3jw2ux.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpjt3jw2ux.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpjt3jw2ux.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpjt3jw2ux.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpjt3jw2ux.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpjt3jw2ux.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpjt3jw2ux.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp70f631b4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp70f631b4.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp70f631b4.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp70f631b4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp70f631b4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp70f631b4.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp70f631b4.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp70f631b4.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp70f631b4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6ba9o25o.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp6ba9o25o.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp6ba9o25o.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp6ba9o25o.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmp6ba9o25o.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp6ba9o25o.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp6ba9o25o.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphti59_zy.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmphti59_zy.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmphti59_zy.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmphti59_zy.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmphti59_zy.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmphti59_zy.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmphti59_zy.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmphti59_zy.jl:12\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps5wripz5.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmps5wripz5.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmps5wripz5.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmps5wripz5.jl:14\ntest set:\
    \ Error During Test at /tmp/tmps5wripz5.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmps5wripz5.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmps5wripz5.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmps5wripz5.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps5wripz5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpytl9phx4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpytl9phx4.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpytl9phx4.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpytl9phx4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpytl9phx4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpytl9phx4.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpytl9phx4.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpytl9phx4.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpytl9phx4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphnyhep0c.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmphnyhep0c.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmphnyhep0c.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmphnyhep0c.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmphnyhep0c.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmphnyhep0c.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmphnyhep0c.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11]"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuhapd86_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpuhapd86_.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpuhapd86_.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpuhapd86_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpuhapd86_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpuhapd86_.jl:8\n    [9] macro expansion\n      @ /tmp/tmpuhapd86_.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpuhapd86_.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuhapd86_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_rsp0o1p.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_rsp0o1p.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_rsp0o1p.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_rsp0o1p.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_rsp0o1p.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_rsp0o1p.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_rsp0o1p.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_rsp0o1p.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_rsp0o1p.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_ru16kza.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_ru16kza.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_ru16kza.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_ru16kza.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_ru16kza.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_ru16kza.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_ru16kza.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_ru16kza.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ru16kza.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0u3757dk.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp0u3757dk.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp0u3757dk.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp0u3757dk.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmp0u3757dk.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp0u3757dk.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp0u3757dk.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx5a44p2n.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpx5a44p2n.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpx5a44p2n.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpx5a44p2n.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpx5a44p2n.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpx5a44p2n.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpx5a44p2n.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8s1dym2j.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8s1dym2j.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp8s1dym2j.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp8s1dym2j.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp8s1dym2j.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8s1dym2j.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp8s1dym2j.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp8s1dym2j.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8s1dym2j.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp67kl8vkj.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp67kl8vkj.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp67kl8vkj.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp67kl8vkj.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp67kl8vkj.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp67kl8vkj.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp67kl8vkj.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp67kl8vkj.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp67kl8vkj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7faoy6dq.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7faoy6dq.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp7faoy6dq.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp7faoy6dq.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp7faoy6dq.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp7faoy6dq.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp7faoy6dq.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp7faoy6dq.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7faoy6dq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph3ixlffw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmph3ixlffw.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmph3ixlffw.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmph3ixlffw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmph3ixlffw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmph3ixlffw.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmph3ixlffw.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmph3ixlffw.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph3ixlffw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa6_7cq13.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpa6_7cq13.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpa6_7cq13.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpa6_7cq13.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpa6_7cq13.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpa6_7cq13.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpa6_7cq13.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpa6_7cq13.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa6_7cq13.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwco5i2be.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpwco5i2be.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpwco5i2be.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpwco5i2be.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpwco5i2be.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpwco5i2be.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpwco5i2be.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpwco5i2be.jl:12\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4db525kb.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp4db525kb.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp4db525kb.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp4db525kb.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmp4db525kb.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp4db525kb.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp4db525kb.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_62obn4s.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_62obn4s.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_62obn4s.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_62obn4s.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_62obn4s.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_62obn4s.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_62obn4s.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_62obn4s.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_62obn4s.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpact_4ear.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpact_4ear.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpact_4ear.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpact_4ear.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpact_4ear.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpact_4ear.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpact_4ear.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnjla3akd.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpnjla3akd.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpnjla3akd.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpnjla3akd.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpnjla3akd.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpnjla3akd.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpnjla3akd.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpnjla3akd.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnjla3akd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5c4tpifj.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp5c4tpifj.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp5c4tpifj.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp5c4tpifj.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmp5c4tpifj.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp5c4tpifj.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp5c4tpifj.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmp5c4tpifj.jl:12\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx7c53vai.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpx7c53vai.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpx7c53vai.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpx7c53vai.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpx7c53vai.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpx7c53vai.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpx7c53vai.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn11rswaj.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpn11rswaj.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpn11rswaj.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpn11rswaj.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpn11rswaj.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpn11rswaj.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpn11rswaj.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpn11rswaj.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn11rswaj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfes9f8xd.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpfes9f8xd.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpfes9f8xd.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpfes9f8xd.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpfes9f8xd.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpfes9f8xd.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpfes9f8xd.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpfes9f8xd.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfes9f8xd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkjqlxdpw.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpkjqlxdpw.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpkjqlxdpw.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpkjqlxdpw.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpkjqlxdpw.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpkjqlxdpw.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpkjqlxdpw.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpkjqlxdpw.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkjqlxdpw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj1azl711.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpj1azl711.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpj1azl711.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpj1azl711.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpj1azl711.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpj1azl711.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpj1azl711.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpj1azl711.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj1azl711.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfep7zdds.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpfep7zdds.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpfep7zdds.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpfep7zdds.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpfep7zdds.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpfep7zdds.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpfep7zdds.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5qpth95e.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp5qpth95e.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp5qpth95e.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp5qpth95e.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp5qpth95e.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp5qpth95e.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp5qpth95e.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp5qpth95e.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5qpth95e.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw8dn2d7l.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpw8dn2d7l.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpw8dn2d7l.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpw8dn2d7l.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpw8dn2d7l.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpw8dn2d7l.jl:8\n    [9] macro expansion\n      @ /tmp/tmpw8dn2d7l.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpw8dn2d7l.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw8dn2d7l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3pykgi6i.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp3pykgi6i.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp3pykgi6i.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp3pykgi6i.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmp3pykgi6i.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp3pykgi6i.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp3pykgi6i.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe1y2ffhh.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpe1y2ffhh.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpe1y2ffhh.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpe1y2ffhh.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpe1y2ffhh.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpe1y2ffhh.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpe1y2ffhh.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11]"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpur90caz8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpur90caz8.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpur90caz8.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpur90caz8.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpur90caz8.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpur90caz8.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpur90caz8.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpur90caz8.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpur90caz8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxcva_dv4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpxcva_dv4.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpxcva_dv4.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpxcva_dv4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpxcva_dv4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpxcva_dv4.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpxcva_dv4.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpxcva_dv4.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxcva_dv4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcblr8h0l.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpcblr8h0l.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpcblr8h0l.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpcblr8h0l.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpcblr8h0l.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpcblr8h0l.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpcblr8h0l.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpcblr8h0l.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcblr8h0l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgqu3nl_t.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpgqu3nl_t.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpgqu3nl_t.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpgqu3nl_t.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpgqu3nl_t.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(string::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpgqu3nl_t.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpgqu3nl_t.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11]"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpae67g24q.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpae67g24q.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpae67g24q.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpae67g24q.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpae67g24q.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpae67g24q.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpae67g24q.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpactjenxn.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpactjenxn.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpactjenxn.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpactjenxn.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpactjenxn.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpactjenxn.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpactjenxn.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcoalb9ne.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpcoalb9ne.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpcoalb9ne.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpcoalb9ne.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpcoalb9ne.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpcoalb9ne.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpcoalb9ne.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpcoalb9ne.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcoalb9ne.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpiit30n01.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpiit30n01.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpiit30n01.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpiit30n01.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpiit30n01.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpiit30n01.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpiit30n01.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpiit30n01.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiit30n01.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsidnetm_.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsidnetm_.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsidnetm_.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsidnetm_.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpsidnetm_.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsidnetm_.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsidnetm_.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsidnetm_.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsidnetm_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ahg4s94.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1ahg4s94.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp1ahg4s94.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp1ahg4s94.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1ahg4s94.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1ahg4s94.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp1ahg4s94.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp1ahg4s94.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ahg4s94.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphbojbzty.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmphbojbzty.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmphbojbzty.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmphbojbzty.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphbojbzty.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmphbojbzty.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmphbojbzty.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmphbojbzty.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphbojbzty.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnd5v03sb.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpnd5v03sb.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpnd5v03sb.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpnd5v03sb.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpnd5v03sb.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpnd5v03sb.jl:8\n    [9] macro expansion\n      @ /tmp/tmpnd5v03sb.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpnd5v03sb.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnd5v03sb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc38sakph.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpc38sakph.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpc38sakph.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpc38sakph.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpc38sakph.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpc38sakph.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpc38sakph.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpc38sakph.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc38sakph.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpknwimb98.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpknwimb98.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpknwimb98.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpknwimb98.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpknwimb98.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpknwimb98.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpknwimb98.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsfhznms4.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsfhznms4.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsfhznms4.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsfhznms4.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpsfhznms4.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsfhznms4.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsfhznms4.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsfhznms4.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsfhznms4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsi8u70xl.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsi8u70xl.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsi8u70xl.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsi8u70xl.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpsi8u70xl.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsi8u70xl.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsi8u70xl.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsi8u70xl.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsi8u70xl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplyr68_ra.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmplyr68_ra.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmplyr68_ra.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmplyr68_ra.jl:14\ntest set:\
    \ Error During Test at /tmp/tmplyr68_ra.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmplyr68_ra.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmplyr68_ra.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmplyr68_ra.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyr68_ra.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8tdl07g4.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp8tdl07g4.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp8tdl07g4.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp8tdl07g4.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmp8tdl07g4.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp8tdl07g4.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp8tdl07g4.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphxevge6l.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmphxevge6l.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmphxevge6l.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmphxevge6l.jl:14\ntest set:\
    \ Error During Test at /tmp/tmphxevge6l.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmphxevge6l.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmphxevge6l.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmphxevge6l.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphxevge6l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg4h06n34.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpg4h06n34.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpg4h06n34.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpg4h06n34.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpg4h06n34.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpg4h06n34.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpg4h06n34.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpg4h06n34.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg4h06n34.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    output = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(output, s)\n        end\n    end\n    return output\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgagag7uh.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgagag7uh.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpgagag7uh.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpgagag7uh.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgagag7uh.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgagag7uh.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpgagag7uh.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpgagag7uh.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgagag7uh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo36bkx77.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpo36bkx77.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpo36bkx77.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpo36bkx77.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmpo36bkx77.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmpo36bkx77.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmpo36bkx77.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1skklkie.jl:16\\n  Test threw\
    \ exception\\n  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\"\
    , \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp1skklkie.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp1skklkie.jl:16\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmp1skklkie.jl:14\\ntest\
    \ set: Error During Test at /tmp/tmp1skklkie.jl:17\\n  Test threw exception\\\
    n  Expression: candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\\n  use occursin(x,\
    \ y) for string containment\\n  Stacktrace:\\n    [1] error(s::String)\\n    \
    \  @ Base ./error.jl:33\\n    [2] in(#unused#::String, #unused#::String)\\n  \
    \    @ Base ./strings/search.jl:637\\n    [3] (::var\"#1#2\"{String})(s::String)\\\
    n      @ Main ./none:0\\n    [4] iterate\\n      @ ./iterators.jl:451 [inlined]\\\
    n    [5] iterate\\n      @ ./generator.jl:44 [inlined]\\n    [6] grow_to!\\n \
    \     @ ./array.jl:743 [inlined]\\n    [7] collect\\n      @ ./array.jl:678 [inlined]\\\
    n    [8] filter_by_substring(strings::Vector{String}, substring::String)\\n  \
    \    @ Main /tmp/tmp1skklkie.jl:8\\n    [9] macro expansion\\n      @ /tmp/tmp1skklkie.jl:17\
    \ [inlined]\\n   [10] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3996h1i8.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp3996h1i8.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp3996h1i8.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp3996h1i8.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp3996h1i8.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp3996h1i8.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp3996h1i8.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp3996h1i8.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3996h1i8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjtp7com1.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjtp7com1.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpjtp7com1.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpjtp7com1.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpjtp7com1.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpjtp7com1.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpjtp7com1.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpjtp7com1.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjtp7com1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwt1tmcno.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpwt1tmcno.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpwt1tmcno.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpwt1tmcno.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpwt1tmcno.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpwt1tmcno.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpwt1tmcno.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpwt1tmcno.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwt1tmcno.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1gkl7jae.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1gkl7jae.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp1gkl7jae.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp1gkl7jae.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1gkl7jae.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1gkl7jae.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp1gkl7jae.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp1gkl7jae.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1gkl7jae.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvqqyu4su.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvqqyu4su.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpvqqyu4su.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpvqqyu4su.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpvqqyu4su.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpvqqyu4su.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpvqqyu4su.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpvqqyu4su.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvqqyu4su.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_t9skynq.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_t9skynq.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_t9skynq.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_t9skynq.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp_t9skynq.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp_t9skynq.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp_t9skynq.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp_t9skynq.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_t9skynq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgbk5bog2.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgbk5bog2.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpgbk5bog2.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpgbk5bog2.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgbk5bog2.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgbk5bog2.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpgbk5bog2.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpgbk5bog2.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgbk5bog2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsz8g1rep.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsz8g1rep.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsz8g1rep.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsz8g1rep.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpsz8g1rep.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsz8g1rep.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsz8g1rep.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsz8g1rep.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsz8g1rep.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprgokf4be.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmprgokf4be.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmprgokf4be.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmprgokf4be.jl:14\ntest set:\
    \ Error During Test at /tmp/tmprgokf4be.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmprgokf4be.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmprgokf4be.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmprgokf4be.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprgokf4be.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3i_4sh4e.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp3i_4sh4e.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp3i_4sh4e.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp3i_4sh4e.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp3i_4sh4e.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp3i_4sh4e.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp3i_4sh4e.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp3i_4sh4e.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3i_4sh4e.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpifm2valc.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpifm2valc.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpifm2valc.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpifm2valc.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpifm2valc.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpifm2valc.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpifm2valc.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpifm2valc.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpifm2valc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    filtered = []\n    for s in strings\n        if contains(s, substring)\n\
    \            push!(filtered, s)\n        end\n    end\n    return filtered\nend\n\
    using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdziriobg.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpdziriobg.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpdziriobg.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpdziriobg.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpdziriobg.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpdziriobg.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpdziriobg.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpdziriobg.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdziriobg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptfs6pc2g.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmptfs6pc2g.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmptfs6pc2g.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmptfs6pc2g.jl:14\ntest set:\
    \ Error During Test at /tmp/tmptfs6pc2g.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmptfs6pc2g.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmptfs6pc2g.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmptfs6pc2g.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptfs6pc2g.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpu_lc4hqe.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpu_lc4hqe.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpu_lc4hqe.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpu_lc4hqe.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpu_lc4hqe.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpu_lc4hqe.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpu_lc4hqe.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpu_lc4hqe.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_lc4hqe.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8gd_ykz3.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8gd_ykz3.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp8gd_ykz3.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp8gd_ykz3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp8gd_ykz3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8gd_ykz3.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp8gd_ykz3.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp8gd_ykz3.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8gd_ykz3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsp_9zmyp.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsp_9zmyp.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsp_9zmyp.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsp_9zmyp.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpsp_9zmyp.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpsp_9zmyp.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpsp_9zmyp.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpsp_9zmyp.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsp_9zmyp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1zms71i1.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1zms71i1.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp1zms71i1.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp1zms71i1.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1zms71i1.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1zms71i1.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp1zms71i1.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp1zms71i1.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1zms71i1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8brcbb5x.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8brcbb5x.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp8brcbb5x.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp8brcbb5x.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp8brcbb5x.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8brcbb5x.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp8brcbb5x.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp8brcbb5x.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8brcbb5x.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc_w4r4ar.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpc_w4r4ar.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpc_w4r4ar.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpc_w4r4ar.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpc_w4r4ar.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpc_w4r4ar.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpc_w4r4ar.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpc_w4r4ar.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_w4r4ar.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8b66op45.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8b66op45.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp8b66op45.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp8b66op45.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp8b66op45.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp8b66op45.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp8b66op45.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp8b66op45.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8b66op45.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzcjd8qlo.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzcjd8qlo.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpzcjd8qlo.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpzcjd8qlo.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpzcjd8qlo.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzcjd8qlo.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpzcjd8qlo.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpzcjd8qlo.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzcjd8qlo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp26zr9g0i.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp26zr9g0i.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp26zr9g0i.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp26zr9g0i.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp26zr9g0i.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp26zr9g0i.jl:8\n    [9] macro expansion\n      @ /tmp/tmp26zr9g0i.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp26zr9g0i.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp26zr9g0i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return filter(x -> contains(x, substring), strings)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    4      4\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm5cn_v09.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpm5cn_v09.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpm5cn_v09.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpm5cn_v09.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpm5cn_v09.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpm5cn_v09.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpm5cn_v09.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpm5cn_v09.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm5cn_v09.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6hm3oofm.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp6hm3oofm.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp6hm3oofm.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp6hm3oofm.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp6hm3oofm.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmp6hm3oofm.jl:8\n    [9] macro expansion\n      @ /tmp/tmp6hm3oofm.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp6hm3oofm.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6hm3oofm.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [string for string in strings if substring in string]\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpift471f6.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(string::String)\n      @ Main ./none:0\n    [4]\
    \ iterate\n      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpift471f6.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpift471f6.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpift471f6.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpift471f6.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(string::String)\n \
    \     @ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n\
    \    [5] iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n    \
    \  @ ./array.jl:743 [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n\
    \    [8] filter_by_substring(strings::Vector{String}, substring::String)\n   \
    \   @ Main /tmp/tmpift471f6.jl:8\n    [9] macro expansion\n      @ /tmp/tmpift471f6.jl:17\
    \ [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpift471f6.jl:14\ntest s"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpift471f6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgngf6fig.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgngf6fig.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpgngf6fig.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpgngf6fig.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgngf6fig.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgngf6fig.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpgngf6fig.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpgngf6fig.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgngf6fig.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr8gg3ryl.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpr8gg3ryl.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpr8gg3ryl.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpr8gg3ryl.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpr8gg3ryl.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpr8gg3ryl.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpr8gg3ryl.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpr8gg3ryl.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr8gg3ryl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpouu3i_04.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpouu3i_04.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpouu3i_04.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpouu3i_04.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpouu3i_04.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpouu3i_04.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpouu3i_04.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpouu3i_04.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpouu3i_04.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1h8chjy9.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1h8chjy9.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp1h8chjy9.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp1h8chjy9.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp1h8chjy9.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp1h8chjy9.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp1h8chjy9.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp1h8chjy9.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1h8chjy9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkpn7dwrz.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpkpn7dwrz.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpkpn7dwrz.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpkpn7dwrz.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpkpn7dwrz.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpkpn7dwrz.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpkpn7dwrz.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpkpn7dwrz.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkpn7dwrz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzc1jr3us.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzc1jr3us.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpzc1jr3us.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpzc1jr3us.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpzc1jr3us.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpzc1jr3us.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpzc1jr3us.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpzc1jr3us.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzc1jr3us.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw2w73mm3.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpw2w73mm3.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpw2w73mm3.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpw2w73mm3.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpw2w73mm3.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpw2w73mm3.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpw2w73mm3.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpw2w73mm3.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw2w73mm3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp527dh0yd.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp527dh0yd.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp527dh0yd.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp527dh0yd.jl:14\ntest set:\
    \ Error During Test at /tmp/tmp527dh0yd.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmp527dh0yd.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmp527dh0yd.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmp527dh0yd.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp527dh0yd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Filter an input list of strings only for ones that contain given\
    \ substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
    \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
    \ \n    return [s for s in strings if substring in s]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
    \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
    , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
    ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
    grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
    ])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgdem6tlh.jl:16\n  Test threw exception\n\
    \  Expression: candidate([\"xxx\", \"asd\", \"xxy\", \"john doe\", \"xxxAAA\"\
    , \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y) for\
    \ string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base ./error.jl:33\n\
    \    [2] in(#unused#::String, #unused#::String)\n      @ Base ./strings/search.jl:637\n\
    \    [3] (::var\"#1#2\"{String})(s::String)\n      @ Main ./none:0\n    [4] iterate\n\
    \      @ ./iterators.jl:451 [inlined]\n    [5] iterate\n      @ ./generator.jl:44\
    \ [inlined]\n    [6] grow_to!\n      @ ./array.jl:743 [inlined]\n    [7] collect\n\
    \      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgdem6tlh.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpgdem6tlh.jl:16 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpgdem6tlh.jl:14\ntest set:\
    \ Error During Test at /tmp/tmpgdem6tlh.jl:17\n  Test threw exception\n  Expression:\
    \ candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"xxx\"],\
    \ \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"]\n  use occursin(x, y)\
    \ for string containment\n  Stacktrace:\n    [1] error(s::String)\n      @ Base\
    \ ./error.jl:33\n    [2] in(#unused#::String, #unused#::String)\n      @ Base\
    \ ./strings/search.jl:637\n    [3] (::var\"#1#2\"{String})(s::String)\n      @\
    \ Main ./none:0\n    [4] iterate\n      @ ./iterators.jl:451 [inlined]\n    [5]\
    \ iterate\n      @ ./generator.jl:44 [inlined]\n    [6] grow_to!\n      @ ./array.jl:743\
    \ [inlined]\n    [7] collect\n      @ ./array.jl:678 [inlined]\n    [8] filter_by_substring(strings::Vector{String},\
    \ substring::String)\n      @ Main /tmp/tmpgdem6tlh.jl:8\n    [9] macro expansion\n\
    \      @ /tmp/tmpgdem6tlh.jl:17 [inlined]\n   [10] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [11] top-level scope\n      @ /tmp/tmpgdem6tlh.jl:14\ntest set:\
    \ Error "
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgdem6tlh.jl:12\n"
  exit_code: 1
  status: SyntaxError
