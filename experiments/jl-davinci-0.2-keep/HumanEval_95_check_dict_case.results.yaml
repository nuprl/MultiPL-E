name: HumanEval_95_check_dict_case
language: julia
results:
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    is_lower = true\n    is_upper = true\n\
    \    for (key, value) in dict\n        if !islower(key)\n            is_lower\
    \ = false\n        end\n        if !isupper(key)\n            is_upper = false\n\
    \        end\n    end\n    return is_lower || is_upper\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5lzfe9v6.jl:12\nin expression starting at /tmp/tmp5lzfe9v6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2bp8cgo6.jl:12\nin expression starting at /tmp/tmp2bp8cgo6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case_keys = true\n\
    \    upper_case_keys = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_case_keys = false\n        end\n        if !isupper(key)\n\
    \            upper_case_keys = false\n        end\n    end\n    return lower_case_keys\
    \ || upper_case_keys\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4q2ze9mc.jl:12\nin expression starting at /tmp/tmp4q2ze9mc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict)))\n       \
    \ return true\n    elseif all(islower.(keys(dict)))\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpkh2nq4x4.jl:12\nin expression starting at /tmp/tmpkh2nq4x4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower_case = true\n    upper_case = true\n\
    \    for (key, value) in dict\n        if !islower(key)\n            lower_case\
    \ = false\n        end\n        if !isupper(key)\n            upper_case = false\n\
    \        end\n    end\n    return lower_case || upper_case\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9swsy4a8.jl:12\nin expression starting at /tmp/tmp9swsy4a8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # Your code goes here\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsts824c1.jl:12\nin expression starting at /tmp/tmpsts824c1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are lower case\n    if all(lowercase.(keys(dict)) .== keys(dict))\n\
    \        return true\n    # check if all keys are upper case\n    elseif all(uppercase.(keys(dict))\
    \ .== keys(dict))\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp27ahho3l.jl:12\nin expression starting at /tmp/tmp27ahho3l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = true\n\
    \    upper_keys = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_keys = false\n        end\n        if !isupper(key)\n     \
    \       upper_keys = false\n        end\n    end\n    return lower_keys || upper_keys\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3rb2ah_8.jl:12\nin expression starting at /tmp/tmp3rb2ah_8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(collect(keys(dict)))\n    \
    \    return true\n    elseif isupper(collect(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv9arzlqj.jl:12\nin expression starting at /tmp/tmpv9arzlqj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower_case = true\n    upper_case = true\n\
    \    for (key, value) in dict\n        if !islower(key)\n            lower_case\
    \ = false\n        end\n        if !isupper(key)\n            upper_case = false\n\
    \        end\n    end\n    return lower_case || upper_case\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3u2zh4sd.jl:12\nin expression starting at /tmp/tmp3u2zh4sd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = [key for\
    \ key in keys(dict) if key == lowercase(key)]\n    upper_keys = [key for key in\
    \ keys(dict) if key == uppercase(key)]\n    if length(lower_keys) == length(dict)\
    \ || length(upper_keys) == length(dict)\n        return true\n    else\n     \
    \   return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptx2at_f2.jl:12\nin expression starting at /tmp/tmptx2at_f2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    upper_case = true\n    lower_case = true\n\
    \    for (key, value) in dict\n        if isupper(key[1])\n            lower_case\
    \ = false\n        else\n            upper_case = false\n        end\n    end\n\
    \    return upper_case || lower_case\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1xzhxls4.jl:12\nin expression starting at /tmp/tmp1xzhxls4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = [key for\
    \ key in keys(dict) if key == lowercase(key)]\n    upper_keys = [key for key in\
    \ keys(dict) if key == uppercase(key)]\n    return length(lower_keys) == length(dict)\
    \ || length(upper_keys) == length(dict)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4yt9alo6.jl:12\nin expression starting at /tmp/tmp4yt9alo6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3_kcvgt6.jl:12\nin expression starting at /tmp/tmp3_kcvgt6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_cytl3rz.jl:12\nin expression starting at /tmp/tmp_cytl3rz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict)))\n       \
    \ return true\n    elseif all(islower.(keys(dict)))\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpczlusavg.jl:12\nin expression starting at /tmp/tmpczlusavg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(keys(dict)) .== keys(dict))\n\
    \        return true\n    # check if all keys are in upper case\n    elseif all(uppercase.(keys(dict))\
    \ .== keys(dict))\n        return true\n    # if all keys are not in lower case\
    \ or upper case\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpopnjwmit.jl:12\nin expression starting at /tmp/tmpopnjwmit.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbl7ogsac.jl:12\nin expression starting at /tmp/tmpbl7ogsac.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case = true\n\
    \    upper_case = true\n    for (key, value) in dict\n        if !islower(key)\n\
    \            lower_case = false\n        end\n        if !isupper(key)\n     \
    \       upper_case = false\n        end\n    end\n    return lower_case || upper_case\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1cd5l2xd.jl:12\nin expression starting at /tmp/tmp1cd5l2xd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    is_lower = true\n    is_upper = true\n\
    \    for (key, value) in dict\n        if !isascii(key) || !islower(key)\n   \
    \         is_lower = false\n        end\n        if !isascii(key) || !isupper(key)\n\
    \            is_upper = false\n        end\n    end\n    return is_lower || is_upper\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdlut4aq7.jl:12\nin expression starting at /tmp/tmpdlut4aq7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpeqf_zqlg.jl:12\nin expression starting at /tmp/tmpeqf_zqlg.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower_case = true\n    upper_case = true\n\
    \    for (key, value) in dict\n        if islower(key[1])\n            upper_case\
    \ = false\n        elseif isupper(key[1])\n            lower_case = false\n  \
    \      else\n            return false\n        end\n    end\n    if lower_case\
    \ || upper_case\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp96p409qr.jl:12\nin expression starting at /tmp/tmp96p409qr.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict)))\n       \
    \ return true\n    elseif all(islower.(keys(dict)))\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfa35giw5.jl:12\nin expression starting at /tmp/tmpfa35giw5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = [key for\
    \ key in keys(dict) if key == lowercase(key)]\n    upper_keys = [key for key in\
    \ keys(dict) if key == uppercase(key)]\n    return length(lower_keys) == length(dict)\
    \ || length(upper_keys) == length(dict)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_e4l6l2r.jl:12\nin expression starting at /tmp/tmp_e4l6l2r.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if length(dict) == 1\n        return true\n\
    \    end\n    if length(dict) == 2\n        if keys(dict)[1] == uppercase(keys(dict)[1])\
    \ && keys(dict)[2] == uppercase(keys(dict)[2])\n            return true\n    \
    \    elseif keys(dict)[1] == lowercase(keys(dict)[1]) && keys(dict)[2] == lowercase(keys(dict)[2])\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if length(dict) > 2\n        if keys(dict)[1] == uppercase(keys(dict)[1])\n\
    \            for i in keys(dict)\n                if i != uppercase(i)\n     \
    \               return false\n                end\n            end\n         \
    \   return true\n        elseif keys(dict)[1] == lowercase(keys(dict)[1])\n  \
    \          for i in keys(dict)\n                if i != lowercase(i)\n       \
    \             return false\n                end\n            end\n           \
    \ return true\n        else\n            return false\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1_0wxsf5.jl:12\nin expression starting at /tmp/tmp1_0wxsf5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(collect(keys(dict))))\n\
    \        return true\n    elseif all(islower.(collect(keys(dict))))\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp15h6pndi.jl:12\nin expression starting at /tmp/tmp15h6pndi.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are lower case\n    if all(isascii(key) && islower(key) for key\
    \ in keys(dict))\n        return true\n    end\n    # check if all keys are upper\
    \ case\n    if all(isascii(key) && isupper(key) for key in keys(dict))\n     \
    \   return true\n    end\n    # if neither of the above are true, return false\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy45kmosn.jl:12\nin expression starting at /tmp/tmpy45kmosn.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are lower case\n    if all(lowercase.(keys(dict)) .== keys(dict))\n\
    \        return true\n    end\n    # check if all keys are upper case\n    if\
    \ all(uppercase.(keys(dict)) .== keys(dict))\n        return true\n    end\n \
    \   # if neither of the above is true, return false\n    return false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwmxxktti.jl:12\nin expression starting at /tmp/tmpwmxxktti.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if length(dict) == 1\n        return true\n\
    \    end\n    if length(dict) == 2\n        return false\n    end\n    if length(dict)\
    \ > 2\n        for (key, value) in dict\n            if islower(key)\n       \
    \         return true\n            elseif isupper(key)\n                return\
    \ true\n            else\n                return false\n            end\n    \
    \    end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzqyomrpp.jl:12\nin expression starting at /tmp/tmpzqyomrpp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = [key for\
    \ key in keys(dict) if key == lowercase(key)]\n    upper_keys = [key for key in\
    \ keys(dict) if key == uppercase(key)]\n    if length(lower_keys) == length(dict)\
    \ || length(upper_keys) == length(dict)\n        return true\n    else\n     \
    \   return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptl8h2248.jl:12\nin expression starting at /tmp/tmptl8h2248.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpjleagyiy.jl:12\nin expression starting at /tmp/tmpjleagyiy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpktexjrpy.jl:12\nin expression starting at /tmp/tmpktexjrpy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpptrlkv7_.jl:12\nin expression starting at /tmp/tmpptrlkv7_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(collect(keys(dict)))\n    \
    \    return true\n    elseif isupper(collect(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnsm44hbu.jl:12\nin expression starting at /tmp/tmpnsm44hbu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case_keys = true\n\
    \    upper_case_keys = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_case_keys = false\n        end\n        if !isupper(key)\n\
    \            upper_case_keys = false\n        end\n    end\n    return lower_case_keys\
    \ || upper_case_keys\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg7ip1e11.jl:12\nin expression starting at /tmp/tmpg7ip1e11.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if length(dict) == 1\n        return true\n\
    \    end\n    if islower(keys(dict)[1])\n        for key in keys(dict)\n     \
    \       if !islower(key)\n                return false\n            end\n    \
    \    end\n        return true\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph7ydg4xq.jl:12\nin expression starting at /tmp/tmph7ydg4xq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if length(dict) == 1\n        return true\n\
    \    end\n    keys = keys(dict)\n    if islower(keys[1])\n        for key in keys\n\
    \            if !islower(key)\n                return false\n            end\n\
    \        end\n    else\n        for key in keys\n            if !isupper(key)\n\
    \                return false\n            end\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2rciv2de.jl:12\nin expression starting at /tmp/tmp2rciv2de.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5xr785bv.jl:12\nin expression starting at /tmp/tmp5xr785bv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptqhse3g7.jl:12\nin expression starting at /tmp/tmptqhse3g7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgr0ga5kk.jl:12\nin expression starting at /tmp/tmpgr0ga5kk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # YOUR CODE HERE\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplqkplpda.jl:12\nin expression starting at /tmp/tmplqkplpda.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict)))\n       \
    \ return true\n    elseif all(islower.(keys(dict)))\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi7092qz0.jl:12\nin expression starting at /tmp/tmpi7092qz0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # Your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8nt2bewe.jl:12\nin expression starting at /tmp/tmp8nt2bewe.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case = true\n\
    \    upper_case = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_case = false\n        end\n        if !isupper(key)\n     \
    \       upper_case = false\n        end\n    end\n    return lower_case || upper_case\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps6dsu7qu.jl:12\nin expression starting at /tmp/tmps6dsu7qu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict)))\n       \
    \ return true\n    elseif all(islower.(keys(dict)))\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpponns5nt.jl:12\nin expression starting at /tmp/tmpponns5nt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm_z_6lpj.jl:12\nin expression starting at /tmp/tmpm_z_6lpj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmfrs1i1b.jl:12\nin expression starting at /tmp/tmpmfrs1i1b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    keys = keys(dict)\n    lower_keys = [lowercase(key)\
    \ for key in keys]\n    upper_keys = [uppercase(key) for key in keys]\n    if\
    \ keys == lower_keys\n        return true\n    elseif keys == upper_keys\n   \
    \     return true\n    else\n        return false\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj9zmcxtj.jl:12\nin expression starting at /tmp/tmpj9zmcxtj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpo7z2cq_r.jl:12\nin expression starting at /tmp/tmpo7z2cq_r.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(keys(dict)) .== keys(dict))\n\
    \        return true\n    # check if all keys are in upper case\n    elseif all(uppercase.(keys(dict))\
    \ .== keys(dict))\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8ip93fps.jl:12\nin expression starting at /tmp/tmp8ip93fps.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(collect(keys(dict))))\n\
    \        return true\n    end\n    # check if all keys are in upper case\n   \
    \ if all(uppercase.(collect(keys(dict))))\n        return true\n    end\n    #\
    \ if all keys are not in lower case or upper case\n    return false\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmphp15ot8i.jl:12\nin expression starting at /tmp/tmphp15ot8i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(collect(keys(dict)))\n    \
    \    return true\n    elseif isupper(collect(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2vkdd7mf.jl:12\nin expression starting at /tmp/tmp2vkdd7mf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower = true\n    upper = true\n    for\
    \ (key, value) in dict\n        if islower(key)\n            upper = false\n \
    \       elseif isupper(key)\n            lower = false\n        else\n       \
    \     return false\n        end\n    end\n    return lower || upper\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf0xmz9js.jl:12\nin expression starting at /tmp/tmpf0xmz9js.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyjfacogl.jl:12\nin expression starting at /tmp/tmpyjfacogl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower_case = true\n    upper_case = true\n\
    \    for (key, value) in dict\n        if !islower(key)\n            lower_case\
    \ = false\n        end\n        if !isupper(key)\n            upper_case = false\n\
    \        end\n    end\n    return lower_case || upper_case\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbm1t1g0y.jl:12\nin expression starting at /tmp/tmpbm1t1g0y.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    return all(isupper.(keys(dict)))\
    \ || all(islower.(keys(dict)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpl3i73_tl.jl:12\nin expression starting at /tmp/tmpl3i73_tl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # YOUR CODE HERE\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplo50u7ob.jl:12\nin expression starting at /tmp/tmplo50u7ob.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(collect(keys(dict))))\n\
    \        return true\n    # check if all keys are in upper case\n    elseif all(uppercase.(collect(keys(dict))))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmplmna3lmw.jl:12\nin expression starting at /tmp/tmplmna3lmw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    is_lower = true\n    is_upper = true\n\
    \    for (key, value) in dict\n        if islower(key) == false\n            is_lower\
    \ = false\n        end\n        if isupper(key) == false\n            is_upper\
    \ = false\n        end\n    end\n    return is_lower || is_upper\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3tqxtbvs.jl:12\nin expression starting at /tmp/tmp3tqxtbvs.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict)))\n       \
    \ return true\n    elseif all(islower.(keys(dict)))\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcdcvk6ra.jl:12\nin expression starting at /tmp/tmpcdcvk6ra.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpyrk16_i0.jl:12\nin expression starting at /tmp/tmpyrk16_i0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpvr8junub.jl:12\nin expression starting at /tmp/tmpvr8junub.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower_case = true\n    upper_case = true\n\
    \    for (key, value) in dict\n        if !islower(key)\n            lower_case\
    \ = false\n        end\n        if !isupper(key)\n            upper_case = false\n\
    \        end\n    end\n    return lower_case || upper_case\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp_bpb1v87.jl:12\nin expression starting at /tmp/tmp_bpb1v87.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case_keys = true\n\
    \    upper_case_keys = true\n    for key in keys(dict)\n        if !isupper(key)\n\
    \            upper_case_keys = false\n        end\n        if !islower(key)\n\
    \            lower_case_keys = false\n        end\n    end\n    return lower_case_keys\
    \ || upper_case_keys\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp9se26jcq.jl:12\nin expression starting at /tmp/tmp9se26jcq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower = true\n    upper = true\n    for\
    \ (key, value) in dict\n        if !islower(key)\n            lower = false\n\
    \        end\n        if !isupper(key)\n            upper = false\n        end\n\
    \    end\n    return lower || upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1q296n1n.jl:12\nin expression starting at /tmp/tmp1q296n1n.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8raxbaly.jl:12\nin expression starting at /tmp/tmp8raxbaly.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpchz3dsct.jl:12\nin expression starting at /tmp/tmpchz3dsct.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower_case = true\n    upper_case = true\n\
    \    for (key, value) in dict\n        if !islower(key)\n            lower_case\
    \ = false\n        end\n        if !isupper(key)\n            upper_case = false\n\
    \        end\n    end\n    return lower_case || upper_case\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfe63lhsk.jl:12\nin expression starting at /tmp/tmpfe63lhsk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # Your code here\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp678nw34c.jl:12\nin expression starting at /tmp/tmp678nw34c.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower_case = true\n    upper_case = true\n\
    \    for (key, value) in dict\n        if !islower(key)\n            lower_case\
    \ = false\n        end\n        if !isupper(key)\n            upper_case = false\n\
    \        end\n    end\n    return lower_case || upper_case\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpcpqtq082.jl:12\nin expression starting at /tmp/tmpcpqtq082.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = [key for\
    \ key in keys(dict) if key == lowercase(key)]\n    upper_keys = [key for key in\
    \ keys(dict) if key == uppercase(key)]\n    if length(lower_keys) == length(dict)\
    \ || length(upper_keys) == length(dict)\n        return true\n    else\n     \
    \   return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4rq83lj1.jl:12\nin expression starting at /tmp/tmp4rq83lj1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are lowercase\n    if all(key in keys(dict) for key in lowercase(keys(dict)))\n\
    \        return true\n    # check if all keys are uppercase\n    elseif all(key\
    \ in keys(dict) for key in uppercase(keys(dict)))\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdt7kehjy.jl:12\nin expression starting at /tmp/tmpdt7kehjy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    keys = collect(keys(dict))\n    if islowercase(keys[1])\n\
    \        for key in keys\n            if !islowercase(key)\n                return\
    \ false\n            end\n        end\n    else\n        for key in keys\n   \
    \         if !isuppercase(key)\n                return false\n            end\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4_9mp23s.jl:12\nin expression starting at /tmp/tmp4_9mp23s.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict)))\n       \
    \ return true\n    elseif all(islower.(keys(dict)))\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv3qnjthy.jl:12\nin expression starting at /tmp/tmpv3qnjthy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    elseif isupper(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !isupper(key)\n                return false\n\
    \            end\n        end\n    else\n        return false\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpifknpo8_.jl:12\nin expression starting at /tmp/tmpifknpo8_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # Your code goes here\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi5urp9rl.jl:12\nin expression starting at /tmp/tmpi5urp9rl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm44lbbbe.jl:12\nin expression starting at /tmp/tmpm44lbbbe.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if length(dict) == 1\n        return true\n\
    \    end\n    if islower(keys(dict)[1])\n        for key in keys(dict)\n     \
    \       if !islower(key)\n                return false\n            end\n    \
    \    end\n        return true\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n        return true\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfufi2yhx.jl:12\nin expression starting at /tmp/tmpfufi2yhx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptxdlh3vq.jl:12\nin expression starting at /tmp/tmptxdlh3vq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # your code here\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps5n8zukd.jl:12\nin expression starting at /tmp/tmps5n8zukd.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfvkjvhxb.jl:12\nin expression starting at /tmp/tmpfvkjvhxb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxacss71p.jl:12\nin expression starting at /tmp/tmpxacss71p.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are lower case\n    if all(isascii(key) && islower(key) for key\
    \ in keys(dict))\n        return true\n    # check if all keys are upper case\n\
    \    elseif all(isascii(key) && isupper(key) for key in keys(dict))\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbzbwbuq_.jl:12\nin expression starting at /tmp/tmpbzbwbuq_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpy98u3qt5.jl:12\nin expression starting at /tmp/tmpy98u3qt5.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1setak54.jl:12\nin expression starting at /tmp/tmp1setak54.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = true\n\
    \    upper_keys = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_keys = false\n        end\n        if !isupper(key)\n     \
    \       upper_keys = false\n        end\n    end\n    return lower_keys || upper_keys\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpshet15vf.jl:12\nin expression starting at /tmp/tmpshet15vf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(string.islower, keys(dict)) ||\
    \ all(string.isupper, keys(dict))\n        return true\n    else\n        return\
    \ false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpa83ftub2.jl:12\nin expression starting at /tmp/tmpa83ftub2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = true\n\
    \    upper_keys = true\n    for (key, value) in dict\n        if !islower(key)\n\
    \            lower_keys = false\n        end\n        if !isupper(key)\n     \
    \       upper_keys = false\n        end\n    end\n    return lower_keys || upper_keys\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqhaxy4oa.jl:12\nin expression starting at /tmp/tmpqhaxy4oa.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case_keys = true\n\
    \    upper_case_keys = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_case_keys = false\n        end\n        if !isupper(key)\n\
    \            upper_case_keys = false\n        end\n    end\n    return lower_case_keys\
    \ || upper_case_keys\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpim22bt9a.jl:12\nin expression starting at /tmp/tmpim22bt9a.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = 0\n  \
    \  upper_keys = 0\n    for key in keys(dict)\n        if islower(key)\n      \
    \      lower_keys += 1\n        elseif isupper(key)\n            upper_keys +=\
    \ 1\n        end\n    end\n    if lower_keys == length(dict) || upper_keys ==\
    \ length(dict)\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpsnfx8jdo.jl:12\nin expression starting at /tmp/tmpsnfx8jdo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(isascii(key) && islower(key) for key\
    \ in keys(dict))\n        return true\n    # check if all keys are in upper case\n\
    \    elseif all(isascii(key) && isupper(key) for key in keys(dict))\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv4a55b0d.jl:12\nin expression starting at /tmp/tmpv4a55b0d.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if isempty(dict)\n        return false\n    end\n    # check if\
    \ all keys are in lower case\n    if all(lowercase.(keys(dict)) .== keys(dict))\n\
    \        return true\n    end\n    # check if all keys are in upper case\n   \
    \ if all(uppercase.(keys(dict)) .== keys(dict))\n        return true\n    end\n\
    \    # if none of the above conditions are met, return false\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpijz0kwul.jl:12\nin expression starting at /tmp/tmpijz0kwul.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(isascii(key) && islower(key) for key\
    \ in keys(dict))\n        return true\n    end\n    # check if all keys are in\
    \ upper case\n    if all(isascii(key) && isupper(key) for key in keys(dict))\n\
    \        return true\n    end\n    # otherwise return false\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmprv6hk3b_.jl:12\nin expression starting at /tmp/tmprv6hk3b_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(collect(keys(dict)))\n    \
    \    return true\n    elseif isupper(collect(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxw6r1g0t.jl:12\nin expression starting at /tmp/tmpxw6r1g0t.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp5ud9gpb8.jl:12\nin expression starting at /tmp/tmp5ud9gpb8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict)))\n       \
    \ return true\n    elseif all(islower.(keys(dict)))\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpd7b_vx_8.jl:12\nin expression starting at /tmp/tmpd7b_vx_8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are strings in lower case\n    if all(lowercase.(collect(keys(dict))))\n\
    \        return true\n    # check if all keys are strings in upper case\n    elseif\
    \ all(uppercase.(collect(keys(dict))))\n        return true\n    else\n      \
    \  return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp52jjvyva.jl:12\nin expression starting at /tmp/tmp52jjvyva.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmppxqek5_h.jl:12\nin expression starting at /tmp/tmppxqek5_h.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    elseif isupper(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !isupper(key)\n                return false\n\
    \            end\n        end\n    else\n        return false\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpax30oav2.jl:12\nin expression starting at /tmp/tmpax30oav2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(collect(keys(dict)))\n    \
    \    return true\n    elseif isupper(collect(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgwkl3xfl.jl:12\nin expression starting at /tmp/tmpgwkl3xfl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqwxe56qj.jl:12\nin expression starting at /tmp/tmpqwxe56qj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr0lgywwf.jl:12\nin expression starting at /tmp/tmpr0lgywwf.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqz9oynry.jl:12\nin expression starting at /tmp/tmpqz9oynry.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # Your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpioriqpus.jl:12\nin expression starting at /tmp/tmpioriqpus.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpm08bpurw.jl:12\nin expression starting at /tmp/tmpm08bpurw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(collect(keys(dict)))\n    \
    \    return true\n    elseif isupper(collect(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2t51u3as.jl:12\nin expression starting at /tmp/tmp2t51u3as.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(collect(keys(dict)))\n    \
    \    return true\n    elseif isupper(collect(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg0ctjvo9.jl:12\nin expression starting at /tmp/tmpg0ctjvo9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(x in string.lowercase for x in\
    \ keys(dict))\n        return true\n    elseif all(x in string.uppercase for x\
    \ in keys(dict))\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmhbhjezy.jl:12\nin expression starting at /tmp/tmpmhbhjezy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbab9nb0k.jl:12\nin expression starting at /tmp/tmpbab9nb0k.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = true\n\
    \    upper_keys = true\n    for (key, value) in dict\n        if !islower(key)\n\
    \            lower_keys = false\n        end\n        if !isupper(key)\n     \
    \       upper_keys = false\n        end\n    end\n    return upper_keys || lower_keys\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp775grs4l.jl:12\nin expression starting at /tmp/tmp775grs4l.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(collect(keys(dict))))\n\
    \        return true\n    end\n    # check if all keys are in upper case\n   \
    \ if all(uppercase.(collect(keys(dict))))\n        return true\n    end\n    #\
    \ if none of the above conditions are met, return false\n    return false\nend\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpiel01blt.jl:12\nin expression starting at /tmp/tmpiel01blt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower_case = true\n    upper_case = true\n\
    \    for (key, value) in dict\n        if !islower(key)\n            lower_case\
    \ = false\n        end\n        if !isupper(key)\n            upper_case = false\n\
    \        end\n    end\n    return lower_case || upper_case\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpirkvx_f0.jl:12\nin expression starting at /tmp/tmpirkvx_f0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(keys(dict)) .== keys(dict))\n\
    \        return true\n    end\n    # check if all keys are in upper case\n   \
    \ if all(uppercase.(keys(dict)) .== keys(dict))\n        return true\n    end\n\
    \    # if none of the above conditions are true, return false\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4vtgsbaw.jl:12\nin expression starting at /tmp/tmp4vtgsbaw.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = [key for\
    \ key in keys(dict) if key == lowercase(key)]\n    upper_keys = [key for key in\
    \ keys(dict) if key == uppercase(key)]\n    return length(lower_keys) == length(dict)\
    \ || length(upper_keys) == length(dict)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpgxngxskh.jl:12\nin expression starting at /tmp/tmpgxngxskh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxbncyyy1.jl:12\nin expression starting at /tmp/tmpxbncyyy1.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict)))\n       \
    \ return true\n    elseif all(islower.(keys(dict)))\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpg396bvjv.jl:12\nin expression starting at /tmp/tmpg396bvjv.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(collect(keys(dict))))\n\
    \        return true\n    # check if all keys are in upper case\n    elseif all(uppercase.(collect(keys(dict))))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8ho73aof.jl:12\nin expression starting at /tmp/tmp8ho73aof.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = [key for\
    \ key in keys(dict) if key == lowercase(key)]\n    upper_keys = [key for key in\
    \ keys(dict) if key == uppercase(key)]\n    return length(lower_keys) == length(dict)\
    \ || length(upper_keys) == length(dict)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp67eei3v8.jl:12\nin expression starting at /tmp/tmp67eei3v8.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn29_ga0b.jl:12\nin expression starting at /tmp/tmpn29_ga0b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    elseif isupper(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !isupper(key)\n                return false\n\
    \            end\n        end\n    else\n        return false\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbtx5yath.jl:12\nin expression starting at /tmp/tmpbtx5yath.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(collect(keys(dict)))\n    \
    \    return true\n    elseif isupper(collect(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3ixaputy.jl:12\nin expression starting at /tmp/tmp3ixaputy.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(isascii(key) && islower(key) for key\
    \ in keys(dict))\n        return true\n    # check if all keys are in upper case\n\
    \    elseif all(isascii(key) && isupper(key) for key in keys(dict))\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwxlmgp8x.jl:12\nin expression starting at /tmp/tmpwxlmgp8x.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # your code here\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp09b9p1oc.jl:12\nin expression starting at /tmp/tmp09b9p1oc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower_case = true\n    upper_case = true\n\
    \    for (key, value) in dict\n        if !islower(key)\n            lower_case\
    \ = false\n        end\n        if !isupper(key)\n            upper_case = false\n\
    \        end\n    end\n    return lower_case || upper_case\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2wby18_d.jl:12\nin expression starting at /tmp/tmp2wby18_d.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(isascii(key) && islower(key) for key\
    \ in keys(dict))\n        return true\n    end\n    # check if all keys are in\
    \ upper case\n    if all(isascii(key) && isupper(key) for key in keys(dict))\n\
    \        return true\n    end\n    # if neither of the above conditions are true,\
    \ return false\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps36wzae6.jl:12\nin expression starting at /tmp/tmps36wzae6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(collect(keys(dict))))\n\
    \        return true\n    end\n    # check if all keys are in upper case\n   \
    \ if all(uppercase.(collect(keys(dict))))\n        return true\n    end\n    #\
    \ if neither of the above conditions are met, return false\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3prxa1no.jl:12\nin expression starting at /tmp/tmp3prxa1no.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(collect(keys(dict)))\n    \
    \    return true\n    elseif isupper(collect(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1yn1d2s2.jl:12\nin expression starting at /tmp/tmp1yn1d2s2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph0w56ivb.jl:12\nin expression starting at /tmp/tmph0w56ivb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpaes_p7da.jl:12\nin expression starting at /tmp/tmpaes_p7da.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # your code here\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpq_wxqa03.jl:12\nin expression starting at /tmp/tmpq_wxqa03.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnhauzfne.jl:12\nin expression starting at /tmp/tmpnhauzfne.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(keys(dict)) .== keys(dict))\n\
    \        return true\n    # check if all keys are in upper case\n    elseif all(uppercase.(keys(dict))\
    \ .== keys(dict))\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpmf5kbony.jl:12\nin expression starting at /tmp/tmpmf5kbony.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case = true\n\
    \    upper_case = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_case = false\n        end\n        if !isupper(key)\n     \
    \       upper_case = false\n        end\n    end\n    return lower_case || upper_case\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpk2bpmu8y.jl:12\nin expression starting at /tmp/tmpk2bpmu8y.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower_case = true\n    upper_case = true\n\
    \    for (key, value) in dict\n        if !islower(key)\n            lower_case\
    \ = false\n        end\n        if !isupper(key)\n            upper_case = false\n\
    \        end\n    end\n    return lower_case || upper_case\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8_m70_r9.jl:12\nin expression starting at /tmp/tmp8_m70_r9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(key in lowercase(key) for key in keys(dict))\n\
    \        return true\n    end\n    # check if all keys are in upper case\n   \
    \ if all(key in uppercase(key) for key in keys(dict))\n        return true\n \
    \   end\n    # if none of the above conditions are met, return false\n    return\
    \ false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6duhoey4.jl:12\nin expression starting at /tmp/tmp6duhoey4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpchtdkz6d.jl:12\nin expression starting at /tmp/tmpchtdkz6d.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if length(dict) == 1\n        return true\n\
    \    end\n    if all(isupper.(keys(dict)))\n        return true\n    end\n   \
    \ if all(islower.(keys(dict)))\n        return true\n    end\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpi7vf175z.jl:12\nin expression starting at /tmp/tmpi7vf175z.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(isascii(key) && islower(key) for key\
    \ in keys(dict))\n        return true\n    # check if all keys are in upper case\n\
    \    elseif all(isascii(key) && isupper(key) for key in keys(dict))\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwil7y9r6.jl:12\nin expression starting at /tmp/tmpwil7y9r6.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    for (key, value) in dict\n        if !(islower(key)\
    \ || isupper(key))\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4m871p5r.jl:12\nin expression starting at /tmp/tmp4m871p5r.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwchvheov.jl:12\nin expression starting at /tmp/tmpwchvheov.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # your code here\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpn44irzn2.jl:12\nin expression starting at /tmp/tmpn44irzn2.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(collect(keys(dict)))\n    \
    \    return true\n    elseif isupper(collect(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7qxghbg4.jl:12\nin expression starting at /tmp/tmp7qxghbg4.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower = true\n    upper\
    \ = true\n    for (key, value) in dict\n        if key != lowercase(key)\n   \
    \         lower = false\n        end\n        if key != uppercase(key)\n     \
    \       upper = false\n        end\n    end\n    return lower || upper\nend\n\
    using Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbjblty84.jl:12\nin expression starting at /tmp/tmpbjblty84.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(keys(dict)) .== keys(dict))\n\
    \        return true\n    end\n    # check if all keys are in upper case\n   \
    \ if all(uppercase.(keys(dict)) .== keys(dict))\n        return true\n    end\n\
    \    # if none of the above conditions are true, return false\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0qlzr1o3.jl:12\nin expression starting at /tmp/tmp0qlzr1o3.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpv7oqsa3o.jl:12\nin expression starting at /tmp/tmpv7oqsa3o.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    elseif isupper(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !isupper(key)\n                return false\n\
    \            end\n        end\n    else\n        return false\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp0_hwcww9.jl:12\nin expression starting at /tmp/tmp0_hwcww9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if length(dict) == 1\n        return true\n\
    \    end\n    if length(dict) == 2\n        if keys(dict)[1] == uppercase(keys(dict)[1])\
    \ && keys(dict)[2] == uppercase(keys(dict)[2])\n            return true\n    \
    \    elseif keys(dict)[1] == lowercase(keys(dict)[1]) && keys(dict)[2] == lowercase(keys(dict)[2])\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if length(dict) > 2\n        if keys(dict)[1] == uppercase(keys(dict)[1])\n\
    \            for i in keys(dict)\n                if i != uppercase(i)\n     \
    \               return false\n                end\n            end\n         \
    \   return true\n        elseif keys(dict)[1] == lowercase(keys(dict)[1])\n  \
    \          for i in keys(dict)\n                if i != lowercase(i)\n       \
    \             return false\n                end\n            end\n           \
    \ return true\n        else\n            return false\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpghe5uog_.jl:12\nin expression starting at /tmp/tmpghe5uog_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict)))\n       \
    \ return true\n    elseif all(islower.(keys(dict)))\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp6b1hp_ke.jl:12\nin expression starting at /tmp/tmp6b1hp_ke.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # your code here\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3xfx2qoq.jl:12\nin expression starting at /tmp/tmp3xfx2qoq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict)))\n       \
    \ return true\n    elseif all(islower.(keys(dict)))\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmps_6exx_i.jl:12\nin expression starting at /tmp/tmps_6exx_i.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzia3d3oz.jl:12\nin expression starting at /tmp/tmpzia3d3oz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(keys(dict)) .== keys(dict))\n\
    \        return true\n    # check if all keys are in upper case\n    elseif all(uppercase.(keys(dict))\
    \ .== keys(dict))\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp34dbm78b.jl:12\nin expression starting at /tmp/tmp34dbm78b.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case_keys = true\n\
    \    upper_case_keys = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_case_keys = false\n        end\n        if !isupper(key)\n\
    \            upper_case_keys = false\n        end\n    end\n    return lower_case_keys\
    \ || upper_case_keys\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxt2j4o1d.jl:12\nin expression starting at /tmp/tmpxt2j4o1d.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # Your code here\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqaonmgmp.jl:12\nin expression starting at /tmp/tmpqaonmgmp.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    keys = collect(keys(dict))\n    if all(isupper.(keys))\n\
    \        return true\n    elseif all(islower.(keys))\n        return true\n  \
    \  else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2itignw0.jl:12\nin expression starting at /tmp/tmp2itignw0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    elseif isupper(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !isupper(key)\n                return false\n\
    \            end\n        end\n    else\n        return false\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr50lx8pn.jl:12\nin expression starting at /tmp/tmpr50lx8pn.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8pvt_mzs.jl:12\nin expression starting at /tmp/tmp8pvt_mzs.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpypri5sa0.jl:12\nin expression starting at /tmp/tmpypri5sa0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpfwawf108.jl:12\nin expression starting at /tmp/tmpfwawf108.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case = true\n\
    \    upper_case = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_case = false\n        end\n        if !isupper(key)\n     \
    \       upper_case = false\n        end\n    end\n    return lower_case || upper_case\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp49ajiahk.jl:12\nin expression starting at /tmp/tmp49ajiahk.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    elseif isupper(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !isupper(key)\n                return false\n\
    \            end\n        end\n    else\n        return false\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpon68tcjq.jl:12\nin expression starting at /tmp/tmpon68tcjq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if length(dict) == 1\n        return true\n\
    \    end\n    if length(dict) > 1\n        if islower(keys(dict)[1])\n       \
    \     for key in keys(dict)\n                if !islower(key)\n              \
    \      return false\n                end\n            end\n            return\
    \ true\n        elseif isupper(keys(dict)[1])\n            for key in keys(dict)\n\
    \                if !isupper(key)\n                    return false\n        \
    \        end\n            end\n            return true\n        else\n       \
    \     return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdq5nqvx9.jl:12\nin expression starting at /tmp/tmpdq5nqvx9.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    upper_keys = true\n    lower_keys = true\n\
    \    for (key, value) in dict\n        if !islower(key)\n            upper_keys\
    \ = false\n        end\n        if !isupper(key)\n            lower_keys = false\n\
    \        end\n    end\n    return upper_keys || lower_keys\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4bad7bge.jl:12\nin expression starting at /tmp/tmp4bad7bge.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if length(dict) == 1\n        return true\n\
    \    end\n    if length(dict) == 2\n        if keys(dict)[1] == uppercase(keys(dict)[1])\
    \ && keys(dict)[2] == uppercase(keys(dict)[2])\n            return true\n    \
    \    elseif keys(dict)[1] == lowercase(keys(dict)[1]) && keys(dict)[2] == lowercase(keys(dict)[2])\n\
    \            return true\n        else\n            return false\n        end\n\
    \    end\n    if length(dict) > 2\n        if keys(dict)[1] == uppercase(keys(dict)[1])\
    \ && keys(dict)[2] == uppercase(keys(dict)[2])\n            for i in 3:length(dict)\n\
    \                if keys(dict)[i] != uppercase(keys(dict)[i])\n              \
    \      return false\n                end\n            end\n            return\
    \ true\n        elseif keys(dict)[1] == lowercase(keys(dict)[1]) && keys(dict)[2]\
    \ == lowercase(keys(dict)[2])\n            for i in 3:length(dict)\n         \
    \       if keys(dict)[i] != lowercase(keys(dict)[i])\n                    return\
    \ false\n                end\n            end\n            return true\n     \
    \   else\n            return false\n        end\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpr2j8b09v.jl:12\nin expression starting at /tmp/tmpr2j8b09v.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case = true\n\
    \    upper_case = true\n    for (key, value) in dict\n        if !isupper(key)\n\
    \            upper_case = false\n        end\n        if !islower(key)\n     \
    \       lower_case = false\n        end\n    end\n    return lower_case || upper_case\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqncrt0em.jl:12\nin expression starting at /tmp/tmpqncrt0em.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp84pybkir.jl:12\nin expression starting at /tmp/tmp84pybkir.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = true\n\
    \    upper_keys = true\n    for key in keys(dict)\n        lower_keys = lower_keys\
    \ && islower(key)\n        upper_keys = upper_keys && isupper(key)\n    end\n\
    \    return lower_keys || upper_keys\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpx91di16q.jl:12\nin expression starting at /tmp/tmpx91di16q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpzvb7m_u0.jl:12\nin expression starting at /tmp/tmpzvb7m_u0.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower = true\n    upper\
    \ = true\n    for (k,v) in dict\n        if lower\n            lower = islower(k)\n\
    \        end\n        if upper\n            upper = isupper(k)\n        end\n\
    \    end\n    return lower || upper\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp1uhmuzkj.jl:12\nin expression starting at /tmp/tmp1uhmuzkj.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are lower case\n    if all(lowercase.(collect(keys(dict))) .== collect(keys(dict)))\n\
    \        return true\n    # check if all keys are upper case\n    elseif all(uppercase.(collect(keys(dict)))\
    \ .== collect(keys(dict)))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpezmeohwl.jl:12\nin expression starting at /tmp/tmpezmeohwl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    elseif isupper(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !isupper(key)\n                return false\n\
    \            end\n        end\n    else\n        return false\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpglb46afn.jl:12\nin expression starting at /tmp/tmpglb46afn.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = [k for\
    \ k in keys(dict) if k == lowercase(k)]\n    upper_keys = [k for k in keys(dict)\
    \ if k == uppercase(k)]\n    return length(lower_keys) == length(dict) || length(upper_keys)\
    \ == length(dict)\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpndjx6psu.jl:12\nin expression starting at /tmp/tmpndjx6psu.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp2z87y2po.jl:12\nin expression starting at /tmp/tmp2z87y2po.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    elseif isupper(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !isupper(key)\n                return false\n\
    \            end\n        end\n    else\n        return false\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpnr7b_ayt.jl:12\nin expression starting at /tmp/tmpnr7b_ayt.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = [key for\
    \ key in keys(dict) if key == lowercase(key)]\n    upper_keys = [key for key in\
    \ keys(dict) if key == uppercase(key)]\n    return length(lower_keys) == length(dict)\
    \ || length(upper_keys) == length(dict)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4zp29exh.jl:12\nin expression starting at /tmp/tmp4zp29exh.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islowercase(collect(keys(dict)))\n\
    \        return true\n    elseif isuppercase(collect(keys(dict)))\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpj9pah9zq.jl:12\nin expression starting at /tmp/tmpj9pah9zq.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # Your code here\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpbo8sh1we.jl:12\nin expression starting at /tmp/tmpbo8sh1we.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    for (key, value) in dict\n        if !(islower(key)\
    \ || isupper(key))\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp935ktysb.jl:12\nin expression starting at /tmp/tmp935ktysb.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(keys(dict)) .== keys(dict))\n\
    \        return true\n    end\n    # check if all keys are in upper case\n   \
    \ if all(uppercase.(keys(dict)) .== keys(dict))\n        return true\n    end\n\
    \    # if none of the above conditions are met, return false\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdkj90_5z.jl:12\nin expression starting at /tmp/tmpdkj90_5z.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(isascii(key) && islower(key) for key\
    \ in keys(dict))\n        return true\n    # check if all keys are in upper case\n\
    \    elseif all(isascii(key) && isupper(key) for key in keys(dict))\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\"\
    , \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpxvnnfb_q.jl:12\nin expression starting at /tmp/tmpxvnnfb_q.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if length(dict) == 1\n        return true\n\
    \    end\n    keys = collect(keys(dict))\n    if islower(keys[1])\n        for\
    \ key in keys\n            if !islower(key)\n                return false\n  \
    \          end\n        end\n    else\n        for key in keys\n            if\
    \ !isupper(key)\n                return false\n            end\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpibkhjsor.jl:12\nin expression starting at /tmp/tmpibkhjsor.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    keys = collect(keys(dict))\n    if all(isupper.(keys))\n\
    \        return true\n    elseif all(islower.(keys))\n        return true\n  \
    \  else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8f4ifpct.jl:12\nin expression starting at /tmp/tmp8f4ifpct.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case = true\n\
    \    upper_case = true\n    for key in keys(dict)\n        if !islower(key)\n\
    \            lower_case = false\n        end\n        if !isupper(key)\n     \
    \       upper_case = false\n        end\n    end\n    return lower_case || upper_case\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpqdye0glc.jl:12\nin expression starting at /tmp/tmpqdye0glc.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if all(isupper.(keys(dict))) || all(islower.(keys(dict)))\n\
    \        return true\n    else\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpthhob3rl.jl:12\nin expression starting at /tmp/tmpthhob3rl.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    elseif isupper(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !isupper(key)\n                return false\n\
    \            end\n        end\n    else\n        return false\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8ocez06y.jl:12\nin expression starting at /tmp/tmp8ocez06y.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case = true\n\
    \    upper_case = true\n    for (key, value) in dict\n        if !islower(key)\n\
    \            lower_case = false\n        end\n        if !isupper(key)\n     \
    \       upper_case = false\n        end\n    end\n    return lower_case || upper_case\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp24vmnh39.jl:12\nin expression starting at /tmp/tmp24vmnh39.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if length(dict) == 1\n        return true\n\
    \    end\n    if length(dict) == 2\n        if keys(dict)[1] == uppercase(keys(dict)[1])\n\
    \            return keys(dict)[2] == uppercase(keys(dict)[2])\n        else\n\
    \            return keys(dict)[2] == lowercase(keys(dict)[2])\n        end\n \
    \   end\n    if length(dict) > 2\n        if keys(dict)[1] == uppercase(keys(dict)[1])\n\
    \            for i in keys(dict)\n                if i != uppercase(i)\n     \
    \               return false\n                end\n            end\n         \
    \   return true\n        else\n            for i in keys(dict)\n             \
    \   if i != lowercase(i)\n                    return false\n                end\n\
    \            end\n            return true\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp7qyb5abo.jl:12\nin expression starting at /tmp/tmp7qyb5abo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(x -> x == lowercase(x), keys(dict))\n\
    \        return true\n    end\n    # check if all keys are in upper case\n   \
    \ if all(x -> x == uppercase(x), keys(dict))\n        return true\n    end\n \
    \   # if none of the above conditions are met, return false\n    return false\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmptooup41a.jl:12\nin expression starting at /tmp/tmptooup41a.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        return\
    \ all(islower, keys(dict))\n    else\n        return all(isupper, keys(dict))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpoc__qyf_.jl:12\nin expression starting at /tmp/tmpoc__qyf_.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    lower_case = true\n    upper_case = true\n\
    \    for (key, value) in dict\n        if !islower(key)\n            lower_case\
    \ = false\n        end\n        if !isupper(key)\n            upper_case = false\n\
    \        end\n    end\n    return lower_case || upper_case\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" =>\
    \ \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4ap196vo.jl:12\nin expression starting at /tmp/tmp4ap196vo.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(collect(keys(dict)))\n    \
    \    return true\n    elseif isupper(collect(keys(dict)))\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp4lyi964g.jl:12\nin expression starting at /tmp/tmp4lyi964g.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    else\n        for key in keys(dict)\n     \
    \       if !isupper(key)\n                return false\n            end\n    \
    \    end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" =>\
    \ \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\"\
    \ => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"p\"\
    \ => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"\
    Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t\
    @test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t\
    @test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\
    \t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp8_tpg2br.jl:12\nin expression starting at /tmp/tmp8_tpg2br.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_keys = [key for\
    \ key in keys(dict) if key == lowercase(key)]\n    upper_keys = [key for key in\
    \ keys(dict) if key == uppercase(key)]\n    if length(lower_keys) == length(dict)\
    \ || length(upper_keys) == length(dict)\n        return true\n    else\n     \
    \   return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\
    \t@test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpf9rrdtd7.jl:12\nin expression starting at /tmp/tmpf9rrdtd7.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    is_lower = true\n    is_upper = true\n\
    \    for (key, value) in dict\n        if islower(key) == false\n            is_lower\
    \ = false\n        end\n        if isupper(key) == false\n            is_upper\
    \ = false\n        end\n    end\n    if is_lower || is_upper\n        return true\n\
    \    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph513m5wx.jl:12\nin expression starting at /tmp/tmph513m5wx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(first(keys(dict)))\n      \
    \  return all(islower, keys(dict))\n    else\n        return all(isupper, keys(dict))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp3kvtlhmx.jl:12\nin expression starting at /tmp/tmp3kvtlhmx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    lower_case = true\n\
    \    upper_case = true\n    for (key, value) in dict\n        if !islower(key)\n\
    \            lower_case = false\n        end\n        if !isupper(key)\n     \
    \       upper_case = false\n        end\n    end\n    return lower_case || upper_case\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmp42vmeu3j.jl:12\nin expression starting at /tmp/tmp42vmeu3j.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if islower(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !islower(key)\n                return false\n\
    \            end\n        end\n    elseif isupper(keys(dict)[1])\n        for\
    \ key in keys(dict)\n            if !isupper(key)\n                return false\n\
    \            end\n        end\n    else\n        return false\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"\
    banana\")) == false)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"5\" =>\
    \ \"banana\", \"a\" => \"apple\")) == false)\n\t@test(candidate(Dict(\"Name\"\
    \ => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"\
    STATE\" => \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"\
    fruit\" => \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict())\
    \ == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpwykiq44z.jl:12\nin expression starting at /tmp/tmpwykiq44z.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    if length(dict) ==\
    \ 0\n        return false\n    end\n    if length(dict) == 1\n        return true\n\
    \    end\n    if length(dict) > 1\n        if islower(keys(dict)[1])\n       \
    \     for key in keys(dict)\n                if !islower(key)\n              \
    \      return false\n                end\n            end\n            return\
    \ true\n        elseif isupper(keys(dict)[1])\n            for key in keys(dict)\n\
    \                if !isupper(key)\n                    return false\n        \
    \        end\n            end\n            return true\n        else\n       \
    \     return false\n        end\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = check_dict_case;\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"p\" => \"pineapple\", \"\
    A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"apple\")) == false)\n\t\
    @test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"36\", \"City\" => \"Houston\"\
    )) == false)\n\t@test(candidate(Dict(\"STATE\" => \"NC\", \"ZIP\" => \"12345\"\
    )) == true)\n\t@test(candidate(Dict(\"fruit\" => \"Orange\", \"taste\" => \"Sweet\"\
    )) == true)\n\t@test(candidate(Dict()) == false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmph5lg7xrz.jl:12\nin expression starting at /tmp/tmph5lg7xrz.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # Your code here\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpdnqgrhnx.jl:12\nin expression starting at /tmp/tmpdnqgrhnx.jl:12\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given a dictionary, return True if all keys are strings in\
    \ lower \n    case or all keys are strings in upper case, else return False.\n\
    \    The function should return False is the given dictionary is empty.\n    Examples:\n\
    \    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n\
    \    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should\
    \ return False.\n    check_dict_case({\"a\":\"apple\", \"8\":\"banana\", \"a\"\
    :\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"\
    Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"\
    STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\nfunction\
    \ check_dict_case(dict::Dict{String, String}>)::Bool \n    # check if the dictionary\
    \ is empty\n    if length(dict) == 0\n        return false\n    end\n    # check\
    \ if all keys are in lower case\n    if all(lowercase.(keys(dict)) .== keys(dict))\n\
    \        return true\n    # check if all keys are in upper case\n    elseif all(uppercase.(keys(dict))\
    \ .== keys(dict))\n        return true\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = check_dict_case;\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"b\" => \"banana\")) == true)\n\t@test(candidate(Dict(\"\
    p\" => \"pineapple\", \"A\" => \"banana\", \"B\" => \"banana\")) == false)\n\t\
    @test(candidate(Dict(\"p\" => \"pineapple\", \"5\" => \"banana\", \"a\" => \"\
    apple\")) == false)\n\t@test(candidate(Dict(\"Name\" => \"John\", \"Age\" => \"\
    36\", \"City\" => \"Houston\")) == false)\n\t@test(candidate(Dict(\"STATE\" =>\
    \ \"NC\", \"ZIP\" => \"12345\")) == true)\n\t@test(candidate(Dict(\"fruit\" =>\
    \ \"Orange\", \"taste\" => \"Sweet\")) == true)\n\t@test(candidate(Dict()) ==\
    \ false)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: unexpected \")\"\nStacktrace:\n [1] top-level\
    \ scope\n   @ /tmp/tmpovptjkuy.jl:12\nin expression starting at /tmp/tmpovptjkuy.jl:12\n"
  exit_code: 1
  status: SyntaxError
