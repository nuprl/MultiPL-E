name: HumanEval_114_minSubArraySum
language: julia
results:
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in 1:length(nums)\n        current_sum += nums[i]\n        if\
    \ current_sum < min_sum\n            min_sum = current_sum\n        end\n    \
    \    if current_sum > 0\n            current_sum = 0\n        end\n    end\n \
    \   return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    curr_sum\
    \ = 0\n    for num in nums\n        curr_sum += num\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    current_sum\
    \ = 0\n    for i in 1:length(nums)\n        current_sum += nums[i]\n        if\
    \ current_sum < min_sum\n            min_sum = current_sum\n        end\n    \
    \    if current_sum > 0\n            current_sum = 0\n        end\n    end\n \
    \   return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    curr_sum\
    \ = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n        if curr_sum\
    \ > 0\n            curr_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    current_sum\
    \ = 0\n    for i in 1:length(nums)\n        current_sum += nums[i]\n        if\
    \ current_sum < min_sum\n            min_sum = current_sum\n        end\n    \
    \    if current_sum > 0\n            current_sum = 0\n        end\n    end\n \
    \   return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo_bix9z9.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo_bix9z9.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_bix9z9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo_bix9z9.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo_bix9z9.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_bix9z9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo_bix9z9.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo_bix9z9.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_bix9z9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo_bix9z9.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo_bix9z9.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_bix9z9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo_bix9z9.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo_bix9z9.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_bix9z9.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_bix9z9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n        if current_sum > 0\n\
    \            current_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Int64(typemax(Int64))\n\
    \    curr_sum = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n\
    \        if curr_sum < min_sum\n            min_sum = curr_sum\n        end\n\
    \        if curr_sum > 0\n            curr_sum = 0\n        end\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp028infjd.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp028infjd.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp028infjd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp028infjd.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp028infjd.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp028infjd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp028infjd.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp028infjd.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp028infjd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp028infjd.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp028infjd.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp028infjd.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp028infjd.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp028infjd.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp028infjd.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp028infjd.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Int64(typemax(Int64))\n\
    \    curr_sum = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n\
    \        if curr_sum < min_sum\n            min_sum = curr_sum\n        end\n\
    \        if curr_sum > 0\n            curr_sum = 0\n        end\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = 0\n    curr_sum =\
    \ 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp09du2w1_.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp09du2w1_.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp09du2w1_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp09du2w1_.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 0 == -6\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp09du2w1_.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp09du2w1_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp09du2w1_.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp09du2w1_.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp09du2w1_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp09du2w1_.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 0 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp09du2w1_.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp09du2w1_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp09du2w1_.jl:34\n  Expression: candidate([7]) == 7\n   Evaluated:\
    \ 0 == 7\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp09du2w1_.jl:34 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp09du2w1_.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp09du2w1_.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp09du2w1_.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /bui"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp09du2w1_.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    curr_sum\
    \ = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n        if curr_sum\
    \ > 0\n            curr_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in 1:length(nums)\n        current_sum += nums[i]\n        if\
    \ current_sum < min_sum\n            min_sum = current_sum\n        end\n    \
    \    if current_sum > 0\n            current_sum = 0\n        end\n    end\n \
    \   return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in 1:length(nums)\n        current_sum += nums[i]\n        if\
    \ current_sum < min_sum\n            min_sum = current_sum\n        end\n    \
    \    if current_sum > 0\n            current_sum = 0\n        end\n    end\n \
    \   return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n        if curr_sum\
    \ > 0\n            curr_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf01fg70q.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf01fg70q.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf01fg70q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf01fg70q.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf01fg70q.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf01fg70q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf01fg70q.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf01fg70q.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf01fg70q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf01fg70q.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf01fg70q.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf01fg70q.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf01fg70q.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf01fg70q.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf01fg70q.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf01fg70q.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf3gkvb9s.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf3gkvb9s.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3gkvb9s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3gkvb9s.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf3gkvb9s.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3gkvb9s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3gkvb9s.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf3gkvb9s.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3gkvb9s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3gkvb9s.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf3gkvb9s.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3gkvb9s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3gkvb9s.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf3gkvb9s.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3gkvb9s.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf3gkvb9s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n        if curr_sum\
    \ > 0\n            curr_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    curr_sum\
    \ = 0\n    for num in nums\n        curr_sum += num\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    curr_sum\
    \ = 0\n    for num in nums\n        curr_sum += num\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i = 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx0q1731u.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx0q1731u.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0q1731u.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpx0q1731u.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx0q1731u.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0q1731u.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpx0q1731u.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0q1731u.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0q1731u.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpx0q1731u.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx0q1731u.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0q1731u.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpx0q1731u.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx0q1731u.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0q1731u.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx0q1731u.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = typemax(Int64)\n\
    \    current_sum = 0\n    for i in 1:length(nums)\n        current_sum += nums[i]\n\
    \        if current_sum < min_sum\n            min_sum = current_sum\n       \
    \ end\n        if current_sum > 0\n            current_sum = 0\n        end\n\
    \    end\n    return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = typemax(Int64)\n\
    \    sum = 0\n    for i in 1:length(nums)\n        sum += nums[i]\n        if\
    \ sum < min_sum\n            min_sum = sum\n        end\n        if sum > 0\n\
    \            sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n        if curr_sum\
    \ > 0\n            curr_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i = 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1hy0p987.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1hy0p987.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1hy0p987.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1hy0p987.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1hy0p987.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1hy0p987.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1hy0p987.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1hy0p987.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1hy0p987.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1hy0p987.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1hy0p987.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1hy0p987.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1hy0p987.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1hy0p987.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1hy0p987.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1hy0p987.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i = 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4gpri_7d.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4gpri_7d.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4gpri_7d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4gpri_7d.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4gpri_7d.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4gpri_7d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4gpri_7d.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4gpri_7d.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4gpri_7d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4gpri_7d.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4gpri_7d.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4gpri_7d.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4gpri_7d.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4gpri_7d.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4gpri_7d.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4gpri_7d.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1mfqp3g4.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1mfqp3g4.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1mfqp3g4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1mfqp3g4.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1mfqp3g4.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1mfqp3g4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1mfqp3g4.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1mfqp3g4.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1mfqp3g4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1mfqp3g4.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1mfqp3g4.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1mfqp3g4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1mfqp3g4.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1mfqp3g4.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1mfqp3g4.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1mfqp3g4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    curr_sum\
    \ = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n        if curr_sum\
    \ > 0\n            curr_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = 0\n    current_sum\
    \ = 0\n    for i in 1:length(nums)\n        current_sum += nums[i]\n        if\
    \ current_sum < min_sum\n            min_sum = current_sum\n        end\n    end\n\
    \    return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9t58v6_3.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9t58v6_3.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9t58v6_3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9t58v6_3.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 0 == -6\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmp9t58v6_3.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9t58v6_3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9t58v6_3.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9t58v6_3.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9t58v6_3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9t58v6_3.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 0 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9t58v6_3.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9t58v6_3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9t58v6_3.jl:34\n  Expression: candidate([7]) == 7\n   Evaluated:\
    \ 0 == 7\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9t58v6_3.jl:34 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9t58v6_3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp9t58v6_3.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9t58v6_3.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /bui"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9t58v6_3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = typemax(Int64)\n\
    \    current_sum = 0\n    for i in 1:length(nums)\n        current_sum += nums[i]\n\
    \        if current_sum < min_sum\n            min_sum = current_sum\n       \
    \ end\n        if current_sum > 0\n            current_sum = 0\n        end\n\
    \    end\n    return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ minSubArraySum;\n\t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1,\
    \ -2, -3]) == -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = 0\n    curr_sum =\
    \ 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwnhx0v74.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwnhx0v74.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnhx0v74.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwnhx0v74.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 0 == -6\nStacktrace:\n [1] macro expansion\n \
    \  @ /tmp/tmpwnhx0v74.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnhx0v74.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwnhx0v74.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 0 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwnhx0v74.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnhx0v74.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwnhx0v74.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 0 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwnhx0v74.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnhx0v74.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwnhx0v74.jl:34\n  Expression: candidate([7]) == 7\n   Evaluated:\
    \ 0 == 7\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwnhx0v74.jl:34 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnhx0v74.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwnhx0v74.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwnhx0v74.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /bui"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwnhx0v74.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    current_sum\
    \ = 0\n    for i in 1:length(nums)\n        current_sum += nums[i]\n        if\
    \ current_sum < min_sum\n            min_sum = current_sum\n        end\n    \
    \    if current_sum > 0\n            current_sum = 0\n        end\n    end\n \
    \   return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1_pv7rmf.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1_pv7rmf.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1_pv7rmf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1_pv7rmf.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1_pv7rmf.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1_pv7rmf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1_pv7rmf.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1_pv7rmf.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1_pv7rmf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1_pv7rmf.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1_pv7rmf.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1_pv7rmf.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1_pv7rmf.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1_pv7rmf.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1_pv7rmf.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1_pv7rmf.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    # Initialize the minimum sum\
    \ to the first element\n    min_sum = nums[1]\n    # Initialize the current sum\
    \ to the first element\n    curr_sum = nums[1]\n    # Loop through the array\n\
    \    for i in 2:length(nums)\n        # Update the current sum\n        curr_sum\
    \ = max(nums[i], curr_sum + nums[i])\n        # Update the minimum sum\n     \
    \   min_sum = min(min_sum, curr_sum)\n    end\n    # Return the minimum sum\n\
    \    return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7179tpce.jl:28\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7179tpce.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7179tpce.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7179tpce.jl:29\n  Expression: candidate([-1, -2, -3]) == -6\n\
    \   Evaluated: -3 == -6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7179tpce.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7179tpce.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7179tpce.jl:30\n  Expression: candidate([-1, -2, -3, 2, -10])\
    \ == -14\n   Evaluated: -8 == -14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7179tpce.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7179tpce.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7179tpce.jl:33\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -3 == -6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7179tpce.jl:33\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7179tpce.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7179tpce.jl:34\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7179tpce.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7179tpce.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7179tpce.jl:35\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7179tpce.jl:35\
    \ [inlined]\n [2] m"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7179tpce.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for num in nums\n        current_sum += num\n        if current_sum\
    \ < min_sum\n            min_sum = current_sum\n        end\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpezm2fgul.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpezm2fgul.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezm2fgul.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpezm2fgul.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpezm2fgul.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezm2fgul.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpezm2fgul.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpezm2fgul.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezm2fgul.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpezm2fgul.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpezm2fgul.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezm2fgul.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpezm2fgul.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpezm2fgul.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpezm2fgul.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpezm2fgul.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    curr_sum\
    \ = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n        if curr_sum\
    \ > 0\n            curr_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    if length(nums) == 0\n    \
    \    return 0\n    end\n    min_sum = nums[1]\n    curr_sum = nums[1]\n    for\
    \ i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum + nums[i])\n \
    \       min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in nums\n        curr_sum += i\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    curr_sum\
    \ = 0\n    for num in nums\n        curr_sum += num\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n        if curr_sum > 0\n      \
    \      curr_sum = 0\n        end\n    end\n    return min_sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2, 3, 4, 1,\
    \ 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Inf\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n        if current_sum > 0\n\
    \            current_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = Int64(typemax(Int64))\n\
    \    curr_sum = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n\
    \        if curr_sum < min_sum\n            min_sum = curr_sum\n        end\n\
    \        if curr_sum > 0\n            curr_sum = 0\n        end\n    end\n   \
    \ return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n        if curr_sum\
    \ > 0\n            curr_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in 1:length(nums)\n        current_sum += nums[i]\n        if\
    \ current_sum < min_sum\n            min_sum = current_sum\n        end\n    \
    \    if current_sum > 0\n            current_sum = 0\n        end\n    end\n \
    \   return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        current_sum = min(nums[i], current_sum\
    \ + nums[i])\n        min_sum = min(min_sum, current_sum)\n    end\n    return\
    \ min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t\
    @test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl25tn7kp.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl25tn7kp.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl25tn7kp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl25tn7kp.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl25tn7kp.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl25tn7kp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl25tn7kp.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl25tn7kp.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl25tn7kp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl25tn7kp.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl25tn7kp.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl25tn7kp.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpl25tn7kp.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl25tn7kp.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl25tn7kp.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl25tn7kp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = 0\n    for i in 1:length(nums)\n        curr_sum += nums[i]\n        if curr_sum\
    \ < min_sum\n            min_sum = curr_sum\n        end\n        if curr_sum\
    \ > 0\n            curr_sum = 0\n        end\n    end\n    return min_sum\nend\n\
    using Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmrd3_s85.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmrd3_s85.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmrd3_s85.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmrd3_s85.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmrd3_s85.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmrd3_s85.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmrd3_s85.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmrd3_s85.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmrd3_s85.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmrd3_s85.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmrd3_s85.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmrd3_s85.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmrd3_s85.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmrd3_s85.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmrd3_s85.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmrd3_s85.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    current_sum\
    \ = 0\n    for i in nums\n        current_sum += i\n        if current_sum < min_sum\n\
    \            min_sum = current_sum\n        end\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5bubkuif.jl:24\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5bubkuif.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5bubkuif.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5bubkuif.jl:30\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5bubkuif.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5bubkuif.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5bubkuif.jl:31\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5bubkuif.jl:31\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5bubkuif.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5bubkuif.jl:32\n  Expression: candidate([100, -33, 32, -1,\
    \ 0, -2]) == -33\n   Evaluated: 67 == -33\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5bubkuif.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5bubkuif.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5bubkuif.jl:35\n  Expression: candidate([1, -1]) == -1\n \
    \  Evaluated: 0 == -1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5bubkuif.jl:35\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5bubkuif.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5bubkuif.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    min_sum = nums[1]\n    curr_sum\
    \ = nums[1]\n    for i in 2:length(nums)\n        curr_sum = min(nums[i], curr_sum\
    \ + nums[i])\n        min_sum = min(min_sum, curr_sum)\n    end\n    return min_sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\t@test(candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) == -6)\n\t@test(candidate([-1,\
    \ -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999]) == -9999999999999999)\n\
    \t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1, -2, -3,\
    \ 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\t@test(candidate([10,\
    \ 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32, -1, 0, -2]) == -33)\n\
    \t@test(candidate([-10]) == -10)\n\t@test(candidate([7]) == 7)\n\t@test(candidate([1,\
    \ -1]) == -1)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Given an array of integers nums, find the minimum sum of any\
    \ non-empty sub-array\n    of nums.\n    Example\n    minSubArraySum([2, 3, 4,\
    \ 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\nfunction\
    \ minSubArraySum(nums::Vector{Int64})::Int64 \n    # Initialize minimum sum to\
    \ the first element\n    min_sum = nums[1]\n    # Initialize current sum to the\
    \ first element\n    curr_sum = nums[1]\n    # Loop through the array\n    for\
    \ i in 2:length(nums)\n        # If the current sum is less than 0, reset it to\
    \ the current element\n        if curr_sum < 0\n            curr_sum = nums[i]\n\
    \        # Otherwise, add the current element to the current sum\n        else\n\
    \            curr_sum += nums[i]\n        end\n        # If the current sum is\
    \ less than the minimum sum, update the minimum sum\n        if curr_sum < min_sum\n\
    \            min_sum = curr_sum\n        end\n    end\n    # Return the minimum\
    \ sum\n    return min_sum\nend\nusing Test\n\n@testset begin\n\ncandidate = minSubArraySum;\n\
    \t@test(candidate([2, 3, 4, 1, 2, 4]) == 1)\n\t@test(candidate([-1, -2, -3]) ==\
    \ -6)\n\t@test(candidate([-1, -2, -3, 2, -10]) == -14)\n\t@test(candidate([-9999999999999999])\
    \ == -9999999999999999)\n\t@test(candidate([0, 10, 20, 1000000]) == 0)\n\t@test(candidate([-1,\
    \ -2, -3, 10, -5]) == -6)\n\t@test(candidate([100, -1, -2, -3, 10, -5]) == -6)\n\
    \t@test(candidate([10, 11, 13, 8, 3, 4]) == 3)\n\t@test(candidate([100, -33, 32,\
    \ -1, 0, -2]) == -33)\n\t@test(candidate([-10]) == -10)\n\t@test(candidate([7])\
    \ == 7)\n\t@test(candidate([1, -1]) == -1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuvzeqrdv.jl:35\n  Expression: candidate([2,\
    \ 3, 4, 1, 2, 4]) == 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpuvzeqrdv.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuvzeqrdv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpuvzeqrdv.jl:36\n  Expression: candidate([-1, -2, -3]) == -6\n\
    \   Evaluated: -3 == -6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuvzeqrdv.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuvzeqrdv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpuvzeqrdv.jl:37\n  Expression: candidate([-1, -2, -3, 2, -10])\
    \ == -14\n   Evaluated: -8 == -14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuvzeqrdv.jl:37\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuvzeqrdv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpuvzeqrdv.jl:40\n  Expression: candidate([-1, -2, -3, 10, -5])\
    \ == -6\n   Evaluated: -3 == -6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuvzeqrdv.jl:40\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuvzeqrdv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpuvzeqrdv.jl:41\n  Expression: candidate([100, -1, -2, -3,\
    \ 10, -5]) == -6\n   Evaluated: 94 == -6\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpuvzeqrdv.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuvzeqrdv.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpuvzeqrdv.jl:42\n  Expression: candidate([10, 11, 13, 8, 3,\
    \ 4]) == 3\n   Evaluated: 10 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuvzeqrdv.jl:42\
    \ [inlined]\n [2] m"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuvzeqrdv.jl:32\n"
  exit_code: 1
  status: SyntaxError
