name: HumanEval_41_car_race_collision
language: julia
results:
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptas4vyo0.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptas4vyo0.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptas4vyo0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptas4vyo0.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptas4vyo0.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptas4vyo0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptas4vyo0.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptas4vyo0.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptas4vyo0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptas4vyo0.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptas4vyo0.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptas4vyo0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptas4vyo0.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptas4vyo0.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptas4vyo0.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptas4vyo0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplkk_jrsz.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplkk_jrsz.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkk_jrsz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplkk_jrsz.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplkk_jrsz.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkk_jrsz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplkk_jrsz.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplkk_jrsz.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkk_jrsz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplkk_jrsz.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplkk_jrsz.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkk_jrsz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplkk_jrsz.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplkk_jrsz.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkk_jrsz.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplkk_jrsz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptq50tn7_.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmptq50tn7_.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmptq50tn7_.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptq50tn7_.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmptq50tn7_.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmptq50tn7_.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmptq50tn7_.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptq50tn7_.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmptq50tn7_.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3j5uox7g.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp3j5uox7g.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3j5uox7g.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3j5uox7g.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp3j5uox7g.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp3j5uox7g.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp3j5uox7g.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3j5uox7g.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp3j5uox7g.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpko8dzg9e.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpko8dzg9e.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpko8dzg9e.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpko8dzg9e.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpko8dzg9e.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpko8dzg9e.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpko8dzg9e.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpko8dzg9e.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpko8dzg9e.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx_u5pah7.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_u5pah7.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_u5pah7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpx_u5pah7.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_u5pah7.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_u5pah7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpx_u5pah7.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_u5pah7.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_u5pah7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpx_u5pah7.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_u5pah7.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_u5pah7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpx_u5pah7.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx_u5pah7.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx_u5pah7.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx_u5pah7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO: implement this\
    \ function\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkfyiv5sa.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkfyiv5sa.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkfyiv5sa.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkfyiv5sa.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkfyiv5sa.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkfyiv5sa.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkfyiv5sa.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkfyiv5sa.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkfyiv5sa.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkfyiv5sa.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkfyiv5sa.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkfyiv5sa.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpkfyiv5sa.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkfyiv5sa.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkfyiv5sa.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkfyiv5sa.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqudh32bq.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqudh32bq.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqudh32bq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqudh32bq.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqudh32bq.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqudh32bq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqudh32bq.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqudh32bq.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqudh32bq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqudh32bq.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqudh32bq.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqudh32bq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqudh32bq.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqudh32bq.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqudh32bq.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqudh32bq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp92e2l6kr.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp92e2l6kr.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp92e2l6kr.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp92e2l6kr.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp92e2l6kr.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp92e2l6kr.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp92e2l6kr.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp92e2l6kr.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp92e2l6kr.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcf7d29hx.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpcf7d29hx.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcf7d29hx.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcf7d29hx.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpcf7d29hx.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpcf7d29hx.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpcf7d29hx.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcf7d29hx.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpcf7d29hx.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9hqz6itz.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9hqz6itz.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9hqz6itz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9hqz6itz.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9hqz6itz.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9hqz6itz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9hqz6itz.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9hqz6itz.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9hqz6itz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9hqz6itz.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9hqz6itz.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9hqz6itz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp9hqz6itz.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9hqz6itz.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9hqz6itz.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9hqz6itz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy8_53tba.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8_53tba.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8_53tba.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy8_53tba.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8_53tba.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8_53tba.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy8_53tba.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8_53tba.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8_53tba.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy8_53tba.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8_53tba.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8_53tba.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy8_53tba.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy8_53tba.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy8_53tba.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy8_53tba.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_psijnsi.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp_psijnsi.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_psijnsi.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_psijnsi.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp_psijnsi.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp_psijnsi.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp_psijnsi.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_psijnsi.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp_psijnsi.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n * (n - 1) /\
    \ 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_vcnq7i3.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_vcnq7i3.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_vcnq7i3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_vcnq7i3.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_vcnq7i3.jl:21 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_vcnq7i3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_vcnq7i3.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_vcnq7i3.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_vcnq7i3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_vcnq7i3.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_vcnq7i3.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_vcnq7i3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_vcnq7i3.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_vcnq7i3.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_vcnq7i3.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_vcnq7i3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    return n*(n-1)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwthfjqc6.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwthfjqc6.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwthfjqc6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwthfjqc6.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwthfjqc6.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwthfjqc6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwthfjqc6.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwthfjqc6.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwthfjqc6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwthfjqc6.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwthfjqc6.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwthfjqc6.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwthfjqc6.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwthfjqc6.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwthfjqc6.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwthfjqc6.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplyjeafun.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplyjeafun.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyjeafun.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplyjeafun.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplyjeafun.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyjeafun.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplyjeafun.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplyjeafun.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyjeafun.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplyjeafun.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplyjeafun.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyjeafun.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplyjeafun.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplyjeafun.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyjeafun.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyjeafun.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp982tscfx.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp982tscfx.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp982tscfx.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp982tscfx.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp982tscfx.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp982tscfx.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp982tscfx.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp982tscfx.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp982tscfx.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnzy7w3ki.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpnzy7w3ki.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpnzy7w3ki.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnzy7w3ki.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpnzy7w3ki.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpnzy7w3ki.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpnzy7w3ki.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnzy7w3ki.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpnzy7w3ki.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpamb8ug33.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpamb8ug33.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpamb8ug33.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpamb8ug33.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpamb8ug33.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpamb8ug33.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpamb8ug33.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpamb8ug33.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpamb8ug33.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpamb8ug33.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpamb8ug33.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpamb8ug33.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpamb8ug33.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpamb8ug33.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpamb8ug33.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpamb8ug33.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6hlnptwy.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6hlnptwy.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6hlnptwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6hlnptwy.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6hlnptwy.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6hlnptwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6hlnptwy.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6hlnptwy.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6hlnptwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6hlnptwy.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6hlnptwy.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6hlnptwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp6hlnptwy.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6hlnptwy.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6hlnptwy.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6hlnptwy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgtyevx61.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpgtyevx61.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgtyevx61.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgtyevx61.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpgtyevx61.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpgtyevx61.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpgtyevx61.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgtyevx61.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpgtyevx61.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpip5mmey7.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpip5mmey7.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpip5mmey7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpip5mmey7.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpip5mmey7.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpip5mmey7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpip5mmey7.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpip5mmey7.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpip5mmey7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpip5mmey7.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpip5mmey7.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpip5mmey7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpip5mmey7.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpip5mmey7.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpip5mmey7.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpip5mmey7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp213pn2e.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpp213pn2e.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpp213pn2e.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp213pn2e.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpp213pn2e.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpp213pn2e.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpp213pn2e.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp213pn2e.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpp213pn2e.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqtayu5nz.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqtayu5nz.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqtayu5nz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqtayu5nz.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqtayu5nz.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqtayu5nz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqtayu5nz.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqtayu5nz.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqtayu5nz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqtayu5nz.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqtayu5nz.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqtayu5nz.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpqtayu5nz.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqtayu5nz.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqtayu5nz.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqtayu5nz.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmple6cdt88.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmple6cdt88.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmple6cdt88.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmple6cdt88.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmple6cdt88.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmple6cdt88.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmple6cdt88.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmple6cdt88.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmple6cdt88.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptv9s992n.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmptv9s992n.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmptv9s992n.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptv9s992n.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmptv9s992n.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmptv9s992n.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmptv9s992n.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptv9s992n.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmptv9s992n.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbtetpytm.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpbtetpytm.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpbtetpytm.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbtetpytm.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpbtetpytm.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpbtetpytm.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpbtetpytm.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbtetpytm.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpbtetpytm.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplw1ie88b.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplw1ie88b.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplw1ie88b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplw1ie88b.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplw1ie88b.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplw1ie88b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplw1ie88b.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplw1ie88b.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplw1ie88b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplw1ie88b.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplw1ie88b.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplw1ie88b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplw1ie88b.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplw1ie88b.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplw1ie88b.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplw1ie88b.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptdrdezqm.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptdrdezqm.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptdrdezqm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptdrdezqm.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptdrdezqm.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptdrdezqm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptdrdezqm.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptdrdezqm.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptdrdezqm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptdrdezqm.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptdrdezqm.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptdrdezqm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmptdrdezqm.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptdrdezqm.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptdrdezqm.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptdrdezqm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # n is the number of\
    \ cars in each direction\n    # the function returns the number of collisions\n\
    \    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp815348w9.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp815348w9.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp815348w9.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp815348w9.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp815348w9.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp815348w9.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp815348w9.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp815348w9.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp815348w9.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp815348w9.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp815348w9.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp815348w9.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp815348w9.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp815348w9.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp815348w9.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp815348w9.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8k5fbh4a.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp8k5fbh4a.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8k5fbh4a.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8k5fbh4a.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp8k5fbh4a.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp8k5fbh4a.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp8k5fbh4a.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8k5fbh4a.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp8k5fbh4a.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5aeyhxjp.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5aeyhxjp.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5aeyhxjp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5aeyhxjp.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5aeyhxjp.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5aeyhxjp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5aeyhxjp.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5aeyhxjp.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5aeyhxjp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5aeyhxjp.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5aeyhxjp.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5aeyhxjp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp5aeyhxjp.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5aeyhxjp.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5aeyhxjp.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5aeyhxjp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3imvde6m.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp3imvde6m.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3imvde6m.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3imvde6m.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp3imvde6m.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp3imvde6m.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp3imvde6m.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3imvde6m.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp3imvde6m.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    return n*(n-1)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoe8tpzf1.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoe8tpzf1.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoe8tpzf1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpoe8tpzf1.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoe8tpzf1.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoe8tpzf1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpoe8tpzf1.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoe8tpzf1.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoe8tpzf1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpoe8tpzf1.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoe8tpzf1.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoe8tpzf1.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpoe8tpzf1.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoe8tpzf1.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoe8tpzf1.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoe8tpzf1.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4ldlakdg.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp4ldlakdg.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp4ldlakdg.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4ldlakdg.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp4ldlakdg.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp4ldlakdg.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp4ldlakdg.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4ldlakdg.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp4ldlakdg.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbcmrh1cc.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbcmrh1cc.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbcmrh1cc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbcmrh1cc.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbcmrh1cc.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbcmrh1cc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbcmrh1cc.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbcmrh1cc.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbcmrh1cc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbcmrh1cc.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbcmrh1cc.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbcmrh1cc.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpbcmrh1cc.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbcmrh1cc.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbcmrh1cc.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbcmrh1cc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy4_vimka.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy4_vimka.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy4_vimka.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy4_vimka.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy4_vimka.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy4_vimka.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy4_vimka.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy4_vimka.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy4_vimka.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy4_vimka.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy4_vimka.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy4_vimka.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy4_vimka.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy4_vimka.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy4_vimka.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy4_vimka.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_er5yvg9.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_er5yvg9.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_er5yvg9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_er5yvg9.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_er5yvg9.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_er5yvg9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_er5yvg9.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_er5yvg9.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_er5yvg9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_er5yvg9.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_er5yvg9.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_er5yvg9.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_er5yvg9.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_er5yvg9.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_er5yvg9.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_er5yvg9.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi7ekxxgo.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpi7ekxxgo.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpi7ekxxgo.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi7ekxxgo.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpi7ekxxgo.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpi7ekxxgo.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpi7ekxxgo.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi7ekxxgo.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpi7ekxxgo.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpz3yv8ak3.jl:1\nin expression starting at /tmp/tmpz3yv8ak3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars driving left to right and the number of cars driving\n    right\
    \ to left.\n    \"\"\"\n    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpysz6egvs.jl:25\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpysz6egvs.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpysz6egvs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpysz6egvs.jl:26\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpysz6egvs.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpysz6egvs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpysz6egvs.jl:27\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpysz6egvs.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpysz6egvs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpysz6egvs.jl:28\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpysz6egvs.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpysz6egvs.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpysz6egvs.jl:29\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpysz6egvs.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpysz6egvs.jl:24\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpysz6egvs.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    return n*(n-1)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp__jq_k38.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp__jq_k38.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp__jq_k38.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp__jq_k38.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp__jq_k38.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp__jq_k38.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp__jq_k38.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp__jq_k38.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp__jq_k38.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp__jq_k38.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp__jq_k38.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp__jq_k38.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp__jq_k38.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp__jq_k38.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp__jq_k38.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp__jq_k38.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpd89reg8j.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpd89reg8j.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpd89reg8j.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpd89reg8j.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpd89reg8j.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpd89reg8j.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpd89reg8j.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpd89reg8j.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpd89reg8j.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvwgi8b3l.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvwgi8b3l.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvwgi8b3l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvwgi8b3l.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvwgi8b3l.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvwgi8b3l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvwgi8b3l.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvwgi8b3l.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvwgi8b3l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvwgi8b3l.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvwgi8b3l.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvwgi8b3l.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvwgi8b3l.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvwgi8b3l.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvwgi8b3l.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvwgi8b3l.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_0onqbf4.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_0onqbf4.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0onqbf4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_0onqbf4.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_0onqbf4.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0onqbf4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_0onqbf4.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_0onqbf4.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0onqbf4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_0onqbf4.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_0onqbf4.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0onqbf4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_0onqbf4.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_0onqbf4.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0onqbf4.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_0onqbf4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp53bilcbq.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp53bilcbq.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp53bilcbq.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp53bilcbq.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp53bilcbq.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp53bilcbq.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp53bilcbq.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp53bilcbq.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp53bilcbq.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg7nxyv69.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpg7nxyv69.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpg7nxyv69.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg7nxyv69.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpg7nxyv69.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpg7nxyv69.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpg7nxyv69.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg7nxyv69.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpg7nxyv69.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpifdrsbqw.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpifdrsbqw.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpifdrsbqw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpifdrsbqw.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpifdrsbqw.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpifdrsbqw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpifdrsbqw.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpifdrsbqw.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpifdrsbqw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpifdrsbqw.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpifdrsbqw.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpifdrsbqw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpifdrsbqw.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpifdrsbqw.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpifdrsbqw.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpifdrsbqw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    The number\
    \ of collisions is the number of pairs of cars that are\n    moving in opposite\
    \ directions.  The number of such pairs is n choose 2.\n    \"\"\"\n    return\
    \ n * (n - 1) / 2\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2iui58pl.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2iui58pl.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2iui58pl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2iui58pl.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2iui58pl.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2iui58pl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2iui58pl.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2iui58pl.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2iui58pl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2iui58pl.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2iui58pl.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2iui58pl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2iui58pl.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2iui58pl.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2iui58pl.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2iui58pl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4oaufaon.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4oaufaon.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oaufaon.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4oaufaon.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4oaufaon.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oaufaon.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4oaufaon.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4oaufaon.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oaufaon.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4oaufaon.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4oaufaon.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oaufaon.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4oaufaon.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4oaufaon.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4oaufaon.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4oaufaon.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmrh4ujly.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpmrh4ujly.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpmrh4ujly.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmrh4ujly.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpmrh4ujly.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpmrh4ujly.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpmrh4ujly.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmrh4ujly.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpmrh4ujly.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo_w4gowu.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpo_w4gowu.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpo_w4gowu.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo_w4gowu.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpo_w4gowu.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpo_w4gowu.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpo_w4gowu.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo_w4gowu.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpo_w4gowu.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_slnze34.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp_slnze34.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_slnze34.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_slnze34.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp_slnze34.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp_slnze34.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp_slnze34.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_slnze34.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp_slnze34.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7etuii1z.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7etuii1z.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7etuii1z.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7etuii1z.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7etuii1z.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7etuii1z.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7etuii1z.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7etuii1z.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7etuii1z.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7etuii1z.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7etuii1z.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7etuii1z.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp7etuii1z.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7etuii1z.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7etuii1z.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7etuii1z.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    return n*(n-1)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphd0vrrbj.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphd0vrrbj.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphd0vrrbj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphd0vrrbj.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphd0vrrbj.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphd0vrrbj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphd0vrrbj.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphd0vrrbj.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphd0vrrbj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphd0vrrbj.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphd0vrrbj.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphd0vrrbj.jl:22\ntest set: Test\
    \ Failed at /tmp/tmphd0vrrbj.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphd0vrrbj.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphd0vrrbj.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphd0vrrbj.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsfg1rczq.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsfg1rczq.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsfg1rczq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsfg1rczq.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsfg1rczq.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsfg1rczq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsfg1rczq.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsfg1rczq.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsfg1rczq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsfg1rczq.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsfg1rczq.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsfg1rczq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsfg1rczq.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsfg1rczq.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsfg1rczq.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsfg1rczq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO: implement this\
    \ function\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo06o0y51.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo06o0y51.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo06o0y51.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpo06o0y51.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo06o0y51.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo06o0y51.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpo06o0y51.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo06o0y51.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo06o0y51.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpo06o0y51.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo06o0y51.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo06o0y51.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpo06o0y51.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo06o0y51.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo06o0y51.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo06o0y51.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # n is the number of\
    \ cars moving left to right\n    # and the number of cars moving right to left\n\
    \    #\n    # YOUR CODE HERE\n    return 0\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj1bhdxne.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj1bhdxne.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj1bhdxne.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj1bhdxne.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj1bhdxne.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj1bhdxne.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj1bhdxne.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj1bhdxne.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj1bhdxne.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj1bhdxne.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj1bhdxne.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj1bhdxne.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpj1bhdxne.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj1bhdxne.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj1bhdxne.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj1bhdxne.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw1m1qfsw.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1m1qfsw.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1m1qfsw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw1m1qfsw.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1m1qfsw.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1m1qfsw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw1m1qfsw.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1m1qfsw.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1m1qfsw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw1m1qfsw.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1m1qfsw.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1m1qfsw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw1m1qfsw.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw1m1qfsw.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw1m1qfsw.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw1m1qfsw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjpbc4p5k.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjpbc4p5k.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjpbc4p5k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjpbc4p5k.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjpbc4p5k.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjpbc4p5k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjpbc4p5k.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjpbc4p5k.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjpbc4p5k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjpbc4p5k.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjpbc4p5k.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjpbc4p5k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjpbc4p5k.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjpbc4p5k.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjpbc4p5k.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjpbc4p5k.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1vlin2b7.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp1vlin2b7.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp1vlin2b7.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1vlin2b7.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp1vlin2b7.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp1vlin2b7.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp1vlin2b7.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1vlin2b7.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp1vlin2b7.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpej0uutz4.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpej0uutz4.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpej0uutz4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpej0uutz4.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpej0uutz4.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpej0uutz4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpej0uutz4.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpej0uutz4.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpej0uutz4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpej0uutz4.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpej0uutz4.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpej0uutz4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpej0uutz4.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpej0uutz4.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpej0uutz4.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpej0uutz4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjc8tqarq.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjc8tqarq.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc8tqarq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjc8tqarq.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjc8tqarq.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc8tqarq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjc8tqarq.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjc8tqarq.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc8tqarq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjc8tqarq.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjc8tqarq.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc8tqarq.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjc8tqarq.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjc8tqarq.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc8tqarq.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjc8tqarq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf3ucnxt5.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpf3ucnxt5.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpf3ucnxt5.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf3ucnxt5.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpf3ucnxt5.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpf3ucnxt5.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpf3ucnxt5.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf3ucnxt5.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpf3ucnxt5.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprnq0dd9t.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmprnq0dd9t.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmprnq0dd9t.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprnq0dd9t.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmprnq0dd9t.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmprnq0dd9t.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmprnq0dd9t.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprnq0dd9t.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmprnq0dd9t.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpftbww35o.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpftbww35o.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpftbww35o.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpftbww35o.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpftbww35o.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpftbww35o.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpftbww35o.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpftbww35o.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpftbww35o.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsaufu3_3.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsaufu3_3.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsaufu3_3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsaufu3_3.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsaufu3_3.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsaufu3_3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsaufu3_3.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsaufu3_3.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsaufu3_3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsaufu3_3.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsaufu3_3.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsaufu3_3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsaufu3_3.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsaufu3_3.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsaufu3_3.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsaufu3_3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsn1s5prw.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsn1s5prw.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsn1s5prw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsn1s5prw.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsn1s5prw.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsn1s5prw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsn1s5prw.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsn1s5prw.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsn1s5prw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsn1s5prw.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsn1s5prw.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsn1s5prw.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpsn1s5prw.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsn1s5prw.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsn1s5prw.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsn1s5prw.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi1pg30ki.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpi1pg30ki.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpi1pg30ki.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi1pg30ki.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpi1pg30ki.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpi1pg30ki.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpi1pg30ki.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi1pg30ki.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpi1pg30ki.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7y6lhz6l.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp7y6lhz6l.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7y6lhz6l.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7y6lhz6l.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp7y6lhz6l.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp7y6lhz6l.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp7y6lhz6l.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7y6lhz6l.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp7y6lhz6l.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfe7kdd0r.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfe7kdd0r.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfe7kdd0r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfe7kdd0r.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfe7kdd0r.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfe7kdd0r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfe7kdd0r.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfe7kdd0r.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfe7kdd0r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfe7kdd0r.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfe7kdd0r.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfe7kdd0r.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpfe7kdd0r.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfe7kdd0r.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfe7kdd0r.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfe7kdd0r.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0vrawgd6.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp0vrawgd6.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp0vrawgd6.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0vrawgd6.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp0vrawgd6.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp0vrawgd6.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp0vrawgd6.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0vrawgd6.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp0vrawgd6.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpno89ilx8.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpno89ilx8.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno89ilx8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpno89ilx8.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpno89ilx8.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno89ilx8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpno89ilx8.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpno89ilx8.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno89ilx8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpno89ilx8.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpno89ilx8.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno89ilx8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpno89ilx8.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpno89ilx8.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno89ilx8.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpno89ilx8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n: number\
    \ of cars driving left to right\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ipn9_lx.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4ipn9_lx.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ipn9_lx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4ipn9_lx.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4ipn9_lx.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ipn9_lx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4ipn9_lx.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4ipn9_lx.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ipn9_lx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4ipn9_lx.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4ipn9_lx.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ipn9_lx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp4ipn9_lx.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4ipn9_lx.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ipn9_lx.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ipn9_lx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfxzwytze.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpfxzwytze.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfxzwytze.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfxzwytze.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpfxzwytze.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpfxzwytze.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpfxzwytze.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfxzwytze.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpfxzwytze.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_9osnchb.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp_9osnchb.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp_9osnchb.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_9osnchb.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp_9osnchb.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp_9osnchb.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp_9osnchb.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_9osnchb.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp_9osnchb.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcfv6hmo5.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcfv6hmo5.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcfv6hmo5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcfv6hmo5.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcfv6hmo5.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcfv6hmo5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcfv6hmo5.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcfv6hmo5.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcfv6hmo5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcfv6hmo5.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcfv6hmo5.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcfv6hmo5.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpcfv6hmo5.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcfv6hmo5.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcfv6hmo5.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcfv6hmo5.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp806vpyvn.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp806vpyvn.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp806vpyvn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp806vpyvn.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp806vpyvn.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp806vpyvn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp806vpyvn.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp806vpyvn.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp806vpyvn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp806vpyvn.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp806vpyvn.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp806vpyvn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp806vpyvn.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp806vpyvn.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp806vpyvn.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp806vpyvn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3ng5_0p9.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp3ng5_0p9.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3ng5_0p9.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3ng5_0p9.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp3ng5_0p9.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp3ng5_0p9.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp3ng5_0p9.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3ng5_0p9.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp3ng5_0p9.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ka11e31.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3ka11e31.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3ka11e31.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3ka11e31.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3ka11e31.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3ka11e31.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3ka11e31.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3ka11e31.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3ka11e31.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3ka11e31.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3ka11e31.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3ka11e31.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp3ka11e31.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3ka11e31.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3ka11e31.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ka11e31.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmponxaiaoi.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmponxaiaoi.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmponxaiaoi.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmponxaiaoi.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmponxaiaoi.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmponxaiaoi.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmponxaiaoi.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmponxaiaoi.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmponxaiaoi.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5i70au9o.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp5i70au9o.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5i70au9o.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5i70au9o.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp5i70au9o.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp5i70au9o.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp5i70au9o.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5i70au9o.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp5i70au9o.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo2kn6t9d.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpo2kn6t9d.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpo2kn6t9d.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo2kn6t9d.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpo2kn6t9d.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpo2kn6t9d.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpo2kn6t9d.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo2kn6t9d.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpo2kn6t9d.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    return n*(n-1)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmc6ulltx.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmc6ulltx.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmc6ulltx.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpmc6ulltx.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmc6ulltx.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmc6ulltx.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpmc6ulltx.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmc6ulltx.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmc6ulltx.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpmc6ulltx.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmc6ulltx.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmc6ulltx.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpmc6ulltx.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmc6ulltx.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmc6ulltx.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmc6ulltx.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfg1sb8ih.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpfg1sb8ih.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfg1sb8ih.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfg1sb8ih.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpfg1sb8ih.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpfg1sb8ih.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpfg1sb8ih.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfg1sb8ih.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpfg1sb8ih.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO: implement this\
    \ function\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe5g1scs4.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe5g1scs4.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe5g1scs4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe5g1scs4.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe5g1scs4.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe5g1scs4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe5g1scs4.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe5g1scs4.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe5g1scs4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe5g1scs4.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe5g1scs4.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe5g1scs4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpe5g1scs4.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe5g1scs4.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe5g1scs4.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe5g1scs4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd4gfsgwy.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd4gfsgwy.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd4gfsgwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpd4gfsgwy.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd4gfsgwy.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd4gfsgwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpd4gfsgwy.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd4gfsgwy.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd4gfsgwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpd4gfsgwy.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd4gfsgwy.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd4gfsgwy.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpd4gfsgwy.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd4gfsgwy.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd4gfsgwy.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd4gfsgwy.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy9sfetef.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy9sfetef.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9sfetef.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy9sfetef.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy9sfetef.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9sfetef.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy9sfetef.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy9sfetef.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9sfetef.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy9sfetef.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy9sfetef.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9sfetef.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy9sfetef.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy9sfetef.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9sfetef.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy9sfetef.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n = number\
    \ of cars in each direction\n    \"\"\"\n    # YOUR CODE HERE\n    return 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphzu3403s.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphzu3403s.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzu3403s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphzu3403s.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphzu3403s.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzu3403s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphzu3403s.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphzu3403s.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzu3403s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphzu3403s.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphzu3403s.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzu3403s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphzu3403s.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphzu3403s.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphzu3403s.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphzu3403s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpykrise_1.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpykrise_1.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpykrise_1.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpykrise_1.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpykrise_1.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpykrise_1.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpykrise_1.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpykrise_1.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpykrise_1.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpijdnojxk.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpijdnojxk.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpijdnojxk.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpijdnojxk.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpijdnojxk.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpijdnojxk.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpijdnojxk.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpijdnojxk.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpijdnojxk.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq37bh7ff.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpq37bh7ff.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpq37bh7ff.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq37bh7ff.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpq37bh7ff.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpq37bh7ff.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpq37bh7ff.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq37bh7ff.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpq37bh7ff.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpixztim6v.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpixztim6v.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpixztim6v.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpixztim6v.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpixztim6v.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpixztim6v.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpixztim6v.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpixztim6v.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpixztim6v.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw_5tydzi.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw_5tydzi.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw_5tydzi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw_5tydzi.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw_5tydzi.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw_5tydzi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw_5tydzi.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw_5tydzi.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw_5tydzi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw_5tydzi.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw_5tydzi.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw_5tydzi.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw_5tydzi.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw_5tydzi.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw_5tydzi.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw_5tydzi.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc3r9s7ik.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpc3r9s7ik.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpc3r9s7ik.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc3r9s7ik.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpc3r9s7ik.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpc3r9s7ik.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpc3r9s7ik.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc3r9s7ik.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpc3r9s7ik.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This function\
    \ outputs the number of collisions for a car race with n cars.\n    \"\"\"\n \
    \   # We will use the following algorithm:\n    # 1.  We will sort the cars by\
    \ their starting positions.\n    # 2.  We will then iterate through the cars from\
    \ left to right.\n    # 3.  For each car, we will check if there are any cars\
    \ to the left of it that are\n    #     moving to the right.  If so, we will add\
    \ the number of such cars to the total\n    #     number of collisions.\n    #\
    \ 4.  We will then return the total number of collisions.\n    \n    # We will\
    \ use the following array to store the cars:\n    # car_array[i] = (start_position,\
    \ direction)\n    # where start_position is the starting position of the ith car,\
    \ and direction is\n    # either 1 (right to left) or -1 (left to right).\n  \
    \  car_array = zeros(Int64, 2, n)\n    \n    # We will now populate the car_array.\n\
    \    for i in 1:n\n        # We will now generate the starting position and direction\
    \ of the ith car.\n        start_position = rand(1:10^9)\n        direction =\
    \ rand([-1, 1])\n        \n        # We will now store the starting position and\
    \ direction of the ith car.\n        car_array[1, i] = start_position\n      \
    \  car_array[2, i] = direction\n    end\n    \n    # We will now sort the car_array\
    \ by the starting positions of the cars.\n    sort!(car_array, by = x -> x[1])\n\
    \    \n    # We will now iterate through the cars from left to right.\n    total_collisions\
    \ = 0\n    for i in 1:n\n        # We will now check if there are any cars to\
    \ the left of the ith car that are\n        # moving to the right.  If so, we\
    \ will add the number of such cars to the total\n        # number of collisions.\n\
    \        for j in 1:i\n            if car_array[2, j] == 1\n                total_collisions\
    \ += 1\n            end\n        end\n    end\n    \n    # We will now\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjgyr2gxx.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpjgyr2gxx.jl:1\n\
    in expression starting at /tmp/tmpjgyr2gxx.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa0xpbf8b.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa0xpbf8b.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa0xpbf8b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpa0xpbf8b.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa0xpbf8b.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa0xpbf8b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpa0xpbf8b.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa0xpbf8b.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa0xpbf8b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpa0xpbf8b.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa0xpbf8b.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa0xpbf8b.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpa0xpbf8b.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa0xpbf8b.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa0xpbf8b.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa0xpbf8b.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgape2yz7.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgape2yz7.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgape2yz7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgape2yz7.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgape2yz7.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgape2yz7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgape2yz7.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgape2yz7.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgape2yz7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgape2yz7.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgape2yz7.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgape2yz7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpgape2yz7.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgape2yz7.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgape2yz7.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgape2yz7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp71_sdjqo.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp71_sdjqo.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp71_sdjqo.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp71_sdjqo.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp71_sdjqo.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp71_sdjqo.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp71_sdjqo.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp71_sdjqo.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp71_sdjqo.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This function\
    \ outputs the number of collisions.\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkfeu7au2.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkfeu7au2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkfeu7au2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkfeu7au2.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkfeu7au2.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkfeu7au2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkfeu7au2.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkfeu7au2.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkfeu7au2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkfeu7au2.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkfeu7au2.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkfeu7au2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkfeu7au2.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkfeu7au2.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkfeu7au2.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkfeu7au2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphzekf8dp.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmphzekf8dp.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmphzekf8dp.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphzekf8dp.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmphzekf8dp.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmphzekf8dp.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmphzekf8dp.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphzekf8dp.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmphzekf8dp.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw_2w5rrl.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpw_2w5rrl.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpw_2w5rrl.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw_2w5rrl.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpw_2w5rrl.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpw_2w5rrl.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpw_2w5rrl.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw_2w5rrl.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpw_2w5rrl.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpirj4_lgh.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpirj4_lgh.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpirj4_lgh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpirj4_lgh.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpirj4_lgh.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpirj4_lgh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpirj4_lgh.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpirj4_lgh.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpirj4_lgh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpirj4_lgh.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpirj4_lgh.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpirj4_lgh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpirj4_lgh.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpirj4_lgh.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpirj4_lgh.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpirj4_lgh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4v05mh4o.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4v05mh4o.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4v05mh4o.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4v05mh4o.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4v05mh4o.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4v05mh4o.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4v05mh4o.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4v05mh4o.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4v05mh4o.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4v05mh4o.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4v05mh4o.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4v05mh4o.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4v05mh4o.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4v05mh4o.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4v05mh4o.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4v05mh4o.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpthmzdjr5.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthmzdjr5.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthmzdjr5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpthmzdjr5.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthmzdjr5.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthmzdjr5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpthmzdjr5.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthmzdjr5.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthmzdjr5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpthmzdjr5.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthmzdjr5.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthmzdjr5.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpthmzdjr5.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpthmzdjr5.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpthmzdjr5.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpthmzdjr5.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5txw_3xf.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp5txw_3xf.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5txw_3xf.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5txw_3xf.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp5txw_3xf.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp5txw_3xf.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp5txw_3xf.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5txw_3xf.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp5txw_3xf.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp07e8vs5c.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp07e8vs5c.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp07e8vs5c.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp07e8vs5c.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp07e8vs5c.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp07e8vs5c.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp07e8vs5c.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp07e8vs5c.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp07e8vs5c.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_gd3je36.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gd3je36.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gd3je36.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_gd3je36.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gd3je36.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gd3je36.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_gd3je36.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gd3je36.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gd3je36.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_gd3je36.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gd3je36.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gd3je36.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_gd3je36.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gd3je36.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gd3je36.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_gd3je36.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0wt3thb7.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0wt3thb7.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0wt3thb7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0wt3thb7.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0wt3thb7.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0wt3thb7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0wt3thb7.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0wt3thb7.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0wt3thb7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0wt3thb7.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0wt3thb7.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0wt3thb7.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0wt3thb7.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0wt3thb7.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0wt3thb7.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0wt3thb7.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptl6vrlf6.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmptl6vrlf6.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmptl6vrlf6.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptl6vrlf6.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmptl6vrlf6.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmptl6vrlf6.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmptl6vrlf6.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptl6vrlf6.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmptl6vrlf6.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmt5rrzca.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmt5rrzca.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmt5rrzca.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmt5rrzca.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmt5rrzca.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmt5rrzca.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmt5rrzca.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmt5rrzca.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmt5rrzca.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmt5rrzca.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmt5rrzca.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmt5rrzca.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpmt5rrzca.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmt5rrzca.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmt5rrzca.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmt5rrzca.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp87sqppm2.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp87sqppm2.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp87sqppm2.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp87sqppm2.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp87sqppm2.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp87sqppm2.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp87sqppm2.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp87sqppm2.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp87sqppm2.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiau4dx8v.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiau4dx8v.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiau4dx8v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiau4dx8v.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiau4dx8v.jl:21 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiau4dx8v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiau4dx8v.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiau4dx8v.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiau4dx8v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiau4dx8v.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiau4dx8v.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiau4dx8v.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpiau4dx8v.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiau4dx8v.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiau4dx8v.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiau4dx8v.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptc6ua6oe.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc6ua6oe.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc6ua6oe.jl:19\ntest set: Test\
    \ Failed at /tmp/tmptc6ua6oe.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc6ua6oe.jl:21 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc6ua6oe.jl:19\ntest set: Test\
    \ Failed at /tmp/tmptc6ua6oe.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc6ua6oe.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc6ua6oe.jl:19\ntest set: Test\
    \ Failed at /tmp/tmptc6ua6oe.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc6ua6oe.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc6ua6oe.jl:19\ntest set: Test\
    \ Failed at /tmp/tmptc6ua6oe.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptc6ua6oe.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptc6ua6oe.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptc6ua6oe.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5z66bq4i.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp5z66bq4i.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5z66bq4i.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5z66bq4i.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp5z66bq4i.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp5z66bq4i.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp5z66bq4i.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5z66bq4i.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp5z66bq4i.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp44cfzdyr.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp44cfzdyr.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp44cfzdyr.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp44cfzdyr.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp44cfzdyr.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp44cfzdyr.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp44cfzdyr.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp44cfzdyr.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp44cfzdyr.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0sqounkh.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0sqounkh.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0sqounkh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0sqounkh.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0sqounkh.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0sqounkh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0sqounkh.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0sqounkh.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0sqounkh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0sqounkh.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0sqounkh.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0sqounkh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0sqounkh.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0sqounkh.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0sqounkh.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0sqounkh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8klkyr_1.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp8klkyr_1.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8klkyr_1.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8klkyr_1.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp8klkyr_1.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp8klkyr_1.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp8klkyr_1.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8klkyr_1.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp8klkyr_1.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfcsyibz6.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpfcsyibz6.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfcsyibz6.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfcsyibz6.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpfcsyibz6.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpfcsyibz6.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpfcsyibz6.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfcsyibz6.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpfcsyibz6.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0hhe_jga.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hhe_jga.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hhe_jga.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0hhe_jga.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hhe_jga.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hhe_jga.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0hhe_jga.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hhe_jga.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hhe_jga.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0hhe_jga.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hhe_jga.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hhe_jga.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp0hhe_jga.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hhe_jga.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hhe_jga.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0hhe_jga.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp30lz9yfx.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp30lz9yfx.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30lz9yfx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp30lz9yfx.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp30lz9yfx.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30lz9yfx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp30lz9yfx.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp30lz9yfx.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30lz9yfx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp30lz9yfx.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp30lz9yfx.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30lz9yfx.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp30lz9yfx.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp30lz9yfx.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp30lz9yfx.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp30lz9yfx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq1khn5g1.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq1khn5g1.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq1khn5g1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq1khn5g1.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq1khn5g1.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq1khn5g1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq1khn5g1.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq1khn5g1.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq1khn5g1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq1khn5g1.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq1khn5g1.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq1khn5g1.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq1khn5g1.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq1khn5g1.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq1khn5g1.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq1khn5g1.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars driving in each direction.\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqeaumdb4.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqeaumdb4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqeaumdb4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqeaumdb4.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqeaumdb4.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqeaumdb4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqeaumdb4.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqeaumdb4.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqeaumdb4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqeaumdb4.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqeaumdb4.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqeaumdb4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpqeaumdb4.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqeaumdb4.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqeaumdb4.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqeaumdb4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    This function\
    \ outputs the number of collisions between n cars moving left to right\n    and\
    \ n cars moving right to left.\n    \"\"\"\n    return n*(n-1)/2\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiirvtl_c.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiirvtl_c.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiirvtl_c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiirvtl_c.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiirvtl_c.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiirvtl_c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiirvtl_c.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiirvtl_c.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiirvtl_c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiirvtl_c.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiirvtl_c.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiirvtl_c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpiirvtl_c.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpiirvtl_c.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiirvtl_c.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiirvtl_c.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2c33p8so.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2c33p8so.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2c33p8so.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2c33p8so.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2c33p8so.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2c33p8so.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2c33p8so.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2c33p8so.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2c33p8so.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2c33p8so.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2c33p8so.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2c33p8so.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp2c33p8so.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2c33p8so.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2c33p8so.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2c33p8so.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpu0dyocm7.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpu0dyocm7.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpu0dyocm7.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpu0dyocm7.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpu0dyocm7.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpu0dyocm7.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpu0dyocm7.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpu0dyocm7.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpu0dyocm7.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq9r6ds15.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq9r6ds15.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq9r6ds15.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq9r6ds15.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq9r6ds15.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq9r6ds15.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq9r6ds15.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq9r6ds15.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq9r6ds15.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq9r6ds15.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq9r6ds15.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq9r6ds15.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpq9r6ds15.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq9r6ds15.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq9r6ds15.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq9r6ds15.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # The number of collisions\
    \ is the same as the number of cars that are\n    # moving in the same direction.\
    \  So, we just need to count the number of\n    # cars that are moving in the\
    \ same direction.\n    #\n    # Let's say that the cars that are moving left to\
    \ right are numbered 1 to n,\n    # and the cars that are moving right to left\
    \ are numbered n+1 to 2n.\n    #\n    # If car i is moving left to right, then\
    \ car i+n is moving right to left.\n    #\n    # If car i is moving left to right,\
    \ then car i+n is moving right to left.\n    #\n    # So, the number of cars that\
    \ are moving in the same direction is the number\n    # of cars that are moving\
    \ left to right, plus the number of cars that are\n    # moving right to left.\n\
    \    #\n    # The number of cars that are moving left to right is n.\n    #\n\
    \    # The number of cars that are moving right to left is n.\n    #\n    # So,\
    \ the number of cars that are moving in the same direction is 2n.\n    #\n   \
    \ # So, the number of collisions is 2n.\n    2n\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphc_v5fd5.jl:43\n  Expression: candidate(3)\
    \ == 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphc_v5fd5.jl:43\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphc_v5fd5.jl:41\ntest set: Test\
    \ Failed at /tmp/tmphc_v5fd5.jl:44\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 8 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphc_v5fd5.jl:44 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphc_v5fd5.jl:41\ntest set: Test\
    \ Failed at /tmp/tmphc_v5fd5.jl:45\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 16 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphc_v5fd5.jl:45 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphc_v5fd5.jl:41\ntest set: Test\
    \ Failed at /tmp/tmphc_v5fd5.jl:46\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 20 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphc_v5fd5.jl:46 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphc_v5fd5.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphc_v5fd5.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpykl9qt4k.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpykl9qt4k.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpykl9qt4k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpykl9qt4k.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpykl9qt4k.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpykl9qt4k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpykl9qt4k.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpykl9qt4k.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpykl9qt4k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpykl9qt4k.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpykl9qt4k.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpykl9qt4k.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpykl9qt4k.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpykl9qt4k.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpykl9qt4k.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpykl9qt4k.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpu0yv4x6m.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpu0yv4x6m.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpu0yv4x6m.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpu0yv4x6m.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpu0yv4x6m.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpu0yv4x6m.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpu0yv4x6m.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpu0yv4x6m.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpu0yv4x6m.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmvjz_r1_.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpmvjz_r1_.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpmvjz_r1_.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmvjz_r1_.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpmvjz_r1_.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpmvjz_r1_.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpmvjz_r1_.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmvjz_r1_.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpmvjz_r1_.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphpqpwe74.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmphpqpwe74.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmphpqpwe74.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphpqpwe74.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmphpqpwe74.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmphpqpwe74.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmphpqpwe74.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphpqpwe74.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmphpqpwe74.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpple64b6f.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpple64b6f.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpple64b6f.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpple64b6f.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpple64b6f.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpple64b6f.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpple64b6f.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpple64b6f.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpple64b6f.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpple64b6f.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpple64b6f.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpple64b6f.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpple64b6f.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpple64b6f.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpple64b6f.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpple64b6f.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4uldlka4.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4uldlka4.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4uldlka4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4uldlka4.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4uldlka4.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4uldlka4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4uldlka4.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4uldlka4.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4uldlka4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4uldlka4.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4uldlka4.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4uldlka4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4uldlka4.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4uldlka4.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4uldlka4.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4uldlka4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    return n*(n-1)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp7zca66_.jl:23\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 2 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp7zca66_.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7zca66_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpp7zca66_.jl:24\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp7zca66_.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7zca66_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpp7zca66_.jl:25\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 12 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp7zca66_.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7zca66_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpp7zca66_.jl:26\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 56 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp7zca66_.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7zca66_.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpp7zca66_.jl:27\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 90 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp7zca66_.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp7zca66_.jl:22\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7zca66_.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl3svycyl.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3svycyl.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3svycyl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpl3svycyl.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3svycyl.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3svycyl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpl3svycyl.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3svycyl.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3svycyl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpl3svycyl.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3svycyl.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3svycyl.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpl3svycyl.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3svycyl.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3svycyl.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl3svycyl.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpil00ubp4.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpil00ubp4.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpil00ubp4.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpil00ubp4.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpil00ubp4.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpil00ubp4.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpil00ubp4.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpil00ubp4.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpil00ubp4.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl2j528um.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpl2j528um.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpl2j528um.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl2j528um.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpl2j528um.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpl2j528um.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpl2j528um.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl2j528um.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpl2j528um.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppom4l34_.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmppom4l34_.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmppom4l34_.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppom4l34_.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmppom4l34_.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmppom4l34_.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmppom4l34_.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppom4l34_.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmppom4l34_.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl3l4zdd_.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3l4zdd_.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3l4zdd_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpl3l4zdd_.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3l4zdd_.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3l4zdd_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpl3l4zdd_.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3l4zdd_.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3l4zdd_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpl3l4zdd_.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3l4zdd_.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3l4zdd_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpl3l4zdd_.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl3l4zdd_.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3l4zdd_.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl3l4zdd_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO: Implement this\
    \ function\n    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuim20r9s.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuim20r9s.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuim20r9s.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpuim20r9s.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuim20r9s.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuim20r9s.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpuim20r9s.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuim20r9s.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuim20r9s.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpuim20r9s.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuim20r9s.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuim20r9s.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpuim20r9s.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuim20r9s.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuim20r9s.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuim20r9s.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # the number of cars\
    \ moving left to right\n    # the number of cars moving right to left\n    # the\
    \ number of collisions\n    # the speed of the cars\n    # the position of the\
    \ cars moving left to right\n    # the position of the cars moving right to left\n\
    \    # the time at which the cars moving left to right arrive\n    # the time\
    \ at which the cars moving right to left arrive\n    # the time at which the cars\
    \ moving left to right depart\n    # the time at which the cars moving right to\
    \ left depart\n    # the time at which the cars moving left to right arrive\n\
    \    # the time at which the cars moving right to left arrive\n    # the time\
    \ at which the cars moving left to right depart\n    # the time at which the cars\
    \ moving right to left depart\n    # the time at which the cars moving left to\
    \ right arrive\n    # the time at which the cars moving right to left arrive\n\
    \    # the time at which the cars moving left to right depart\n    # the time\
    \ at which the cars moving right to left depart\n    # the time at which the cars\
    \ moving left to right arrive\n    # the time at which the cars moving right to\
    \ left arrive\n    # the time at which the cars moving left to right depart\n\
    \    # the time at which the cars moving right to left depart\n    # the time\
    \ at which the cars moving left to right arrive\n    # the time at which the cars\
    \ moving right to left arrive\n    # the time at which the cars moving left to\
    \ right depart\n    # the time at which the cars moving right to left depart\n\
    \    # the time at which the cars moving left to right arrive\n    # the time\
    \ at which the cars moving right to left arrive\n    # the time at which the cars\
    \ moving left to right depart\n    # the time at which the cars moving right to\
    \ left depart\n    # the time at which the cars moving left to right arrive\n\
    \    # the time at which the cars moving right to left arrive\n    # the time\
    \ at which the cars moving left to right depart\n    # the time at which the cars\
    \ moving right to left depart\n    # the time at which the cars moving left to\
    \ right arrive\n    # the time at which the cars moving right to left arrive\n\
    \    # the time at which the cars moving left to right depart\n    # the time\
    \ at which the cars moving right to left depart\n    #\nusing Test\n\n@testset\
    \ begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3)\
    \ == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxmvdzvwa.jl:12\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxmvdzvwa.jl:1\n\
    in expression starting at /tmp/tmpxmvdzvwa.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy73vmkrd.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy73vmkrd.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy73vmkrd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy73vmkrd.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy73vmkrd.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy73vmkrd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy73vmkrd.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy73vmkrd.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy73vmkrd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy73vmkrd.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy73vmkrd.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy73vmkrd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpy73vmkrd.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy73vmkrd.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy73vmkrd.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy73vmkrd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe9uk2y44.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpe9uk2y44.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpe9uk2y44.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe9uk2y44.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpe9uk2y44.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpe9uk2y44.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpe9uk2y44.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe9uk2y44.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpe9uk2y44.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpktwo3g4n.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpktwo3g4n.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpktwo3g4n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpktwo3g4n.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpktwo3g4n.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpktwo3g4n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpktwo3g4n.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpktwo3g4n.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpktwo3g4n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpktwo3g4n.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpktwo3g4n.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpktwo3g4n.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpktwo3g4n.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpktwo3g4n.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpktwo3g4n.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpktwo3g4n.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxwc2dqku.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxwc2dqku.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxwc2dqku.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxwc2dqku.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxwc2dqku.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxwc2dqku.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxwc2dqku.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxwc2dqku.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxwc2dqku.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxwc2dqku.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxwc2dqku.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxwc2dqku.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxwc2dqku.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxwc2dqku.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxwc2dqku.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxwc2dqku.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # your code here\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcsjzj_fh.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpcsjzj_fh.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcsjzj_fh.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcsjzj_fh.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpcsjzj_fh.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpcsjzj_fh.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpcsjzj_fh.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcsjzj_fh.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpcsjzj_fh.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars driving in each direction.\n    \"\"\"\n    # YOUR CODE HERE\n\
    \    return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw2qwenuv.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2qwenuv.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2qwenuv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw2qwenuv.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2qwenuv.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2qwenuv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw2qwenuv.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2qwenuv.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2qwenuv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw2qwenuv.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2qwenuv.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2qwenuv.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpw2qwenuv.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2qwenuv.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2qwenuv.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw2qwenuv.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb7w4m3cd.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb7w4m3cd.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb7w4m3cd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpb7w4m3cd.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb7w4m3cd.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb7w4m3cd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpb7w4m3cd.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb7w4m3cd.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb7w4m3cd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpb7w4m3cd.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb7w4m3cd.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb7w4m3cd.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpb7w4m3cd.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb7w4m3cd.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb7w4m3cd.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb7w4m3cd.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphc6uf09v.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphc6uf09v.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphc6uf09v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphc6uf09v.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphc6uf09v.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphc6uf09v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphc6uf09v.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphc6uf09v.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphc6uf09v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphc6uf09v.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphc6uf09v.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphc6uf09v.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphc6uf09v.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphc6uf09v.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphc6uf09v.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphc6uf09v.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdzinupl8.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdzinupl8.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdzinupl8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdzinupl8.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdzinupl8.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdzinupl8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdzinupl8.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdzinupl8.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdzinupl8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdzinupl8.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdzinupl8.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdzinupl8.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpdzinupl8.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdzinupl8.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdzinupl8.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdzinupl8.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpptfrhb7t.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpptfrhb7t.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpptfrhb7t.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpptfrhb7t.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpptfrhb7t.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpptfrhb7t.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpptfrhb7t.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpptfrhb7t.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpptfrhb7t.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpptfrhb7t.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpptfrhb7t.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpptfrhb7t.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpptfrhb7t.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpptfrhb7t.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpptfrhb7t.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpptfrhb7t.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnagxxy6v.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpnagxxy6v.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpnagxxy6v.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnagxxy6v.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpnagxxy6v.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpnagxxy6v.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpnagxxy6v.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnagxxy6v.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpnagxxy6v.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsc6rbun8.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpsc6rbun8.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpsc6rbun8.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsc6rbun8.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpsc6rbun8.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpsc6rbun8.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpsc6rbun8.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsc6rbun8.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpsc6rbun8.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt0ue7abp.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpt0ue7abp.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpt0ue7abp.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt0ue7abp.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpt0ue7abp.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpt0ue7abp.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpt0ue7abp.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt0ue7abp.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpt0ue7abp.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4es2garg.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4es2garg.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4es2garg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4es2garg.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4es2garg.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4es2garg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4es2garg.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4es2garg.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4es2garg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4es2garg.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4es2garg.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4es2garg.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp4es2garg.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4es2garg.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4es2garg.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4es2garg.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxsnya1b3.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxsnya1b3.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxsnya1b3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxsnya1b3.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxsnya1b3.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxsnya1b3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxsnya1b3.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxsnya1b3.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxsnya1b3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxsnya1b3.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxsnya1b3.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxsnya1b3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpxsnya1b3.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxsnya1b3.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxsnya1b3.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxsnya1b3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv846jwn3.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv846jwn3.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv846jwn3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv846jwn3.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv846jwn3.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv846jwn3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv846jwn3.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv846jwn3.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv846jwn3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv846jwn3.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv846jwn3.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv846jwn3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv846jwn3.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv846jwn3.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv846jwn3.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv846jwn3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Input:\n\
    \    n: the number of cars in each set.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = car_race_collision;\n\t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\
    \t@test(candidate(4) == 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10)\
    \ == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp5hscj8f_.jl:1\nin expression starting at /tmp/tmp5hscj8f_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpifokjn_c.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpifokjn_c.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpifokjn_c.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpifokjn_c.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpifokjn_c.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpifokjn_c.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpifokjn_c.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpifokjn_c.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpifokjn_c.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpifokjn_c.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpifokjn_c.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpifokjn_c.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpifokjn_c.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpifokjn_c.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpifokjn_c.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpifokjn_c.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    return n*(n-1)/2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf22psxna.jl:20\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 1 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf22psxna.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf22psxna.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpf22psxna.jl:21\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 3 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf22psxna.jl:21 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf22psxna.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpf22psxna.jl:22\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 6 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf22psxna.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf22psxna.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpf22psxna.jl:23\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 28 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf22psxna.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf22psxna.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpf22psxna.jl:24\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 45 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf22psxna.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf22psxna.jl:19\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf22psxna.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpex8531av.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpex8531av.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpex8531av.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpex8531av.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpex8531av.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpex8531av.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpex8531av.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpex8531av.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpex8531av.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpex8531av.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpex8531av.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpex8531av.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpex8531av.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpex8531av.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpex8531av.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpex8531av.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6pfbryju.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp6pfbryju.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp6pfbryju.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6pfbryju.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp6pfbryju.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp6pfbryju.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp6pfbryju.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6pfbryju.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp6pfbryju.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkcgrxhyf.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpkcgrxhyf.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpkcgrxhyf.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkcgrxhyf.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpkcgrxhyf.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpkcgrxhyf.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpkcgrxhyf.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkcgrxhyf.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpkcgrxhyf.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ewyms18.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_ewyms18.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_ewyms18.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_ewyms18.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_ewyms18.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_ewyms18.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_ewyms18.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_ewyms18.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_ewyms18.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_ewyms18.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_ewyms18.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_ewyms18.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_ewyms18.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_ewyms18.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_ewyms18.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ewyms18.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvms4h162.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvms4h162.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvms4h162.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvms4h162.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvms4h162.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvms4h162.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvms4h162.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvms4h162.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvms4h162.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvms4h162.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvms4h162.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvms4h162.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpvms4h162.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvms4h162.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvms4h162.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvms4h162.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj8veaj5r.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpj8veaj5r.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpj8veaj5r.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj8veaj5r.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpj8veaj5r.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpj8veaj5r.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpj8veaj5r.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj8veaj5r.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpj8veaj5r.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm0415ovi.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpm0415ovi.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpm0415ovi.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm0415ovi.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpm0415ovi.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpm0415ovi.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpm0415ovi.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm0415ovi.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpm0415ovi.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo60oq2_6.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo60oq2_6.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo60oq2_6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpo60oq2_6.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo60oq2_6.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo60oq2_6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpo60oq2_6.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo60oq2_6.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo60oq2_6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpo60oq2_6.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo60oq2_6.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo60oq2_6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpo60oq2_6.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo60oq2_6.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo60oq2_6.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo60oq2_6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    Imagine a\
    \ road that's a perfectly straight infinitely long line.\n    n cars are driving\
    \ left to right;  simultaneously, a different set of n cars\n    are driving right\
    \ to left.   The two sets of cars start out being very far from\n    each other.\
    \  All cars move in the same speed.  Two cars are said to collide\n    when a\
    \ car that's moving left to right hits a car that's moving right to left.\n  \
    \  However, the cars are infinitely sturdy and strong; as a result, they continue\
    \ moving\n    in their trajectory as if they did not collide.\nusing Test\n\n\
    @testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2) == 4)\n\
    \t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmplabb48bc.jl:1\nin expression starting at /tmp/tmplabb48bc.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfr0o8gya.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpfr0o8gya.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpfr0o8gya.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfr0o8gya.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpfr0o8gya.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpfr0o8gya.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpfr0o8gya.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfr0o8gya.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpfr0o8gya.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp15n3ez1q.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp15n3ez1q.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp15n3ez1q.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp15n3ez1q.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp15n3ez1q.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp15n3ez1q.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp15n3ez1q.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp15n3ez1q.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp15n3ez1q.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9sqrss_m.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp9sqrss_m.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9sqrss_m.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9sqrss_m.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp9sqrss_m.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp9sqrss_m.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp9sqrss_m.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9sqrss_m.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp9sqrss_m.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_iq3ot7a.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_iq3ot7a.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_iq3ot7a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_iq3ot7a.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_iq3ot7a.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_iq3ot7a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_iq3ot7a.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_iq3ot7a.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_iq3ot7a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_iq3ot7a.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_iq3ot7a.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_iq3ot7a.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_iq3ot7a.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_iq3ot7a.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_iq3ot7a.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_iq3ot7a.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjut9osgn.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjut9osgn.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjut9osgn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjut9osgn.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjut9osgn.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjut9osgn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjut9osgn.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjut9osgn.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjut9osgn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjut9osgn.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjut9osgn.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjut9osgn.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpjut9osgn.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjut9osgn.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjut9osgn.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjut9osgn.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    \"\"\"\n    n is the\
    \ number of cars in each direction.\n    \"\"\"\n    # YOUR CODE HERE\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t\
    @test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnhfove1s.jl:24\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnhfove1s.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnhfove1s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnhfove1s.jl:25\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnhfove1s.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnhfove1s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnhfove1s.jl:26\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnhfove1s.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnhfove1s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnhfove1s.jl:27\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnhfove1s.jl:27 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnhfove1s.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpnhfove1s.jl:28\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnhfove1s.jl:28 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnhfove1s.jl:23\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnhfove1s.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyoojn5ey.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpyoojn5ey.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpyoojn5ey.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyoojn5ey.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpyoojn5ey.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpyoojn5ey.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpyoojn5ey.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyoojn5ey.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpyoojn5ey.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp28h1knv0.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28h1knv0.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28h1knv0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp28h1knv0.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28h1knv0.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28h1knv0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp28h1knv0.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28h1knv0.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28h1knv0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp28h1knv0.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28h1knv0.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28h1knv0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp28h1knv0.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28h1knv0.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28h1knv0.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28h1knv0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3ztopyma.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp3ztopyma.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3ztopyma.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3ztopyma.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp3ztopyma.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp3ztopyma.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp3ztopyma.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3ztopyma.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp3ztopyma.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxfkice0b.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpxfkice0b.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpxfkice0b.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxfkice0b.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpxfkice0b.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpxfkice0b.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpxfkice0b.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpxfkice0b.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpxfkice0b.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzvy9krg3.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzvy9krg3.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzvy9krg3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzvy9krg3.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzvy9krg3.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzvy9krg3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzvy9krg3.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzvy9krg3.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzvy9krg3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzvy9krg3.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzvy9krg3.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzvy9krg3.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpzvy9krg3.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzvy9krg3.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzvy9krg3.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzvy9krg3.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpat5qig6_.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpat5qig6_.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpat5qig6_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpat5qig6_.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpat5qig6_.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpat5qig6_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpat5qig6_.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpat5qig6_.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpat5qig6_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpat5qig6_.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpat5qig6_.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpat5qig6_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpat5qig6_.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpat5qig6_.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpat5qig6_.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpat5qig6_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph4jiqerv.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmph4jiqerv.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmph4jiqerv.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph4jiqerv.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmph4jiqerv.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmph4jiqerv.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmph4jiqerv.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph4jiqerv.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmph4jiqerv.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf22c27mq.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpf22c27mq.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpf22c27mq.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf22c27mq.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpf22c27mq.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpf22c27mq.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpf22c27mq.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf22c27mq.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpf22c27mq.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpig0ddshm.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpig0ddshm.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpig0ddshm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpig0ddshm.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpig0ddshm.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpig0ddshm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpig0ddshm.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpig0ddshm.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpig0ddshm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpig0ddshm.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpig0ddshm.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpig0ddshm.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpig0ddshm.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpig0ddshm.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpig0ddshm.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpig0ddshm.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_bbimyz0.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_bbimyz0.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_bbimyz0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_bbimyz0.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_bbimyz0.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_bbimyz0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_bbimyz0.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_bbimyz0.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_bbimyz0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_bbimyz0.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_bbimyz0.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_bbimyz0.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp_bbimyz0.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_bbimyz0.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_bbimyz0.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_bbimyz0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp092owrc4.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp092owrc4.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp092owrc4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp092owrc4.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp092owrc4.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp092owrc4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp092owrc4.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp092owrc4.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp092owrc4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp092owrc4.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp092owrc4.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp092owrc4.jl:20\ntest set: Test\
    \ Failed at /tmp/tmp092owrc4.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp092owrc4.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp092owrc4.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp092owrc4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplrkta482.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplrkta482.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplrkta482.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplrkta482.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplrkta482.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplrkta482.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplrkta482.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplrkta482.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplrkta482.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplrkta482.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplrkta482.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplrkta482.jl:20\ntest set: Test\
    \ Failed at /tmp/tmplrkta482.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplrkta482.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplrkta482.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplrkta482.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw2x5lo9r.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2x5lo9r.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2x5lo9r.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw2x5lo9r.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2x5lo9r.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2x5lo9r.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw2x5lo9r.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2x5lo9r.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2x5lo9r.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw2x5lo9r.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2x5lo9r.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2x5lo9r.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpw2x5lo9r.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2x5lo9r.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2x5lo9r.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw2x5lo9r.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp63nbar94.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmp63nbar94.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp63nbar94.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp63nbar94.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp63nbar94.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmp63nbar94.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp63nbar94.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp63nbar94.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp63nbar94.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyl6se62s.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpyl6se62s.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpyl6se62s.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyl6se62s.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpyl6se62s.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpyl6se62s.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpyl6se62s.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyl6se62s.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpyl6se62s.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptpdi7gtp.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmptpdi7gtp.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmptpdi7gtp.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptpdi7gtp.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmptpdi7gtp.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmptpdi7gtp.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmptpdi7gtp.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptpdi7gtp.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmptpdi7gtp.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpu31qg34h.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpu31qg34h.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpu31qg34h.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpu31qg34h.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpu31qg34h.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpu31qg34h.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpu31qg34h.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpu31qg34h.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpu31qg34h.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO:  write this function\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpggw3xnfg.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpggw3xnfg.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpggw3xnfg.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpggw3xnfg.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpggw3xnfg.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpggw3xnfg.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpggw3xnfg.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpggw3xnfg.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpggw3xnfg.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpud7wa7zs.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(2) == 4\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] car_race_collision(n::Int64)\\n     @ Main /tmp/tmpud7wa7zs.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpud7wa7zs.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpud7wa7zs.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpud7wa7zs.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(3) == 9\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ car_race_collision(n::Int64)\\n     @ Main /tmp/tmpud7wa7zs.jl:14\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpud7wa7zs.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpud7wa7zs.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpud7wa7zs.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4) == 16\\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv5mk44yp.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv5mk44yp.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv5mk44yp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv5mk44yp.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv5mk44yp.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv5mk44yp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv5mk44yp.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv5mk44yp.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv5mk44yp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv5mk44yp.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv5mk44yp.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv5mk44yp.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpv5mk44yp.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv5mk44yp.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv5mk44yp.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv5mk44yp.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\n  \
    \  return 0\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz6xlbn3_.jl:21\n  Expression: candidate(2)\
    \ == 4\n   Evaluated: 0 == 4\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz6xlbn3_.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6xlbn3_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpz6xlbn3_.jl:22\n  Expression: candidate(3) == 9\n   Evaluated:\
    \ 0 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz6xlbn3_.jl:22 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6xlbn3_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpz6xlbn3_.jl:23\n  Expression: candidate(4) == 16\n   Evaluated:\
    \ 0 == 16\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz6xlbn3_.jl:23 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6xlbn3_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpz6xlbn3_.jl:24\n  Expression: candidate(8) == 64\n   Evaluated:\
    \ 0 == 64\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz6xlbn3_.jl:24 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6xlbn3_.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpz6xlbn3_.jl:25\n  Expression: candidate(10) == 100\n   Evaluated:\
    \ 0 == 100\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz6xlbn3_.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz6xlbn3_.jl:20\nTest Summary:\
    \ | Fail  Total\ntest set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz6xlbn3_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8lm_jfuk.jl:20\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n    ...\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n\
    \     @ Main /tmp/tmp8lm_jfuk.jl:14\n   [2] macro expansion\n     @ /tmp/tmp8lm_jfuk.jl:20\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8lm_jfuk.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp8lm_jfuk.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n    ...\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n\
    \     @ Main /tmp/tmp8lm_jfuk.jl:14\n   [2] macro expansion\n     @ /tmp/tmp8lm_jfuk.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8lm_jfuk.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp8lm_jfuk.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8lm_jfuk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\t@test(candidate(2)\
    \ == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) == 16)\n\t@test(candidate(8)\
    \ == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpagmqmprh.jl:20\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n    ...\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n\
    \     @ Main /tmp/tmpagmqmprh.jl:14\n   [2] macro expansion\n     @ /tmp/tmpagmqmprh.jl:20\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpagmqmprh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpagmqmprh.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n    ...\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n\
    \     @ Main /tmp/tmpagmqmprh.jl:14\n   [2] macro expansion\n     @ /tmp/tmpagmqmprh.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpagmqmprh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpagmqmprh.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpagmqmprh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Imagine a road that's a perfectly straight infinitely long\
    \ line.\n    n cars are driving left to right;  simultaneously, a different set\
    \ of n cars\n    are driving right to left.   The two sets of cars start out being\
    \ very far from\n    each other.  All cars move in the same speed.  Two cars are\
    \ said to collide\n    when a car that's moving left to right hits a car that's\
    \ moving right to left.\n    However, the cars are infinitely sturdy and strong;\
    \ as a result, they continue moving\n    in their trajectory as if they did not\
    \ collide.\n\n    This function outputs the number of such collisions.\n    \"\
    \"\"\nfunction car_race_collision(n::Int64)::Int64 \n    # TODO: implement this\
    \ function\nend\nusing Test\n\n@testset begin\n\ncandidate = car_race_collision;\n\
    \t@test(candidate(2) == 4)\n\t@test(candidate(3) == 9)\n\t@test(candidate(4) ==\
    \ 16)\n\t@test(candidate(8) == 64)\n\t@test(candidate(10) == 100)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyt50gzkf.jl:20\n  Test threw exception\n\
    \  Expression: candidate(2) == 4\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n    ...\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n\
    \     @ Main /tmp/tmpyt50gzkf.jl:14\n   [2] macro expansion\n     @ /tmp/tmpyt50gzkf.jl:20\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyt50gzkf.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpyt50gzkf.jl:21\n  Test threw exception\n  Expression:\
    \ candidate(3) == 9\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n    ...\n  Stacktrace:\n   [1] car_race_collision(n::Int64)\n\
    \     @ Main /tmp/tmpyt50gzkf.jl:14\n   [2] macro expansion\n     @ /tmp/tmpyt50gzkf.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpyt50gzkf.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpyt50gzkf.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(4) == 16\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Int64\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyt50gzkf.jl:17\n"
  exit_code: 1
  status: SyntaxError
