name: HumanEval_12_longest
language: julia
results:
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for string in\
    \ strings\n        if length(string) > length(longest)\n            longest =\
    \ string\n        end\n    end\n    return longest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    longest_string = \"\"\
    \n    for string in strings\n        if length(string) > max_length\n        \
    \    max_length = length(string)\n            longest_string = string\n      \
    \  end\n    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_str = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest_str)\n            longest_str = s\n   \
    \     end\n    end\n    return longest_str\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for i in\
    \ 2:length(strings)\n        if length(strings[i]) > length(longest_string)\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_len = 0\n    max_str = strings[1]\n\
    \    for s in strings\n        if length(s) > max_len\n            max_len = length(s)\n\
    \            max_str = s\n        end\n    end\n    return max_str\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    longest_string = \"\"\
    \n    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            longest_string = s\n        end\n    end\n    return\
    \ longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for i in\
    \ 2:length(strings)\n        if length(strings[i]) > length(longest_string)\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for i in\
    \ 2:length(strings)\n        if length(strings[i]) > length(longest_string)\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    max_string = strings[1]\n\
    \    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            max_string = s\n        end\n    end\n    return max_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = length(strings[1])\n    max_string\
    \ = strings[1]\n    for s in strings\n        if length(s) > max_length\n    \
    \        max_length = length(s)\n            max_string = s\n        end\n   \
    \ end\n    return max_string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for i in\
    \ 2:length(strings)\n        if length(strings[i]) > length(longest_string)\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if length(strings)\
    \ == 0\n        return nothing\n    end\n    longest_string = strings[1]\n   \
    \ for i in 2:length(strings)\n        if length(strings[i]) > length(longest_string)\n\
    \            longest_string = strings[i]\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    longest_string = \"\"\
    \n    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            longest_string = s\n        end\n    end\n    return\
    \ longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    max_string = \"\"\n\
    \    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            max_string = s\n        end\n    end\n    return max_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    max_string = nothing\n\
    \    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            max_string = s\n        end\n    end\n    return max_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    longest_string = \"\"\
    \n    for string in strings\n        if length(string) > max_length\n        \
    \    max_length = length(string)\n            longest_string = string\n      \
    \  end\n    end\n    return longest_string\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    longest_string = \"\"\
    \n    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            longest_string = s\n        end\n    end\n    return\
    \ longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    longest_string = \"\"\
    \n    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            longest_string = s\n        end\n    end\n    return\
    \ longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_len = 0\n    longest_string = nothing\n\
    \    for s in strings\n        if length(s) > max_len\n            max_len = length(s)\n\
    \            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for i in 2:length(strings)\n\
    \        if length(strings[i]) > length(longest)\n            longest = strings[i]\n\
    \        end\n    end\n    return longest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t\
    @test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    max_string = \"\"\n\
    \    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            max_string = s\n        end\n    end\n    return max_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_len = 0\n    longest_string = \"\"\n\
    \    for s in strings\n        if length(s) > max_len\n            max_len = length(s)\n\
    \            longest_string = s\n        end\n    end\n    return longest_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for s in\
    \ strings\n        if length(s) > length(longest_string)\n            longest_string\
    \ = s\n        end\n    end\n    return longest_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    longest_string = \"\"\
    \n    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            longest_string = s\n        end\n    end\n    return\
    \ longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    longest_string = \"\"\
    \n    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            longest_string = s\n        end\n    end\n    return\
    \ longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest_string = strings[1]\n    for string\
    \ in strings\n        if length(string) > length(longest_string)\n           \
    \ longest_string = string\n        end\n    end\n    return longest_string\nend\n\
    using Test\n\n@testset begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([]))\
    \ == nothing)\n\t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for s in strings\n\
    \        if length(s) > length(longest)\n            longest = s\n        end\n\
    \    end\n    return longest\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"\
    x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"\
    www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    max_length = 0\n    longest_string = \"\"\
    \n    for s in strings\n        if length(s) > max_length\n            max_length\
    \ = length(s)\n            longest_string = s\n        end\n    end\n    return\
    \ longest_string\nend\nusing Test\n\n@testset begin\n\ncandidate = longest;\n\t\
    @test(candidate(Vector{String}([])) == nothing)\n\t@test(candidate([\"x\", \"\
    y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\", \"yyy\", \"zzzz\", \"www\",\
    \ \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Out of list of strings, return the longest one. Return the first\
    \ one in case of multiple\n    strings of the same length. Return None in case\
    \ the input list is empty.\n    >>> longest([])\n\n    >>> longest(['a', 'b',\
    \ 'c'])\n    'a'\n    >>> longest(['a', 'bb', 'ccc'])\n    'ccc'\n    \"\"\"\n\
    function longest(strings::Vector{String})::Union{String, Nothing} \n    if isempty(strings)\n\
    \        return nothing\n    end\n    longest = strings[1]\n    for string in\
    \ strings\n        if length(string) > length(longest)\n            longest =\
    \ string\n        end\n    end\n    return longest\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = longest;\n\t@test(candidate(Vector{String}([])) == nothing)\n\
    \t@test(candidate([\"x\", \"y\", \"z\"]) == \"x\")\n\t@test(candidate([\"x\",\
    \ \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"]) == \"zzzz\")\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
