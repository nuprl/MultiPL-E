name: HumanEval_17_parse_music
language: julia
results:
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    # you can use split function to split string into a vector of substrings\n\
    \    # you can use parse_note function to parse each substring into a number of\
    \ beats\n    # you can use append! function to add elements to a vector\n    #\
    \ you can use length function to get the length of a vector\n    # you can use\
    \ push! function to add an element to the end of a vector\n    # you can use pop!\
    \ function to remove the last element of a vector\n    # you can use getindex\
    \ function to get an element of a vector\n    # you can use setindex! function\
    \ to set an element of a vector\n    # you can use isempty function to check if\
    \ a vector is empty\n    # you can use isequal function to check if two vectors\
    \ are equal\n    # you can use sort function to sort a vector\n    # you can use\
    \ sort! function to sort a vector in-place\n    # you can use == operator to check\
    \ if two vectors are equal\n    # you can use != operator to check if two vectors\
    \ are not equal\n    # you can use < operator to check if one vector is less than\
    \ another\n    # you can use <= operator to check if one vector is less than or\
    \ equal to another\n    # you can use > operator to check if one vector is greater\
    \ than another\n    # you can use >= operator to check if one vector is greater\
    \ than or equal to another\n    # you can use + operator to concatenate two vectors\n\
    \    # you can use * operator to repeat a vector\n    # you can use in operator\
    \ to check if an element is in a vector\n    # you can use findfirst function\
    \ to find the first index of an element in a vector\n    # you can use findnext\
    \ function to find the next index of an element in a vector\n    # you can use\
    \ findlast function to find the last index of an element in a vector\n    # you\
    \ can use findprev function to find the previous index of an element in a vector\n\
    \    # you can use eachindex function to iterate over all indices of a vector\n\
    \    # you can use eachindex function to iterate over all elements of a vector\n\
    \    # you can use eachindex function to iterate over all pairs of indices and\
    \ elements of a vector\n    # you can use map function to apply a function to\
    \ all elements of a vector\n    # you can use\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfw0z819z.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfw0z819z.jl:1\n\
    in expression starting at /tmp/tmpfw0z819z.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpeahb1giv.jl:18\nin expression\
    \ starting at /tmp/tmpeahb1giv.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsg0h6yvq.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsg0h6yvq.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsg0h6yvq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsg0h6yvq.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsg0h6yvq.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsg0h6yvq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsg0h6yvq.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsg0h6yvq.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsg0h6yvq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpsg0h6yvq.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsg0h6yvq.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsg0h6yvq.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsg0h6yvq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuiirpjua.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpuiirpjua.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpuiirpjua.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuiirpjua.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpuiirpjua.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpuiirpjua.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpuiirpjua.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuiirpjua.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpuiirpjua.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjf_r5fiv.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjf_r5fiv.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjf_r5fiv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjf_r5fiv.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjf_r5fiv.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjf_r5fiv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjf_r5fiv.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjf_r5fiv.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjf_r5fiv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjf_r5fiv.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjf_r5fiv.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjf_r5fiv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjf_r5fiv.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpjf_r5fiv.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjf_r5fiv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = split(music_string, \" \")\n    beats = []\n    for i in music_string\n  \
    \      if i == \"o\"\n            push!(beats, 4)\n        elseif i == \"o|\"\n\
    \            push!(beats, 2)\n        elseif i == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm8s_d34m.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8s_d34m.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8s_d34m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpm8s_d34m.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8s_d34m.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8s_d34m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpm8s_d34m.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8s_d34m.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8s_d34m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpm8s_d34m.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm8s_d34m.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm8s_d34m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpm8s_d34m.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpm8s_d34m.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm8s_d34m.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    beats = []\n    for note in music_string\n        if note == 'o'\n\
    \            push!(beats, 4)\n        elseif note == 'o'\n            push!(beats,\
    \ 2)\n        elseif note == '.'\n            push!(beats, 1)\n        end\n \
    \   end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxgyt11jq.jl:35\n  Expression: candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 4, 1, 1,\
    \ 4, 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxgyt11jq.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxgyt11jq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxgyt11jq.jl:36\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 1, 4, 1, 4, 4, 4, 4]\
    \ == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxgyt11jq.jl:36\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxgyt11jq.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxgyt11jq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmk_jkuph.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmk_jkuph.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmk_jkuph.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmk_jkuph.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmk_jkuph.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmk_jkuph.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmk_jkuph.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmk_jkuph.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmk_jkuph.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmk_jkuph.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmk_jkuph.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmk_jkuph.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmk_jkuph.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = replace(music_string, \"o\", \"4\")\n    music_string = replace(music_string,\
    \ \"o|\", \"2\")\n    music_string = replace(music_string, \".|\", \"1\")\n  \
    \  music_string = replace(music_string, \" \", \"\")\n    music_string = replace(music_string,\
    \ \"|\", \"\")\n    music_string = replace(music_string, \".\", \"\")\n    return\
    \ parse.(Int64, music_string)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv7xz2ipl.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\\n  Closest candidates\
    \ are:\\n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\\
    n    replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_music(music_string::String)\\n     @ Main /tmp/tmpv7xz2ipl.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpv7xz2ipl.jl:27 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv7xz2ipl.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmpv7xz2ipl.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\\
    n    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpv7xz2ipl.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpv7xz2ipl.jl:28\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/t"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = replace(music_string, \"o|\", \"o\")\n    music_string = replace(music_string,\
    \ \".|\", \".\")\n    music_string = replace(music_string, \"o\", \"4\")\n   \
    \ music_string = replace(music_string, \".\", \"1\")\n    music_string = split(music_string,\
    \ \" \")\n    music_string = parse.(Int64, music_string)\n    return music_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5cu7n42b.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\\n  Closest candidates\
    \ are:\\n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\\
    n    replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_music(music_string::String)\\n     @ Main /tmp/tmp5cu7n42b.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5cu7n42b.jl:27 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5cu7n42b.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp5cu7n42b.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\\
    n    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp5cu7n42b.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmp5cu7n42b.jl:28\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/t"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use the following function to convert a character to a number:\n\
    \    # parse(Int64, '1')\n    # parse(Int64, '2')\n    # ...\n    # parse(Int64,\
    \ '9')\n    # parse(Int64, '0')\n    #\n    # You can use the following function\
    \ to convert a number to a character:\n    # char(49)\n    # char(50)\n    # ...\n\
    \    # char(57)\n    # char(48)\n    #\n    # You can use the following function\
    \ to convert a character to an integer:\n    # int('1')\n    # int('2')\n    #\
    \ ...\n    # int('9')\n    # int('0')\n    #\n    # You can use the following\
    \ function to convert an integer to a character:\n    # chr(49)\n    # chr(50)\n\
    \    # ...\n    # chr(57)\n    # chr(48)\n    #\n    # You can use the following\
    \ function to convert a string to a list of characters:\n    # collect('123')\n\
    \    # collect('abc')\n    #\n    # You can use the following function to convert\
    \ a list of characters to a string:\n    # join(['1', '2', '3'])\n    # join(['a',\
    \ 'b', 'c'])\n    #\n    # You can use the following function to convert a string\
    \ to a list of integers:\n    # parse.(Int64, collect('123'))\n    # parse.(Int64,\
    \ collect('abc'))\n    #\n    # You can use the following function to convert\
    \ a list of integers to a string:\n    # join(map(char, [1, 2, 3]))\n    # join(map(char,\
    \ [97, 98, 99]))\n    #\n    # You can use the following function to convert a\
    \ list of integers to a list of characters:\n    # map(char, [1, 2, 3])\n    #\
    \ map(char, [97, 98, 99])\n    #\n    # You can use the following function to\
    \ convert a list of characters to a list of integers:\n    # map(int, ['1', '2',\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptfe23wcd.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmptfe23wcd.jl:1\n\
    in expression starting at /tmp/tmptfe23wcd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeelwhnv2.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpeelwhnv2.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeelwhnv2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpeelwhnv2.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpeelwhnv2.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeelwhnv2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpeelwhnv2.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeelwhnv2.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeelwhnv2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpeelwhnv2.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeelwhnv2.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeelwhnv2.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeelwhnv2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptenawv9q.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmptenawv9q.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptenawv9q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptenawv9q.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmptenawv9q.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptenawv9q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptenawv9q.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmptenawv9q.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptenawv9q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptenawv9q.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptenawv9q.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptenawv9q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmptenawv9q.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmptenawv9q.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptenawv9q.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpno_ym1kk.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpno_ym1kk.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno_ym1kk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpno_ym1kk.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpno_ym1kk.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno_ym1kk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpno_ym1kk.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpno_ym1kk.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno_ym1kk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpno_ym1kk.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpno_ym1kk.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpno_ym1kk.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpno_ym1kk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4rcbktex.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp4rcbktex.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp4rcbktex.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4rcbktex.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4rcbktex.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp4rcbktex.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp4rcbktex.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4rcbktex.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4rcbktex.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    # hint: you can use split(music_string, ' ') to get a list of notes\n\
    \    # hint: you can use findfirst(x -> x == 'o', note) to find the position of\
    \ 'o' in a note\n    # hint: you can use findfirst(x -> x == '|', note) to find\
    \ the position of '|' in a note\n    # hint: you can use findfirst(x -> x == '.',\
    \ note) to find the position of '.' in a note\n    # hint: you can use findfirst(x\
    \ -> x == 'o', note) == nothing to check if a note contains 'o'\n    # hint: you\
    \ can use findfirst(x -> x == '|', note) == nothing to check if a note contains\
    \ '|'\n    # hint: you can use findfirst(x -> x == '.', note) == nothing to check\
    \ if a note contains '.'\n    # hint: you can use push!(result, 4) to add 4 to\
    \ the result\n    # hint: you can use push!(result, 2) to add 2 to the result\n\
    \    # hint: you can use push!(result, 1) to add 1 to the result\n    # hint:\
    \ you can use return result to return the result\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoe5higfw.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpoe5higfw.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmpoe5higfw.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoe5higfw.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpoe5higfw.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpoe5higfw.jl:26\\n   [2] macro expansion\\n     @ /tmp/tmpoe5higfw.jl:33\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoe5higfw.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpoe5higfw.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    # Hint: use split() function to split the string into a list of notes\n\
    \    # Hint: use Dict to map note to its duration\n    # Hint: use parse() function\
    \ to convert string to integer\n    # Hint: use push!() function to add element\
    \ to the end of a list\n    # Hint: use append!() function to add element to the\
    \ end of a list\n    # Hint: use isempty() function to check if a list is empty\n\
    \    # Hint: use length() function to get the length of a list\n    # Hint: use\
    \ popfirst!() function to remove the first element of a list\n    # Hint: use\
    \ poplast!() function to remove the last element of a list\n    # Hint: use pushfirst!()\
    \ function to add element to the beginning of a list\n    # Hint: use pushlast!()\
    \ function to add element to the end of a list\n    # Hint: use reverse!() function\
    \ to reverse a list\n    # Hint: use shift!() function to remove the first element\
    \ of a list\n    # Hint: use unshift!() function to add element to the beginning\
    \ of a list\n    # Hint: use sort!() function to sort a list\n    # Hint: use\
    \ sort() function to sort a list\n    # Hint: use sortperm() function to sort\
    \ a list\n    # Hint: use sortperm!() function to sort a list\n    # Hint: use\
    \ splice!() function to remove elements from a list\n    # Hint: use split() function\
    \ to split a list\n    # Hint: use splitat() function to split a list\n    # Hint:\
    \ use splitat!() function to split a list\n    # Hint: use splice!() function\
    \ to remove elements from a list\n    # Hint: use splice!() function to remove\
    \ elements from a list\n    # Hint: use splice!() function to remove elements\
    \ from a list\n    # Hint: use splice!() function to remove elements from a list\n\
    \    # Hint: use splice!() function to remove elements from a list\n    # Hint:\
    \ use splice!() function to remove elements from a list\n    # Hint: use splice!()\
    \ function to remove\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpylub_w8m.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpylub_w8m.jl:1\n\
    in expression starting at /tmp/tmpylub_w8m.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, ' ')\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string)\n        if note == \"o\"\n        \
    \    push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    beats = []\n    for i in music_string\n        if i == 'o'\n     \
    \       push!(beats, 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n\
    \        elseif i == '.|'\n            push!(beats, 1)\n        end\n    end\n\
    \    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpbx2_38js.jl:19\nin expression\
    \ starting at /tmp/tmpbx2_38js.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzzhytytu.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzhytytu.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzhytytu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzzhytytu.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzhytytu.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzhytytu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzzhytytu.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzhytytu.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzhytytu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzzhytytu.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzzhytytu.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzzhytytu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzzhytytu.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpzzhytytu.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzzhytytu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9wqs5wpd.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9wqs5wpd.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9wqs5wpd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9wqs5wpd.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9wqs5wpd.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9wqs5wpd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9wqs5wpd.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp9wqs5wpd.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9wqs5wpd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9wqs5wpd.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9wqs5wpd.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9wqs5wpd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp9wqs5wpd.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp9wqs5wpd.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9wqs5wpd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3xluzlkd.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp3xluzlkd.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp3xluzlkd.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3xluzlkd.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp3xluzlkd.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp3xluzlkd.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp3xluzlkd.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3xluzlkd.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp3xluzlkd.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpafm6dr4t.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpafm6dr4t.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpafm6dr4t.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpafm6dr4t.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpafm6dr4t.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpafm6dr4t.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpafm6dr4t.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpafm6dr4t.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpafm6dr4t.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in music_string\n        if note == 'o'\n            push!(beats,\
    \ 4)\n        elseif note == 'o|'\n            push!(beats, 2)\n        elseif\
    \ note == '.|'\n            push!(beats, 1)\n        end\n    end\n    return\
    \ beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmptlsaax95.jl:18\nin expression\
    \ starting at /tmp/tmptlsaax95.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoq0sak2b.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpoq0sak2b.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpoq0sak2b.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoq0sak2b.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpoq0sak2b.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpoq0sak2b.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpoq0sak2b.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoq0sak2b.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpoq0sak2b.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t\
    @test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") ==\
    \ [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiz3f6999.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpiz3f6999.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpiz3f6999.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiz3f6999.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpiz3f6999.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpiz3f6999.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpiz3f6999.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiz3f6999.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpiz3f6999.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplmk3n0hg.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmplmk3n0hg.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmplmk3n0hg.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplmk3n0hg.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmplmk3n0hg.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmplmk3n0hg.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmplmk3n0hg.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplmk3n0hg.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmplmk3n0hg.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string)\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp2eymezzc.jl:18\nin expression\
    \ starting at /tmp/tmp2eymezzc.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9owletg0.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp9owletg0.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp9owletg0.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9owletg0.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp9owletg0.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp9owletg0.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp9owletg0.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9owletg0.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp9owletg0.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi72on7dq.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpi72on7dq.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpi72on7dq.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi72on7dq.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpi72on7dq.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpi72on7dq.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpi72on7dq.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi72on7dq.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpi72on7dq.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\n    # You can use the following code to split the string into a vector\
    \ of characters\n    # chars = split(music_string, \"\")\n    # You can use the\
    \ following code to convert a character to an integer\n    # int(chars[1])\nend\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmmbpayfi.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpmmbpayfi.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpmmbpayfi.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmmbpayfi.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpmmbpayfi.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpmmbpayfi.jl:19\\n   [2] macro expansion\\n     @ /tmp/tmpmmbpayfi.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmmbpayfi.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpmmbpayfi.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, ' ')\n        if note == 'o'\n     \
    \       push!(beats, 4)\n        elseif note == 'o|'\n            push!(beats,\
    \ 2)\n        elseif note == '.|'\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp2kg1as81.jl:18\nin expression\
    \ starting at /tmp/tmp2kg1as81.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    # hint: you can use split(music_string, \" \") to get a list of notes\n\
    \    # and then use a dictionary to map from note to number of beats\n    # you\
    \ can also use a dictionary to map from note to a tuple of number of beats and\
    \ note name\n    # and then use the note name to print out the notes in a nice\
    \ format\n    # you can also use a dictionary to map from note to a tuple of number\
    \ of beats and note name\n    # and then use the note name to print out the notes\
    \ in a nice format\n    # you can also use a dictionary to map from note to a\
    \ tuple of number of beats and note name\n    # and then use the note name to\
    \ print out the notes in a nice format\n    # you can also use a dictionary to\
    \ map from note to a tuple of number of beats and note name\n    # and then use\
    \ the note name to print out the notes in a nice format\n    # you can also use\
    \ a dictionary to map from note to a tuple of number of beats and note name\n\
    \    # and then use the note name to print out the notes in a nice format\n  \
    \  # you can also use a dictionary to map from note to a tuple of number of beats\
    \ and note name\n    # and then use the note name to print out the notes in a\
    \ nice format\n    # you can also use a dictionary to map from note to a tuple\
    \ of number of beats and note name\n    # and then use the note name to print\
    \ out the notes in a nice format\n    # you can also use a dictionary to map from\
    \ note to a tuple of number of beats and note name\n    # and then use the note\
    \ name to print out the notes in a nice format\n    # you can also use a dictionary\
    \ to map from note to a tuple of number of beats and note name\n    # and then\
    \ use the note name to print out the notes in a nice format\n    # you can also\
    \ use a dictionary to map from note to a tuple of number of beats and note name\n\
    \    # and then use the note name to print out the notes in a nice format\n  \
    \  # you can also use a dictionary to map from note to a tuple of number of beats\
    \ and note name\n    # and then use the note name to print out the notes in a\
    \ nice format\n    # you can also use a dictionary to map from note to a tuple\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxkvlmfce.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpxkvlmfce.jl:1\n\
    in expression starting at /tmp/tmpxkvlmfce.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpedfvph_4.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpedfvph_4.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpedfvph_4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpedfvph_4.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpedfvph_4.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpedfvph_4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpedfvph_4.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpedfvph_4.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpedfvph_4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpedfvph_4.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpedfvph_4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpedfvph_4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpedfvph_4.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpedfvph_4.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpedfvph_4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use split(music_string, ' ') to split the string into a\
    \ vector of notes\n    # You can use the length function to get the length of\
    \ the vector\n    # You can use the getindex function to get the value of a vector\
    \ at a particular index\n    # You can use the push! function to append to a vector\n\
    \    # You can use the parse function to convert a string to an integer\n    #\
    \ You can use the parse function to convert a string to a float\n    # You can\
    \ use the round function to round a float to the nearest integer\n    # You can\
    \ use the string function to convert an integer to a string\n    # You can use\
    \ the * operator to multiply a number by a vector\n    # You can use the + operator\
    \ to add two vectors\n    # You can use the append! function to append two vectors\n\
    \    # You can use the string function to convert an integer to a string\n   \
    \ # You can use the * operator to multiply a number by a vector\n    # You can\
    \ use the + operator to add two vectors\n    # You can use the append! function\
    \ to append two vectors\n    # You can use the string function to convert an integer\
    \ to a string\n    # You can use the * operator to multiply a number by a vector\n\
    \    # You can use the + operator to add two vectors\n    # You can use the append!\
    \ function to append two vectors\n    # You can use the string function to convert\
    \ an integer to a string\n    # You can use the * operator to multiply a number\
    \ by a vector\n    # You can use the + operator to add two vectors\n    # You\
    \ can use the append! function to append two vectors\n    # You can use the string\
    \ function to convert an integer to a string\n    # You can use the * operator\
    \ to multiply a number by a vector\n    # You can use the + operator to add two\
    \ vectors\n    # You can use the append! function to append two vectors\n    #\
    \ You can use the string function to convert an integer to a string\n    # You\
    \ can use the * operator to multiply a number by a vector\n    # You can use the\
    \ + operator to add two vectors\n    # You can use the append! function to append\
    \ two vectors\n    # You can use the string function to convert an integer to\
    \ a string\n    # You can use the * operator to multiply\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfjtpofau.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpfjtpofau.jl:1\n\
    in expression starting at /tmp/tmpfjtpofau.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyl83oz_8.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpyl83oz_8.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpyl83oz_8.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyl83oz_8.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpyl83oz_8.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpyl83oz_8.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpyl83oz_8.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyl83oz_8.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpyl83oz_8.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprfajzfre.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmprfajzfre.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmprfajzfre.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprfajzfre.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmprfajzfre.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmprfajzfre.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmprfajzfre.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprfajzfre.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmprfajzfre.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjotym6_z.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjotym6_z.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjotym6_z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjotym6_z.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjotym6_z.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjotym6_z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjotym6_z.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpjotym6_z.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjotym6_z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjotym6_z.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjotym6_z.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjotym6_z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjotym6_z.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpjotym6_z.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjotym6_z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ovmr6nb.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8ovmr6nb.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ovmr6nb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8ovmr6nb.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8ovmr6nb.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ovmr6nb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8ovmr6nb.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp8ovmr6nb.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ovmr6nb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8ovmr6nb.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8ovmr6nb.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ovmr6nb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8ovmr6nb.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp8ovmr6nb.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ovmr6nb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3hoxqjkq.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3hoxqjkq.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3hoxqjkq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3hoxqjkq.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3hoxqjkq.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3hoxqjkq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3hoxqjkq.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3hoxqjkq.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3hoxqjkq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3hoxqjkq.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3hoxqjkq.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3hoxqjkq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3hoxqjkq.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp3hoxqjkq.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3hoxqjkq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpauzzo04f.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpauzzo04f.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpauzzo04f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpauzzo04f.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpauzzo04f.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpauzzo04f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpauzzo04f.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpauzzo04f.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpauzzo04f.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpauzzo04f.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpauzzo04f.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpauzzo04f.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpauzzo04f.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, ' ')\n        if note == 'o'\n     \
    \       push!(beats, 4)\n        elseif note == 'o|'\n            push!(beats,\
    \ 2)\n        elseif note == '.|'\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp9m1hw_ww.jl:18\nin expression\
    \ starting at /tmp/tmp9m1hw_ww.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp3cq5rmth.jl:18\nin expression\
    \ starting at /tmp/tmp3cq5rmth.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string)\n    beats = []\n    for note in notes\n        if note\
    \ == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n     \
    \       push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    # you can use the following function to convert a character to\
    \ a number\n    # parse(Int64, 'o')\n    # parse(Int64, 'o|')\n    # parse(Int64,\
    \ '.|')\n    # parse(Int64, '.')\n    # parse(Int64, '|')\n    # parse(Int64,\
    \ ' ')\n    # parse(Int64, '\\n')\n    # parse(Int64, '\\t')\n    # parse(Int64,\
    \ '\\r')\n    # parse(Int64, '\\f')\n    # parse(Int64, '\\v')\n    # parse(Int64,\
    \ '\\b')\n    # parse(Int64, '\\a')\n    # parse(Int64, '\\0')\n    # parse(Int64,\
    \ '\\x1b')\n    # parse(Int64, '\\u263a')\n    # parse(Int64, '\\U0001f600')\n\
    \    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64,\
    \ '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n\
    \    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64,\
    \ '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n\
    \    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64,\
    \ '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n\
    \    # parse(Int64, '\\U0001f600')\n    # parse(Int64, '\\U0001f600')\n    # parse(Int64,\
    \ '\\U0001f600')\n    # parse(Int64, '\\U0001f\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe34syujo.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpe34syujo.jl:1\n\
    in expression starting at /tmp/tmpe34syujo.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl95su124.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpl95su124.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpl95su124.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl95su124.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpl95su124.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpl95su124.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpl95su124.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl95su124.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpl95su124.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string)\n        if note == \"o\"\n        \
    \    push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = split(music_string, \" \")\n    beats = []\n    for i in music_string\n  \
    \      if i == \"o\"\n            push!(beats, 4)\n        elseif i == \"o|\"\n\
    \            push!(beats, 2)\n        elseif i == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9tkpf113.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp9tkpf113.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp9tkpf113.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9tkpf113.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp9tkpf113.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp9tkpf113.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp9tkpf113.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9tkpf113.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp9tkpf113.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7ahr4jye.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7ahr4jye.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ahr4jye.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7ahr4jye.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7ahr4jye.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ahr4jye.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7ahr4jye.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7ahr4jye.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ahr4jye.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7ahr4jye.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7ahr4jye.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7ahr4jye.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7ahr4jye.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk39c3g66.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpk39c3g66.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpk39c3g66.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk39c3g66.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpk39c3g66.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpk39c3g66.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpk39c3g66.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk39c3g66.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpk39c3g66.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    result =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(result, 4)\n        elseif note == \"o|\"\n            push!(result,\
    \ 2)\n        elseif note == \".|\"\n            push!(result, 1)\n        end\n\
    \    end\n    return result\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjjss8ee5.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjjss8ee5.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjjss8ee5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjjss8ee5.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjjss8ee5.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjjss8ee5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjjss8ee5.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjjss8ee5.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjjss8ee5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjjss8ee5.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjjss8ee5.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjjss8ee5.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjjss8ee5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, ' ')\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpmkhk2qxs.jl:18\nin expression\
    \ starting at /tmp/tmpmkhk2qxs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1xtucvkl.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1xtucvkl.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1xtucvkl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1xtucvkl.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1xtucvkl.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1xtucvkl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1xtucvkl.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1xtucvkl.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1xtucvkl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1xtucvkl.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1xtucvkl.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1xtucvkl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1xtucvkl.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp1xtucvkl.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1xtucvkl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    # hint: you may want to use a regexp\n    # hint: you may want\
    \ to use a dictionary\n    # hint: you may want to use a map function\n    # hint:\
    \ you may want to use a split function\n    # hint: you may want to use a parse\
    \ function\n    # hint: you may want to use a try/catch block\n    # hint: you\
    \ may want to use a vector\n    # hint: you may want to use a for loop\n    #\
    \ hint: you may want to use a push! function\n    # hint: you may want to use\
    \ a join function\n    # hint: you may want to use a parse function\n    # hint:\
    \ you may want to use a try/catch block\n    # hint: you may want to use a vector\n\
    \    # hint: you may want to use a for loop\n    # hint: you may want to use a\
    \ push! function\n    # hint: you may want to use a join function\n    # hint:\
    \ you may want to use a parse function\n    # hint: you may want to use a try/catch\
    \ block\n    # hint: you may want to use a vector\n    # hint: you may want to\
    \ use a for loop\n    # hint: you may want to use a push! function\n    # hint:\
    \ you may want to use a join function\n    # hint: you may want to use a parse\
    \ function\n    # hint: you may want to use a try/catch block\n    # hint: you\
    \ may want to use a vector\n    # hint: you may want to use a for loop\n    #\
    \ hint: you may want to use a push! function\n    # hint: you may want to use\
    \ a join function\n    # hint: you may want to use a parse function\n    # hint:\
    \ you may want to use a try/catch block\n    # hint: you may want to use a vector\n\
    \    # hint: you may want to use a for loop\n    # hint: you may want to use a\
    \ push! function\n    # hint: you may want to use a join function\n    # hint:\
    \ you may want to use a parse function\n    # hint: you may want to use a try/catch\
    \ block\n    # hint: you may want to use a vector\n    # hint: you may want to\
    \ use a for loop\n\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpybgcxxte.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpybgcxxte.jl:1\n\
    in expression starting at /tmp/tmpybgcxxte.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use the following function to convert a character to a note\
    \ duration:\n    # note_to_duration(note::Char) = ...\n    # You can use the following\
    \ function to convert a note duration to a number of beats:\n    # duration_to_beats(duration::Int64)\
    \ = ...\n    # You can use the following function to convert a note duration to\
    \ a number of beats:\n    # duration_to_beats(duration::Int64) = ...\n    # You\
    \ can use the following function to convert a note duration to a number of beats:\n\
    \    # duration_to_beats(duration::Int64) = ...\n    # You can use the following\
    \ function to convert a note duration to a number of beats:\n    # duration_to_beats(duration::Int64)\
    \ = ...\n    # You can use the following function to convert a note duration to\
    \ a number of beats:\n    # duration_to_beats(duration::Int64) = ...\n    # You\
    \ can use the following function to convert a note duration to a number of beats:\n\
    \    # duration_to_beats(duration::Int64) = ...\n    # You can use the following\
    \ function to convert a note duration to a number of beats:\n    # duration_to_beats(duration::Int64)\
    \ = ...\n    # You can use the following function to convert a note duration to\
    \ a number of beats:\n    # duration_to_beats(duration::Int64) = ...\n    # You\
    \ can use the following function to convert a note duration to a number of beats:\n\
    \    # duration_to_beats(duration::Int64) = ...\n    # You can use the following\
    \ function to convert a note duration to a number of beats:\n    # duration_to_beats(duration::Int64)\
    \ = ...\n    # You can use the following function to convert a note duration to\
    \ a number of beats:\n    # duration_to_beats(duration::Int64) = ...\n    # You\
    \ can use the following function to convert a note duration to a number of beats:\n\
    \    # duration_to_beats(duration::Int64) = ...\n    # You can use the following\
    \ function to convert a note duration to a number of beats:\n    # duration_to_beats\n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuu1ycil4.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpuu1ycil4.jl:1\n\
    in expression starting at /tmp/tmpuu1ycil4.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_txoz0le.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp_txoz0le.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp_txoz0le.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_txoz0le.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_txoz0le.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp_txoz0le.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp_txoz0le.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_txoz0le.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_txoz0le.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use the following code to convert a character to an integer\n\
    \    # int('o')\n    # int('|')\n    # int('.')\n    # int(' ')\n    # int('\\\
    n')\n    # int('\\t')\n    # int('\\r')\n    # int('\\f')\n    # int('\\v')\n\
    \    # int('\\b')\n    # int('\\a')\n    # int('\\0')\n    # int('\\x1b')\n  \
    \  # int('\\u2713')\n    # int('\\U0001f600')\n    # int('\\cH')\n    # int('\\\
    123')\n    # int('\\o')\n    # int('\\x')\n    # int('\\u')\n    # int('\\U')\n\
    \    # int('\\')\n    # int('\\c')\n    # int('\\')\n    # int('\\')\n    # int('\\\
    ')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    #\
    \ int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\\
    ')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    #\
    \ int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\\
    ')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    #\
    \ int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\\
    ')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    #\
    \ int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\\
    ')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n    # int('\\')\n   \n\
    using Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp88qzcnqp.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp88qzcnqp.jl:1\n\
    in expression starting at /tmp/tmp88qzcnqp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, ' ')\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb8lttzno.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpb8lttzno.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpb8lttzno.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb8lttzno.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpb8lttzno.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpb8lttzno.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpb8lttzno.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb8lttzno.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpb8lttzno.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpce6h73ci.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpce6h73ci.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpce6h73ci.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpce6h73ci.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpce6h73ci.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpce6h73ci.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpce6h73ci.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpce6h73ci.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpce6h73ci.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo8x11mcu.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpo8x11mcu.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8x11mcu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo8x11mcu.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpo8x11mcu.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8x11mcu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo8x11mcu.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpo8x11mcu.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8x11mcu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo8x11mcu.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo8x11mcu.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8x11mcu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo8x11mcu.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpo8x11mcu.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo8x11mcu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt4_0a47_.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpt4_0a47_.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpt4_0a47_.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt4_0a47_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpt4_0a47_.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpt4_0a47_.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpt4_0a47_.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt4_0a47_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpt4_0a47_.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmp5fbgobgs.jl:18\nin expression\
    \ starting at /tmp/tmp5fbgobgs.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpixkpibb9.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpixkpibb9.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpixkpibb9.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpixkpibb9.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpixkpibb9.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpixkpibb9.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpixkpibb9.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpixkpibb9.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpixkpibb9.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkcai10el.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpkcai10el.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpkcai10el.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkcai10el.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpkcai10el.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpkcai10el.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpkcai10el.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkcai10el.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpkcai10el.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdq81v0fx.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpdq81v0fx.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpdq81v0fx.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdq81v0fx.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpdq81v0fx.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpdq81v0fx.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpdq81v0fx.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdq81v0fx.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpdq81v0fx.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = replace(music_string, \"o|\", \"|\")\n    music_string = replace(music_string,\
    \ \"o\", \"|\")\n    music_string = replace(music_string, \".\", \"|\")\n    music_string\
    \ = replace(music_string, \" \", \"\")\n    return map(x -> parse(Int64, x), split(music_string,\
    \ \"|\"))\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpriixyz6d.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\\n  Closest candidates\
    \ are:\\n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\\
    n    replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_music(music_string::String)\\n     @ Main /tmp/tmpriixyz6d.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpriixyz6d.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpriixyz6d.jl:24\\ntest set:\
    \ Error During Test at /tmp/tmpriixyz6d.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\\
    n    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpriixyz6d.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpriixyz6d.jl:26\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/t"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use the following function to convert a character to a number\n\
    \    # parse(Int64, '4')\n    # 4\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o' in \"o\"\n    # parse(Int64, 'o')\n    # ERROR: ArgumentError:\
    \ invalid base 10 digit 'o\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqfylncoz.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpqfylncoz.jl:1\n\
    in expression starting at /tmp/tmpqfylncoz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for i in music_string\n        if i == 'o'\n            push!(beats,\
    \ 4)\n        elseif i == 'o|'\n            push!(beats, 2)\n        elseif i\
    \ == '.|'\n            push!(beats, 1)\n        end\n    end\n    return beats\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmpk1mu2uwh.jl:18\nin expression\
    \ starting at /tmp/tmpk1mu2uwh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3q1a3f2j.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp3q1a3f2j.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp3q1a3f2j.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3q1a3f2j.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp3q1a3f2j.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp3q1a3f2j.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp3q1a3f2j.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3q1a3f2j.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp3q1a3f2j.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqmw71wr2.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpqmw71wr2.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpqmw71wr2.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqmw71wr2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqmw71wr2.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpqmw71wr2.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpqmw71wr2.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqmw71wr2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqmw71wr2.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp65bn_7st.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp65bn_7st.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp65bn_7st.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp65bn_7st.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp65bn_7st.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp65bn_7st.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp65bn_7st.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp65bn_7st.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp65bn_7st.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6xa_urz4.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6xa_urz4.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6xa_urz4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6xa_urz4.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6xa_urz4.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6xa_urz4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6xa_urz4.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6xa_urz4.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6xa_urz4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6xa_urz4.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6xa_urz4.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6xa_urz4.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6xa_urz4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpirt67kw8.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpirt67kw8.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpirt67kw8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpirt67kw8.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpirt67kw8.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpirt67kw8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpirt67kw8.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpirt67kw8.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpirt67kw8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpirt67kw8.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpirt67kw8.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpirt67kw8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpirt67kw8.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpirt67kw8.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpirt67kw8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwpnmzv_k.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwpnmzv_k.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwpnmzv_k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwpnmzv_k.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwpnmzv_k.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwpnmzv_k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwpnmzv_k.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpwpnmzv_k.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwpnmzv_k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwpnmzv_k.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwpnmzv_k.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwpnmzv_k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwpnmzv_k.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwpnmzv_k.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwpnmzv_k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcoah3zaj.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpcoah3zaj.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpcoah3zaj.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcoah3zaj.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpcoah3zaj.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpcoah3zaj.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpcoah3zaj.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcoah3zaj.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpcoah3zaj.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use the following code to test your solution:\n    # run_tests(parse_music)\n\
    \    # You can also use the following code to test your solution:\n    # @testset\
    \ \"parse_music\" begin\n    #     @test parse_music(\"o o| .| o| o| .| .| .|\
    \ .| o o\") == [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    # end\n    #\n    #\n  \
    \  #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n \
    \   #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n\
    \    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\n    #\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp85dcakxj.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp85dcakxj.jl:1\n\
    in expression starting at /tmp/tmp85dcakxj.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc34oykjp.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpc34oykjp.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc34oykjp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc34oykjp.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpc34oykjp.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc34oykjp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc34oykjp.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpc34oykjp.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc34oykjp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc34oykjp.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc34oykjp.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc34oykjp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpc34oykjp.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpc34oykjp.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc34oykjp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in music_string\n        if note == 'o'\n            push!(beats,\
    \ 4)\n        elseif note == 'o|'\n            push!(beats, 2)\n        elseif\
    \ note == '.|'\n            push!(beats, 1)\n        end\n    end\n    return\
    \ beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: character literal contains multiple characters\n\
    Stacktrace:\n [1] top-level scope\n   @ /tmp/tmporn3ar5g.jl:18\nin expression\
    \ starting at /tmp/tmporn3ar5g.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use split(music_string, ' ') to split the string into a\
    \ vector of strings\n    # representing individual notes.\n    # You can use the\
    \ length() function to get the length of a vector.\n    # You can use the push!()\
    \ function to append elements to a vector.\n    # You can use the parse(Int64,\
    \ ...) function to convert a string to an integer.\n    # You can use the parse(Float64,\
    \ ...) function to convert a string to a floating point number.\n    # You can\
    \ use the isequal() function to compare two strings.\n    # You can use the isequal()\
    \ function to compare two integers.\n    # You can use the isequal() function\
    \ to compare two floating point numbers.\n    # You can use the isequal() function\
    \ to compare two vectors.\n    # You can use the isequal() function to compare\
    \ two booleans.\n    # You can use the isequal() function to compare two characters.\n\
    \    # You can use the isequal() function to compare two dictionaries.\n    #\
    \ You can use the isequal() function to compare two tuples.\n    # You can use\
    \ the isequal() function to compare two sets.\n    # You can use the isequal()\
    \ function to compare two functions.\n    # You can use the isequal() function\
    \ to compare two objects.\n    # You can use the isequal() function to compare\
    \ two ranges.\n    # You can use the isequal() function to compare two channels.\n\
    \    # You can use the isequal() function to compare two iterators.\n    # You\
    \ can use the isequal() function to compare two generators.\n    # You can use\
    \ the isequal() function to compare two tasks.\n    # You can use the isequal()\
    \ function to compare two channels.\n    # You can use the isequal() function\
    \ to compare two iterators.\n    # You can use the isequal() function to compare\
    \ two generators.\n    # You can use the isequal() function to compare two tasks.\n\
    \    # You can use the isequal() function to compare two channels.\n    # You\
    \ can use the isequal() function to compare two iterators.\n    # You can use\
    \ the isequal() function to compare two generators.\n    # You can use the isequal()\
    \ function to compare two\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbfci3jof.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpbfci3jof.jl:1\n\
    in expression starting at /tmp/tmpbfci3jof.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyojqliog.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyojqliog.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyojqliog.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyojqliog.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyojqliog.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyojqliog.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyojqliog.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyojqliog.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyojqliog.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpyojqliog.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyojqliog.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyojqliog.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyojqliog.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, ' ')\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, ' ')\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = split(music_string, \" \")\n    beats = []\n    for i in music_string\n  \
    \      if i == \"o\"\n            push!(beats, 4)\n        elseif i == \"o|\"\n\
    \            push!(beats, 2)\n        elseif i == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp44ekw4ey.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp44ekw4ey.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp44ekw4ey.jl:21\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp44ekw4ey.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp44ekw4ey.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmp44ekw4ey.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp44ekw4ey.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp44ekw4ey.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp44ekw4ey.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\n    # Hint: you can use `split` function to split a string into a list\
    \ of substrings\n    # Hint: you can use `push!` function to append an element\
    \ to the end of a list\n    # Hint: you can use `parse(Int64, \"1\")` to convert\
    \ a string \"1\" to an integer 1\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpew02hjir.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpew02hjir.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpew02hjir.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpew02hjir.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpew02hjir.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpew02hjir.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpew02hjir.jl:25\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpew02hjir.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpew02hjir.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = replace(music_string, \"o|\", \"|\")\n    music_string = replace(music_string,\
    \ \"o\", \"|\")\n    music_string = replace(music_string, \".\", \"|\")\n    music_string\
    \ = replace(music_string, \" \", \"\")\n    music_string = replace(music_string,\
    \ \"|\", \" \")\n    music_string = split(music_string)\n    music_string = parse.(Int64,\
    \ music_string)\n    return music_string\nend\nusing Test\n\n@testset begin\n\n\
    candidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"\
    o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\
    \t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"\
    o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv66tfpxx.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ no method matching replace(::String, ::String, ::String)\\n  Closest candidates\
    \ are:\\n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\\
    n    replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] parse_music(music_string::String)\\n     @ Main /tmp/tmpv66tfpxx.jl:14\\\
    n   [2] macro expansion\\n     @ /tmp/tmpv66tfpxx.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv66tfpxx.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpv66tfpxx.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: no method matching replace(::String,\
    \ ::String, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\\
    n    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpv66tfpxx.jl:14\\n   [2] macro expansion\\n     @ /tmp/tmpv66tfpxx.jl:29\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/t"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\n \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzmk7kvm7.jl:22\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Vector{Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::AbstractArray) where\
    \ T<:Array at array.jl:532\\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpzmk7kvm7.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpzmk7kvm7.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzmk7kvm7.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpzmk7kvm7.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\\n  MethodError: Cannot `convert` an\
    \ object of type Nothing to an object of type Vector{Int64}\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\\\
    n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\\\
    n    ...\\n  Stacktrace:\\n   [1] parse_music(music_string::String)\\n     @ Main\
    \ /tmp/tmpzmk7kvm7.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpzmk7kvm7.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzmk7kvm7.jl:21\\ntest set:\
    \ Error During Test at /tmp/tmpzmk7kvm7.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(\".| .| .|"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6_3h0j7r.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6_3h0j7r.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6_3h0j7r.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6_3h0j7r.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6_3h0j7r.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6_3h0j7r.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6_3h0j7r.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp6_3h0j7r.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6_3h0j7r.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6_3h0j7r.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6_3h0j7r.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6_3h0j7r.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6_3h0j7r.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp6_3h0j7r.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_3h0j7r.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You can use the following code to get started:\n    # return [4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    notes = split(music_string, \" \")\n    beats\
    \ = []\n    for note in notes\n        if note == \"o\"\n            push!(beats,\
    \ 4)\n        elseif note == \"o|\"\n            push!(beats, 2)\n        elseif\
    \ note == \".|\"\n            push!(beats, 1)\n        end\n    end\n    return\
    \ beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw2f9og_7.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2f9og_7.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2f9og_7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw2f9og_7.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2f9og_7.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2f9og_7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw2f9og_7.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2f9og_7.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2f9og_7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw2f9og_7.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw2f9og_7.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw2f9og_7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpw2f9og_7.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpw2f9og_7.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw2f9og_7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    music_string\
    \ = replace(music_string, \" \" => \"\")\n    music_string = replace(music_string,\
    \ \"o\" => \"o|\")\n    music_string = replace(music_string, \"|\" => \"\")\n\
    \    music_string = replace(music_string, \"o\" => \"4\")\n    music_string =\
    \ replace(music_string, \".\" => \"1\")\n    music_string = split(music_string,\
    \ \"\")\n    music_string = parse.(Int64, music_string)\n    return music_string\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpleuvlo57.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"\") == Vector{Int64}([])\\n  ArgumentError:\
    \ input string is empty or only contains whitespace\\n  Stacktrace:\\n    [1]\
    \ tryparse_internal(#unused#::Type{Int64}, s::SubString{String}, startpos::Int64,\
    \ endpos::Int64, base_::Int64, raise::Bool)\\n      @ Base ./parse.jl:109\\n \
    \   [2] parse(::Type{Int64}, s::SubString{String}; base::Nothing)\\n      @ Base\
    \ ./parse.jl:241\\n    [3] parse\\n      @ ./parse.jl:241 [inlined]\\n    [4]\
    \ _broadcast_getindex_evalf\\n      @ ./broadcast.jl:648 [inlined]\\n    [5] _broadcast_getindex\\\
    n      @ ./broadcast.jl:631 [inlined]\\n    [6] getindex\\n      @ ./broadcast.jl:575\
    \ [inlined]\\n    [7] macro expansion\\n      @ ./broadcast.jl:984 [inlined]\\\
    n    [8] macro expansion\\n      @ ./simdloop.jl:77 [inlined]\\n    [9] copyto!\\\
    n      @ ./broadcast.jl:983 [inlined]\\n   [10] copyto!\\n      @ ./broadcast.jl:936\
    \ [inlined]\\n   [11] copy\\n      @ ./broadcast.jl:908 [inlined]\\n   [12] materialize\\\
    n      @ ./broadcast.jl:883 [inlined]\\n   [13] parse_music(music_string::String)\\\
    n      @ Main /tmp/tmpleuvlo57.jl:20\\n   [14] macro expansion\\n      @ /tmp/tmpleuvlo57.jl:28\
    \ [inlined]\\n   [15] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [16] top-level scope\\n      @ /tmp/tmpleuvlo57.jl:27\\ntest\
    \ set: Test Failed at /tmp/tmpleuvlo57.jl:31\\n  Expression: candidate(\"o| o|\
    \ .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\\n   Evaluated: [4, 4, 1, 1, 4,\
    \ 4, 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\\nStacktrace:\\n [1] '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    return [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\
    \t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .|\
    \ .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2,\
    \ 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2,\
    \ 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpquanubya.jl:22\n  Expression: candidate(\"\
    \") == Vector{Int64}([])\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == Int64[]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpquanubya.jl:22 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpquanubya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpquanubya.jl:23\n  Expression: candidate(\"o o o o\") == [4,\
    \ 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [4, 4, 4, 4]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpquanubya.jl:23 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpquanubya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpquanubya.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4] == [1, 1, 1, 1]\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpquanubya.jl:24 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpquanubya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpquanubya.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1, 1,\
    \ 4, 4] == [2, 2, 1, 1, 4, 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpquanubya.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpquanubya.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpquanubya.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: [4, 2, 1, 2, 2, 1, 1, 1,\
    \ 1, 4, 4] == [2, 1, 2, 1, 4, 2, 4, 2]\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpquanubya.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Tes"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpquanubya.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string)\n        if note == \"o\"\n        \
    \    push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    result =\
    \ []\n    for i in 1:length(music_string)\n        if music_string[i] == 'o'\n\
    \            if i == length(music_string) || music_string[i+1] != '|'\n      \
    \          push!(result, 4)\n            else\n                push!(result, 2)\n\
    \                i += 1\n            end\n        elseif music_string[i] == '.'\n\
    \            push!(result, 1)\n            i += 1\n        end\n    end\n    return\
    \ result\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\n    return []\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy9k1qlqa.jl:23\n  Expression: candidate(\"\
    o o o o\") == [4, 4, 4, 4]\n   Evaluated: Int64[] == [4, 4, 4, 4]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy9k1qlqa.jl:23 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9k1qlqa.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy9k1qlqa.jl:24\n  Expression: candidate(\".| .| .| .|\") ==\
    \ [1, 1, 1, 1]\n   Evaluated: Int64[] == [1, 1, 1, 1]\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy9k1qlqa.jl:24 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9k1qlqa.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy9k1qlqa.jl:25\n  Expression: candidate(\"o| o| .| .| o o\
    \ o o\") == [2, 2, 1, 1, 4, 4, 4, 4]\n   Evaluated: Int64[] == [2, 2, 1, 1, 4,\
    \ 4, 4, 4]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy9k1qlqa.jl:25 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9k1qlqa.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy9k1qlqa.jl:26\n  Expression: candidate(\"o| .| o| .| o o|\
    \ o o|\") == [2, 1, 2, 1, 4, 2, 4, 2]\n   Evaluated: Int64[] == [2, 1, 2, 1, 4,\
    \ 2, 4, 2]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy9k1qlqa.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9k1qlqa.jl:21\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy9k1qlqa.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, \" \")\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\n    # You can use the following function to convert a character to a number\n\
    \    # parse(Int64, 'o')\n    # parse(Int64, 'o|')\n    # parse(Int64, '.|')\n\
    \    # parse(Int64, 'o')\n    # parse(Int64, 'o|')\n    # parse(Int64, '.|')\n\
    \    # parse(Int64, 'o|')\n    # parse(Int64, 'o|')\n    # parse(Int64, '.|')\n\
    \    # parse(Int64, '.|')\n    # parse(Int64, '.|')\n    # parse(Int64, '.|')\n\
    \    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n \
    \   # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n  \
    \  # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n   \
    \ # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    #\
    \ parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64,\
    \ 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n\
    \    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n \
    \   # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n  \
    \  # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n   \
    \ # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    # parse(Int64, 'o')\n    #\
    \ parse(Int64, 'o')\n   \nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpiy42wty3.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpiy42wty3.jl:1\n\
    in expression starting at /tmp/tmpiy42wty3.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    notes = split(music_string, \" \")\n    beats = []\n    for note in\
    \ notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    notes = split(music_string, ' ')\n    beats = []\n    for note\
    \ in notes\n        if note == \"o\"\n            push!(beats, 4)\n        elseif\
    \ note == \"o|\"\n            push!(beats, 2)\n        elseif note == \".|\"\n\
    \            push!(beats, 1)\n        end\n    end\n    return beats\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\")\
    \ == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\"\
    .| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") ==\
    \ [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2,\
    \ 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpik11qpoa.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpik11qpoa.jl:15\n   [2] macro expansion\n     @ /tmp/tmpik11qpoa.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpik11qpoa.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpik11qpoa.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmpik11qpoa.jl:15\n   [2] macro expansion\n     @ /tmp/tmpik11qpoa.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpik11qpoa.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpik11qpoa.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Can"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpik11qpoa.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmps2l229a_.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmps2l229a_.jl:15\n   [2] macro expansion\n     @ /tmp/tmps2l229a_.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps2l229a_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmps2l229a_.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmps2l229a_.jl:15\n   [2] macro expansion\n     @ /tmp/tmps2l229a_.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmps2l229a_.jl:20\ntest set:\
    \ Error During Test at /tmp/tmps2l229a_.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Can"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps2l229a_.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # your code\
    \ goes here\n    # you can use any other functions you want\n    # you can use\
    \ any other data structures you want\n    # you can use any other packages you\
    \ want\n    # you can use any other language features you want\n    # you can\
    \ use any other language you want\n    # you can use any other compiler you want\n\
    \    # you can use any other operating system you want\n    # you can use any\
    \ other hardware you want\n    # you can use any other universe you want\n   \
    \ # you can use any other dimension you want\n    # you can use any other time\
    \ you want\n    # you can use any other space you want\n    # you can use any\
    \ other matter you want\n    # you can use any other energy you want\n    # you\
    \ can use any other force you want\n    # you can use any other information you\
    \ want\n    # you can use any other life you want\n    # you can use any other\
    \ intelligence you want\n    # you can use any other consciousness you want\n\
    \    # you can use any other soul you want\n    # you can use any other god you\
    \ want\n    # you can use any other universe you want\n    # you can use any other\
    \ dimension you want\n    # you can use any other time you want\n    # you can\
    \ use any other space you want\n    # you can use any other matter you want\n\
    \    # you can use any other energy you want\n    # you can use any other force\
    \ you want\n    # you can use any other information you want\n    # you can use\
    \ any other life you want\n    # you can use any other intelligence you want\n\
    \    # you can use any other consciousness you want\n    # you can use any other\
    \ soul you want\n    # you can use any other god you want\n    # you can use any\
    \ other universe you want\n    # you can use any other dimension you want\n  \
    \  # you can use any other time you want\n    # you can use any other space you\
    \ want\n    # you can use any other matter you want\n    # you can use any other\
    \ energy you want\n    # you can use any other force you want\n    # you can use\
    \ any other information you want\n    # you can use any other life you want\n\
    \    # you can use any other intelligence you want\n    # you can use any other\
    \ consciousness you want\n    # you can use any\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5smauyy0.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmp5smauyy0.jl:1\n\
    in expression starting at /tmp/tmp5smauyy0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    notes =\
    \ split(music_string, \" \")\n    beats = []\n    for note in notes\n        if\
    \ note == \"o\"\n            push!(beats, 4)\n        elseif note == \"o|\"\n\
    \            push!(beats, 2)\n        elseif note == \".|\"\n            push!(beats,\
    \ 1)\n        end\n    end\n    return beats\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = parse_music;\n\t@test(candidate(\"\") == Vector{Int64}([]))\n\t\
    @test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\"\
    ) == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .| .| o o o o\") == [2, 2, 1, 1,\
    \ 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .| o o| o o|\") == [2, 1, 2, 1, 4,\
    \ 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    beats =\
    \ []\n    for note in split(music_string, \" \")\n        if note == \"o\"\n \
    \           push!(beats, 4)\n        elseif note == \"o|\"\n            push!(beats,\
    \ 2)\n        elseif note == \".|\"\n            push!(beats, 1)\n        end\n\
    \    end\n    return beats\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\
    \t@test(candidate(\"\") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\")\
    \ == [4, 4, 4, 4])\n\t@test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"\
    o| o| .| .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .|\
    \ o| .| o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    5      5\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # YOUR CODE\
    \ HERE\n    # You may find `split` function useful\n    # https://docs.julialang.org/en/v1/base/strings/#Base.split\n\
    \    # You may also find `parse` function useful\n    # https://docs.julialang.org/en/v1/base/strings/#Base.parse\n\
    \    # You may also find `replace` function useful\n    # https://docs.julialang.org/en/v1/base/strings/#Base.replace\n\
    \    # You may also find `map` function useful\n    # https://docs.julialang.org/en/v1/base/collections/#Base.map\n\
    \    # You may also find `repeat` function useful\n    # https://docs.julialang.org/en/v1/base/arrays/#Base.repeat\n\
    \    # You may also find `collect` function useful\n    # https://docs.julialang.org/en/v1/base/arrays/#Base.collect\n\
    \    # You may also find `reduce` function useful\n    # https://docs.julialang.org/en/v1/base/collections/#Base.reduce\n\
    \    # You may also find `+` function useful\n    # https://docs.julialang.org/en/v1/base/math/#Base.+\n\
    \    # You may also find `parse` function useful\n    # https://docs.julialang.org/en/v1/base/strings/#Base.parse\n\
    \    # You may also find `replace` function useful\n    # https://docs.julialang.org/en/v1/base/strings/#Base.replace\n\
    \    # You may also find `map` function useful\n    # https://docs.julialang.org/en/v1/base/collections/#Base.map\n\
    \    # You may also find `repeat` function useful\n    # https://docs.julialang.org/en/v1/base/arrays/#Base.repeat\n\
    \    # You may also find `collect` function useful\n    # https://docs.julialang.org/en/v1/base/arrays/#Base.collect\n\
    \    # You\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpif4pfeno.jl:13\
    \ requires end\nStacktrace:\n [1] top-level scope\n   @ /tmp/tmpif4pfeno.jl:1\n\
    in expression starting at /tmp/tmpif4pfeno.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" Input to this function is a string representing musical notes in\
    \ a special ASCII format.\n    Your task is to parse this string and return list\
    \ of integers corresponding to how many beats does each\n    not last.\n\n   \
    \ Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note,\
    \ lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o\
    \ o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\
    \"\"\nfunction parse_music(music_string::String)::Vector{Int64} \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = parse_music;\n\t@test(candidate(\"\
    \") == Vector{Int64}([]))\n\t@test(candidate(\"o o o o\") == [4, 4, 4, 4])\n\t\
    @test(candidate(\".| .| .| .|\") == [1, 1, 1, 1])\n\t@test(candidate(\"o| o| .|\
    \ .| o o o o\") == [2, 2, 1, 1, 4, 4, 4, 4])\n\t@test(candidate(\"o| .| o| .|\
    \ o o| o o|\") == [2, 1, 2, 1, 4, 2, 4, 2])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp40mfdbz3.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Vector{Int64}([])\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Vector{Int64}\n  Closest candidates\
    \ are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp40mfdbz3.jl:15\n   [2] macro expansion\n     @ /tmp/tmp40mfdbz3.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp40mfdbz3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp40mfdbz3.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"o o o o\") == [4, 4, 4, 4]\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Vector{Int64}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:532\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/LinearAlgebra/src/factorization.jl:58\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] parse_music(music_string::String)\n     @ Main\
    \ /tmp/tmp40mfdbz3.jl:15\n   [2] macro expansion\n     @ /tmp/tmp40mfdbz3.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp40mfdbz3.jl:20\ntest set:\
    \ Error During Test at /tmp/tmp40mfdbz3.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\".| .| .| .|\") == [1, 1, 1, 1]\n  MethodError: Can"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp40mfdbz3.jl:18\n"
  exit_code: 1
  status: SyntaxError
