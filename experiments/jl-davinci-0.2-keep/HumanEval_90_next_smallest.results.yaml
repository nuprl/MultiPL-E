name: HumanEval_90_next_smallest
language: julia
results:
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    sort!(lst)\n    return lst[2]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvxb451fn.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpvxb451fn.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvxb451fn.jl:21\ntest set: Test Failed at /tmp/tmpvxb451fn.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvxb451fn.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvxb451fn.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvxb451fn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpappo3jng.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpappo3jng.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpappo3jng.jl:21\ntest set: Test Failed at /tmp/tmpappo3jng.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpappo3jng.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpappo3jng.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpappo3jng.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_y4p7yi7.jl:45\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp_y4p7yi7.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_y4p7yi7.jl:43\ntest set: Test Failed at /tmp/tmp_y4p7yi7.jl:48\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_y4p7yi7.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_y4p7yi7.jl:43\ntest set: Test Failed at /tmp/tmp_y4p7yi7.jl:50\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_y4p7yi7.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_y4p7yi7.jl:43\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_y4p7yi7.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1uzmqw6l.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp1uzmqw6l.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1uzmqw6l.jl:21\ntest set: Test Failed at /tmp/tmp1uzmqw6l.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1uzmqw6l.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1uzmqw6l.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1uzmqw6l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2ynflix0.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp2ynflix0.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2ynflix0.jl:21\\ntest set: Test Failed at /tmp/tmp2ynflix0.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp2ynflix0.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2ynflix0.jl:21\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     2      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr0sm6smj.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpr0sm6smj.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0sm6smj.jl:21\ntest set: Test Failed at /tmp/tmpr0sm6smj.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr0sm6smj.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0sm6smj.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0sm6smj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv4vfhja7.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpv4vfhja7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv4vfhja7.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa8_75tzm.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpa8_75tzm.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa8_75tzm.jl:21\ntest set: Test Failed at /tmp/tmpa8_75tzm.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa8_75tzm.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa8_75tzm.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa8_75tzm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfpz6ie8e.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpfpz6ie8e.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfpz6ie8e.jl:21\ntest set: Test Failed at /tmp/tmpfpz6ie8e.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfpz6ie8e.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfpz6ie8e.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfpz6ie8e.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    sorted_lst = sort(lst)\n    return sorted_lst[2]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            if lst[1] <\
    \ lst[2]\n                return lst[1]\n            end\n            if lst[1]\
    \ > lst[2]\n                return lst[2]\n            end\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n        if lst[1] != lst[2]\n            if lst[1] < lst[2]\n  \
    \              return lst[1]\n            end\n            if lst[1] > lst[2]\n\
    \                return lst[2]\n            end\n        end\n    end\n    if\
    \ length(lst) > 2\n        if lst[1] != lst[2]\n            if lst[1] < lst[2]\n\
    \                for i in 3:length(lst)\n                    if lst[i] < lst[2]\n\
    \                        return lst[i]\n                    end\n            \
    \    end\n            end\n            if lst[1] > lst[2]\n                for\
    \ i in 3:length(lst)\n                    if lst[i] < lst[1]\n               \
    \         return lst[i]\n                    end\n                end\n      \
    \      end\n        end\n    end\n    if length(lst) > 2\n        if lst[1] ==\
    \ lst[2]\n            for i in 3:length(lst)\n                if lst[i] != lst[1]\n\
    \                    return lst[i]\n                end\n            end\n   \
    \     end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4yumftvq.jl:79\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp4yumftvq.jl:79\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4yumftvq.jl:78\ntest set: Test Failed at /tmp/tmp4yumftvq.jl:80\n\
    \  Expression: candidate([5, 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4yumftvq.jl:80\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4yumftvq.jl:78\ntest set: Test Failed at /tmp/tmp4yumftvq.jl:83\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4yumftvq.jl:83\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4yumftvq.jl:78\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4yumftvq.jl:76\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    min = lst[1]\n    min2 = lst[2]\n    for i in lst\n        if i < min\n \
    \           min2 = min\n            min = i\n        end\n        if i < min2\
    \ && i > min\n            min2 = i\n        end\n    end\n    return min2\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ minimum(lst[lst .!= minimum(lst)])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbjif7esd.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\\\
    n   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\\n   [9] _minimum at ./reducedim.jl:656 [inlined]\\\
    n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmpbjif7esd.jl:15\\\
    n   [13] top-level scope at /tmp/tmpbjif7esd.jl:25\\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [15] top-level scope at /tmp/tmpbjif7esd.jl:21\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpbjif7esd.jl:27\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n  ArgumentError: reducing over an empty collection is not allowed\\\
    n  Stacktrace:\\n   [1] _empty_reduce_error() at ./reduce.jl:295\\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\\\
    n   [8] _minimum at ./reducedim.jl:657 [inlined]\\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpbjif7esd.jl:15\\n   [13] top-level scope at /tmp/tmpbjif7esd.jl:27\\\
    n   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [15] top-level scope at /tmp/tmpbjif7esd.jl:21\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    5      2      7\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpbjif7esd.jl:19\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpca1eb3nq.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpca1eb3nq.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpca1eb3nq.jl:21\ntest set: Test Failed at /tmp/tmpca1eb3nq.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpca1eb3nq.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpca1eb3nq.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpca1eb3nq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpqpuaagh5.jl:26\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpqpuaagh5.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqpuaagh5.jl:22\\ntest set: Test Failed at /tmp/tmpqpuaagh5.jl:28\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpqpuaagh5.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpqpuaagh5.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     2      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    sorted_lst = sort(lst)\n    for i in 2:length(sorted_lst)\n    \
    \    if sorted_lst[i] != sorted_lst[i-1]\n            return sorted_lst[i]\n \
    \       end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp_tuy1ap.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpp_tuy1ap.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp_tuy1ap.jl:21\ntest set: Test Failed at /tmp/tmpp_tuy1ap.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp_tuy1ap.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp_tuy1ap.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp_tuy1ap.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpyi0uj4lp.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpyi0uj4lp.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyi0uj4lp.jl:21\\ntest set: Test Failed at /tmp/tmpyi0uj4lp.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpyi0uj4lp.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyi0uj4lp.jl:21\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     2      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsho_g4rr.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpsho_g4rr.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsho_g4rr.jl:21\ntest set: Test Failed at /tmp/tmpsho_g4rr.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsho_g4rr.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsho_g4rr.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsho_g4rr.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxch99721.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpxch99721.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxch99721.jl:22\ntest set: Test Failed at /tmp/tmpxch99721.jl:28\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxch99721.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxch99721.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxch99721.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1c7nsf6t.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp1c7nsf6t.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1c7nsf6t.jl:21\\ntest set: Test Failed at /tmp/tmp1c7nsf6t.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp1c7nsf6t.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1c7nsf6t.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9cav020z.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp9cav020z.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9cav020z.jl:22\ntest set: Test Failed at /tmp/tmp9cav020z.jl:28\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9cav020z.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9cav020z.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9cav020z.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7rxp0h32.jl:45\\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp7rxp0h32.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7rxp0h32.jl:43\\ntest set: Test Failed at /tmp/tmp7rxp0h32.jl:48\\\
    n  Expression: candidate([1, 1, 1, 1, 0]) == 1\\n   Evaluated: nothing == 1\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp7rxp0h32.jl:48\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7rxp0h32.jl:43\\ntest set: Test Failed at /tmp/tmp7rxp0h32.jl:50\\\
    n  Expression: candidate([-35, 34, 12, -45]) == -35\\n   Evaluated: 34 == -35\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmp7rxp0h32.jl:50\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7rxp0h32.jl:43\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     3      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpszjyhgi4.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpszjyhgi4.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpszjyhgi4.jl:21\ntest set: Test Failed at /tmp/tmpszjyhgi4.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpszjyhgi4.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpszjyhgi4.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpszjyhgi4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg0q2khdl.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpg0q2khdl.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg0q2khdl.jl:21\ntest set: Test Failed at /tmp/tmpg0q2khdl.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg0q2khdl.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg0q2khdl.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg0q2khdl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    for i in 2:length(lst)\n        if lst[i] != lst[i-1]\n            return\
    \ lst[i]\n        end\n    end\n    return nothing\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmveu_9pg.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpmveu_9pg.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmveu_9pg.jl:21\ntest set: Test Failed at /tmp/tmpmveu_9pg.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmveu_9pg.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmveu_9pg.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmveu_9pg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] < lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) == 2\n        if lst[1] > lst[2]\n \
    \           return lst[1]\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] < lst[2]\n            return lst[2]\n        end\n    end\n   \
    \ if length(lst) > 2\n        if lst[1] > lst[2]\n            return lst[1]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return lst[3]\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] == lst[2]\n            return lst[3]\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return lst[3]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return lst[3]\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] == lst[2]\n            return lst[3]\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return lst[3]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return lst[3]\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] == lst[2]\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj5txzlsb.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj5txzlsb.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] < lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) == 2\n        if lst[1] > lst[2]\n \
    \           return lst[1]\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] < lst[2]\n            return lst[2]\n        end\n    end\n   \
    \ if length(lst) > 2\n        if lst[1] > lst[2]\n            return lst[1]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return lst[3]\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] == lst[2]\n            return lst[3]\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return lst[3]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return lst[3]\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] == lst[2]\n            return lst[3]\n        end\n    end\n  \
    \  if length(lst) > 2\n        if lst[1] == lst[2]\n            return lst[3]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return lst[3]\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] == lst[2]\n           \nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw2c0f09y.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw2c0f09y.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy10rjqi9.jl:45\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpy10rjqi9.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy10rjqi9.jl:43\ntest set: Test Failed at /tmp/tmpy10rjqi9.jl:48\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy10rjqi9.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy10rjqi9.jl:43\ntest set: Test Failed at /tmp/tmpy10rjqi9.jl:50\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpy10rjqi9.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy10rjqi9.jl:43\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy10rjqi9.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp46738ax0.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp46738ax0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp46738ax0.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_value\
    \ = minimum(lst)\n    min_index = findall(lst .== min_value)\n    lst[min_index]\
    \ = Inf\n    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoqpjld68.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to many locations is not supported; perhaps\
    \ use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Float64,\
    \ ::Int64) at ./indices.jl:258\\n   [2] macro expansion at ./multidimensional.jl:779\
    \ [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear, ::Array{Int64,1}, ::Float64,\
    \ ::Array{Int64,1}) at ./multidimensional.jl:774\\n   [4] _setindex! at ./multidimensional.jl:769\
    \ [inlined]\\n   [5] setindex! at ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmpoqpjld68.jl:17\\n   [7] top-level scope at /tmp/tmpoqpjld68.jl:25\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmpoqpjld68.jl:24\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpoqpjld68.jl:26\\n  Test threw exception\\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\\\
    n  Stacktrace:\\n   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpoqpjld68.jl:17\\n   [7] top-level scope at /tmp/tmpoqpjld68.jl:26\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmpoqpjld68.jl:24\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpoqpjld68.jl:28\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\\n \
    \ Stacktrace:\\n   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpoqpjld68.jl:17\\n   [7] top-level scope at /tmp/tmpoqpjld68.jl:28\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmpoqpjld68.jl:24\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpoqpjld68.jl:29\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\\\
    n  Stacktrace:\\n   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpoqpjld68.jl:17\\n   [7] top-level scope at /tmp/tmpoqpjld68.jl:29\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmpoqpjld68.jl:24\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpoqpjld68.jl:30\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\\n \
    \ Stacktrace:\\n   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpoqpjld68.jl:17\\n   [7] top-level scope at /tmp/tmpoqpjld68.jl:30\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmpoqpjld68.jl:24\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpoqpjld68.jl:31\\n  Test threw exception\\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\\\
    n  Stacktrace:\\n   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpoqpjld68.jl:17\\n   [7] top-level scope at /tmp/tmpoqpjld68.jl:31\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmpoqpjld68.jl:24\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    1      6      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    smallest\
    \ = minimum(lst)\n    lst = filter(x -> x != smallest, lst)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplhbdyae7.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmplhbdyae7.jl:17\n\
    \   [13] top-level scope at /tmp/tmplhbdyae7.jl:27\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmplhbdyae7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmplhbdyae7.jl:29\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmplhbdyae7.jl:17\n   [13] top-level scope at /tmp/tmplhbdyae7.jl:29\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmplhbdyae7.jl:23\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplhbdyae7.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8buo7xct.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8buo7xct.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8buo7xct.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo3w6xcoo.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpo3w6xcoo.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo3w6xcoo.jl:21\ntest set: Test Failed at /tmp/tmpo3w6xcoo.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo3w6xcoo.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo3w6xcoo.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo3w6xcoo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    smallest\
    \ = lst[1]\n    next_smallest = lst[2]\n    for i in lst[3:end]\n        if i\
    \ < smallest\n            next_smallest = smallest\n            smallest = i\n\
    \        elseif i < next_smallest\n            next_smallest = i\n        end\n\
    \    end\n    return next_smallest\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0uuiznux.jl:33\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp0uuiznux.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0uuiznux.jl:31\ntest set: Test Failed at /tmp/tmp0uuiznux.jl:35\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0uuiznux.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0uuiznux.jl:31\ntest set: Test Failed at /tmp/tmp0uuiznux.jl:37\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0uuiznux.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0uuiznux.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0uuiznux.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp6uzskhui.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp6uzskhui.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6uzskhui.jl:21\\ntest set: Test Failed at /tmp/tmp6uzskhui.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp6uzskhui.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp6uzskhui.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    for i in 2:length(sorted_lst)\n        if sorted_lst[i] !=\
    \ sorted_lst[i-1]\n            return sorted_lst[i]\n        end\n    end\n  \
    \  return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmjmcmlxd.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpmjmcmlxd.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmjmcmlxd.jl:21\ntest set: Test Failed at /tmp/tmpmjmcmlxd.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmjmcmlxd.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmjmcmlxd.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjmcmlxd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    lst = sort(lst)\n    for i in 2:length(lst)\n        if lst[i] !=\
    \ lst[i-1]\n            return lst[i]\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc5ay05lx.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpc5ay05lx.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc5ay05lx.jl:21\ntest set: Test Failed at /tmp/tmpc5ay05lx.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc5ay05lx.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc5ay05lx.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc5ay05lx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    lst = sort(lst)\n    for i in 1:length(lst)-1\n        if lst[i] != lst[i+1]\n\
    \            return lst[i+1]\n        end\n    end\n    return nothing\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvylmy2kc.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpvylmy2kc.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvylmy2kc.jl:21\\ntest set: Test Failed at /tmp/tmpvylmy2kc.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpvylmy2kc.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvylmy2kc.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnopkus47.jl:45\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpnopkus47.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnopkus47.jl:43\ntest set: Test Failed at /tmp/tmpnopkus47.jl:48\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnopkus47.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnopkus47.jl:43\ntest set: Test Failed at /tmp/tmpnopkus47.jl:50\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnopkus47.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnopkus47.jl:43\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnopkus47.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    if lst[1] == lst[2]\n        return nothing\n    end\n    return lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbydlcjc6.jl:45\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpbydlcjc6.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbydlcjc6.jl:43\ntest set: Test Failed at /tmp/tmpbydlcjc6.jl:48\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbydlcjc6.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbydlcjc6.jl:43\ntest set: Test Failed at /tmp/tmpbydlcjc6.jl:50\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbydlcjc6.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbydlcjc6.jl:43\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbydlcjc6.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp21o6gs43.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp21o6gs43.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp21o6gs43.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ minimum(lst[lst .!= minimum(lst)])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp582kyy3o.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmp582kyy3o.jl:15\n\
    \   [13] top-level scope at /tmp/tmp582kyy3o.jl:25\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmp582kyy3o.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp582kyy3o.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp582kyy3o.jl:15\n   [13] top-level scope at /tmp/tmp582kyy3o.jl:27\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmp582kyy3o.jl:21\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp582kyy3o.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    return sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted\
    \ = sort(lst)\n    if sorted[1] == sorted[2]\n        return nothing\n    end\n\
    \    return sorted[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkpgm2a9l.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkpgm2a9l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkpgm2a9l.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_hgi6ffw.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp_hgi6ffw.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_hgi6ffw.jl:21\ntest set: Test Failed at /tmp/tmp_hgi6ffw.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_hgi6ffw.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_hgi6ffw.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_hgi6ffw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd7c7cehp.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd7c7cehp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd7c7cehp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptzqa8a2e.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmptzqa8a2e.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptzqa8a2e.jl:21\ntest set: Test Failed at /tmp/tmptzqa8a2e.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptzqa8a2e.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmptzqa8a2e.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptzqa8a2e.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    sort!(lst)\n    return lst[2]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    for i in 2:length(sorted_lst)\n        if sorted_lst[i] !=\
    \ sorted_lst[i-1]\n            return sorted_lst[i]\n        end\n    end\n  \
    \  return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    sorted_list = sort(lst)\n    return sorted_list[2]\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpu5j5c68j.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpu5j5c68j.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu5j5c68j.jl:21\\ntest set: Test Failed at /tmp/tmpu5j5c68j.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpu5j5c68j.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu5j5c68j.jl:21\\nTest Summary: | Pass  Fail \
    \ Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpulv0h5r9.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpulv0h5r9.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulv0h5r9.jl:21\ntest set: Test Failed at /tmp/tmpulv0h5r9.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpulv0h5r9.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpulv0h5r9.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpulv0h5r9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmph9cgh4lr.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmph9cgh4lr.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph9cgh4lr.jl:21\\ntest set: Test Failed at /tmp/tmph9cgh4lr.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmph9cgh4lr.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph9cgh4lr.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgiaxym7d.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpgiaxym7d.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgiaxym7d.jl:21\\ntest set: Test Failed at /tmp/tmpgiaxym7d.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgiaxym7d.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgiaxym7d.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj3u71x4q.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpj3u71x4q.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj3u71x4q.jl:21\ntest set: Test Failed at /tmp/tmpj3u71x4q.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj3u71x4q.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj3u71x4q.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj3u71x4q.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgmv8gnsb.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpgmv8gnsb.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgmv8gnsb.jl:22\ntest set: Test Failed at /tmp/tmpgmv8gnsb.jl:28\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgmv8gnsb.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgmv8gnsb.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgmv8gnsb.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp845ppvod.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp845ppvod.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp845ppvod.jl:21\ntest set: Test Failed at /tmp/tmp845ppvod.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp845ppvod.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp845ppvod.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp845ppvod.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_val_idx = findall(lst .== min_val)\n    lst_without_min\
    \ = lst[setdiff(1:length(lst), min_val_idx)]\n    return minimum(lst_without_min)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkrh_m4co.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmpkrh_m4co.jl:18\n\
    \   [13] top-level scope at /tmp/tmpkrh_m4co.jl:28\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpkrh_m4co.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpkrh_m4co.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpkrh_m4co.jl:18\n   [13] top-level scope at /tmp/tmpkrh_m4co.jl:30\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpkrh_m4co.jl:24\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkrh_m4co.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq17nbgqk.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpq17nbgqk.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq17nbgqk.jl:21\ntest set: Test Failed at /tmp/tmpq17nbgqk.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq17nbgqk.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq17nbgqk.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq17nbgqk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_idx = findall(lst .== min_val)\n    lst[min_idx] = Inf\n\
    \    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1ci82c_3.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  ArgumentError: indexed assignment\
    \ with a single value to many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Float64, ::Int64)\
    \ at ./indices.jl:258\n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\n\
    \   [3] _unsafe_setindex!(::IndexLinear, ::Array{Int64,1}, ::Float64, ::Array{Int64,1})\
    \ at ./multidimensional.jl:774\n   [4] _setindex! at ./multidimensional.jl:769\
    \ [inlined]\n   [5] setindex! at ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmp1ci82c_3.jl:17\n   [7] top-level scope at /tmp/tmp1ci82c_3.jl:25\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmp1ci82c_3.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp1ci82c_3.jl:26\n  Test threw exception\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp1ci82c_3.jl:17\n   [7] top-level scope at /tmp/tmp1ci82c_3.jl:26\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmp1ci82c_3.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp1ci82c_3.jl:28\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: indexed assignment with a single value to many\
    \ locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp1ci82c_3.jl:17\n   [7] top-level scope at /tmp/tmp1ci82c_3.jl:28\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmp1ci82c_3.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp1ci82c_3.jl:29\n  Test threw exception\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp1ci82c_3.jl:17\n   [7] top-level scope at /tmp/tmp1ci82c_3.jl:29\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmp1ci82c_3.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp1ci82c_3.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: indexed assignment with a single value to many\
    \ locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp1ci82c_3.jl:17\n   [7] top-level scope at /tmp/tmp1ci82c_3.jl:30\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmp1ci82c_3.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp1ci82c_3.jl:31\n  Test threw exception\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\n\
    \  Stacktrace:\n   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\n\
    \   [2] macro expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp1ci82c_3.jl:17\n   [7] top-level scope at /tmp/tmp1ci82c_3.jl:31\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmp1ci82c_3.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ci82c_3.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4qlqbln7.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp4qlqbln7.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qlqbln7.jl:21\ntest set: Test Failed at /tmp/tmp4qlqbln7.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4qlqbln7.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qlqbln7.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4qlqbln7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    next_smallest\
    \ = nothing\n    smallest = lst[1]\n    for i in 2:length(lst)\n        if lst[i]\
    \ < smallest\n            next_smallest = smallest\n            smallest = lst[i]\n\
    \        elseif lst[i] < next_smallest\n            next_smallest = lst[i]\n \
    \       end\n    end\n    return next_smallest\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi8wpzbwk.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  MethodError: no\
    \ method matching isless(::Int64, ::Nothing)\\n  Closest candidates are:\\n  \
    \  isless(!Matched::Missing, ::Any) at missing.jl:87\\n    isless(::Real, !Matched::AbstractFloat)\
    \ at operators.jl:157\\n    isless(::Real, !Matched::Real) at operators.jl:346\\\
    n    ...\\n  Stacktrace:\\n   [1] <(::Int64, ::Nothing) at ./operators.jl:268\\\
    n   [2] next_smallest(::Array{Int64,1}) at /tmp/tmpi8wpzbwk.jl:21\\n   [3] top-level\
    \ scope at /tmp/tmpi8wpzbwk.jl:32\\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpi8wpzbwk.jl:31\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpi8wpzbwk.jl:35\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n  MethodError: no method matching isless(::Int64, ::Nothing)\\\
    n  Closest candidates are:\\n    isless(!Matched::Missing, ::Any) at missing.jl:87\\\
    n    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\\n    ...\\n  Stacktrace:\\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpi8wpzbwk.jl:21\\n   [3] top-level scope at /tmp/tmpi8wpzbwk.jl:35\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpi8wpzbwk.jl:31\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpi8wpzbwk.jl:36\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\\n  MethodError: no method matching isless(::Int64, ::Nothing)\\\
    n  Closest candidates are:\\n    isless(!Matched::Missing, ::Any) at missing.jl:87\\\
    n    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\\n    ...\\n  Stacktrace:\\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpi8wpzbwk.jl:21\\n   [3] top-level scope at /tmp/tmpi8wpzbwk.jl:36\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpi8wpzbwk.jl:31\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpi8wpzbwk.jl:37\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n  MethodError: no method matching isless(::Int64, ::Nothing)\\\
    n  Closest candidates are:\\n    isless(!Matched::Missing, ::Any) at missing.jl:87\\\
    n    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\\n    ...\\n  Stacktrace:\\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpi8wpzbwk.jl:21\\n   [3] top-level scope at /tmp/tmpi8wpzbwk.jl:37\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpi8wpzbwk.jl:31\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpi8wpzbwk.jl:38\\n  Test threw exception\\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\\n  MethodError: no method matching isless(::Int64, ::Nothing)\\\
    n  Closest candidates are:\\n    isless(!Matched::Missing, ::Any) at missing.jl:87\\\
    n    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\\n    ...\\n  Stacktrace:\\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpi8wpzbwk.jl:21\\n   [3] top-level scope at /tmp/tmpi8wpzbwk.jl:38\\\
    n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpi8wpzbwk.jl:31\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    2      5      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphcn365z6.jl:45\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmphcn365z6.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphcn365z6.jl:43\ntest set: Test Failed at /tmp/tmphcn365z6.jl:48\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphcn365z6.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphcn365z6.jl:43\ntest set: Test Failed at /tmp/tmphcn365z6.jl:50\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphcn365z6.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphcn365z6.jl:43\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphcn365z6.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    smallest\
    \ = lst[1]\n    second_smallest = nothing\n    for i in lst\n        if i < smallest\n\
    \            second_smallest = smallest\n            smallest = i\n        elseif\
    \ i > smallest && (second_smallest == nothing || i < second_smallest)\n      \
    \      second_smallest = i\n        end\n    end\n    return second_smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjrzk0s4b.jl:45\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpjrzk0s4b.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjrzk0s4b.jl:43\ntest set: Test Failed at /tmp/tmpjrzk0s4b.jl:48\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjrzk0s4b.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjrzk0s4b.jl:43\ntest set: Test Failed at /tmp/tmpjrzk0s4b.jl:50\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjrzk0s4b.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjrzk0s4b.jl:43\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjrzk0s4b.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if lst[1]\
    \ < lst[2]\n        return lst[2]\n    else\n        return lst[1]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7xxs6t4c.jl:27\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp7xxs6t4c.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7xxs6t4c.jl:25\ntest set: Test Failed at /tmp/tmp7xxs6t4c.jl:29\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7xxs6t4c.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7xxs6t4c.jl:25\ntest set: Test Failed at /tmp/tmp7xxs6t4c.jl:31\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7xxs6t4c.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7xxs6t4c.jl:25\ntest set: Test Failed at /tmp/tmp7xxs6t4c.jl:32\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7xxs6t4c.jl:32\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7xxs6t4c.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7xxs6t4c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0z4_5ud8.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp0z4_5ud8.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0z4_5ud8.jl:22\ntest set: Test Failed at /tmp/tmp0z4_5ud8.jl:28\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0z4_5ud8.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0z4_5ud8.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0z4_5ud8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    sort!(lst)\n    return lst[2]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_idx = findall(lst .== min_val)\n    lst[min_idx] = Inf\n\
    \    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpisa4xoqa.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  ArgumentError: indexed assignment\
    \ with a single value to many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Float64, ::Int64)\
    \ at ./indices.jl:258\n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\n\
    \   [3] _unsafe_setindex!(::IndexLinear, ::Array{Int64,1}, ::Float64, ::Array{Int64,1})\
    \ at ./multidimensional.jl:774\n   [4] _setindex! at ./multidimensional.jl:769\
    \ [inlined]\n   [5] setindex! at ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmpisa4xoqa.jl:17\n   [7] top-level scope at /tmp/tmpisa4xoqa.jl:25\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpisa4xoqa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpisa4xoqa.jl:26\n  Test threw exception\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpisa4xoqa.jl:17\n   [7] top-level scope at /tmp/tmpisa4xoqa.jl:26\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpisa4xoqa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpisa4xoqa.jl:28\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: indexed assignment with a single value to many\
    \ locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpisa4xoqa.jl:17\n   [7] top-level scope at /tmp/tmpisa4xoqa.jl:28\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpisa4xoqa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpisa4xoqa.jl:29\n  Test threw exception\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpisa4xoqa.jl:17\n   [7] top-level scope at /tmp/tmpisa4xoqa.jl:29\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpisa4xoqa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpisa4xoqa.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: indexed assignment with a single value to many\
    \ locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpisa4xoqa.jl:17\n   [7] top-level scope at /tmp/tmpisa4xoqa.jl:30\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpisa4xoqa.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpisa4xoqa.jl:31\n  Test threw exception\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\n\
    \  Stacktrace:\n   [1] setindex_shape_check(::Float64, ::Int64) at ./indices.jl:258\n\
    \   [2] macro expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Float64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpisa4xoqa.jl:17\n   [7] top-level scope at /tmp/tmpisa4xoqa.jl:31\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpisa4xoqa.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpisa4xoqa.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3wnz7e45.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp3wnz7e45.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3wnz7e45.jl:21\ntest set: Test Failed at /tmp/tmp3wnz7e45.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3wnz7e45.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3wnz7e45.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3wnz7e45.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbwnkz1yz.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbwnkz1yz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbwnkz1yz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcmyl5wfe.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpcmyl5wfe.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcmyl5wfe.jl:22\ntest set: Test Failed at /tmp/tmpcmyl5wfe.jl:28\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcmyl5wfe.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcmyl5wfe.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcmyl5wfe.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp34azuyxo.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp34azuyxo.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp34azuyxo.jl:21\ntest set: Test Failed at /tmp/tmp34azuyxo.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp34azuyxo.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp34azuyxo.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp34azuyxo.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            if lst[1] <\
    \ lst[2]\n                return lst[1]\n            end\n            if lst[1]\
    \ > lst[2]\n                return lst[2]\n            end\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n        if lst[1] != lst[2]\n            if lst[1] < lst[2]\n  \
    \              return lst[1]\n            end\n            if lst[1] > lst[2]\n\
    \                return lst[2]\n            end\n        end\n    end\n    if\
    \ length(lst) > 2\n        if lst[1] != lst[2]\n            if lst[1] < lst[2]\n\
    \                for i in 3:length(lst)\n                    if lst[i] < lst[2]\n\
    \                        return lst[i]\n                    end\n            \
    \    end\n            end\n            if lst[1] > lst[2]\n                for\
    \ i in 3:length(lst)\n                    if lst[i] < lst[1]\n               \
    \         return lst[i]\n                    end\n                end\n      \
    \      end\n        end\n    end\n    if length(lst) > 2\n        if lst[1] ==\
    \ lst[2]\n            for i in 3:length(lst)\n                if lst[i] != lst[1]\n\
    \                    return lst[i]\n                end\n            end\n   \
    \     end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzfv7uf8w.jl:79\\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpzfv7uf8w.jl:79\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzfv7uf8w.jl:78\\ntest set: Test Failed at /tmp/tmpzfv7uf8w.jl:80\\\
    n  Expression: candidate([5, 1, 4, 3, 2]) == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpzfv7uf8w.jl:80\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzfv7uf8w.jl:78\\ntest set: Test Failed at /tmp/tmpzfv7uf8w.jl:83\\\
    n  Expression: candidate([1, 1, 1, 1, 0]) == 1\\n   Evaluated: nothing == 1\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpzfv7uf8w.jl:83\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzfv7uf8w.jl:78\\nTest Summary: | Pass  Fail \
    \ Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk09qvuq3.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpk09qvuq3.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk09qvuq3.jl:21\ntest set: Test Failed at /tmp/tmpk09qvuq3.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk09qvuq3.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk09qvuq3.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk09qvuq3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpx2y5jwgo.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpx2y5jwgo.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx2y5jwgo.jl:21\\ntest set: Test Failed at /tmp/tmpx2y5jwgo.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpx2y5jwgo.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx2y5jwgo.jl:21\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     2      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min\
    \ = lst[1]\n    min2 = lst[2]\n    for i in lst\n        if i < min\n        \
    \    min2 = min\n            min = i\n        elseif i < min2\n            min2\
    \ = i\n        end\n    end\n    return min2\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplsl6dw8k.jl:32\\n  Expression: candidate([1,\
    \ 2, 3, 4, 5]) == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmplsl6dw8k.jl:32\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplsl6dw8k.jl:31\\ntest set: Test Failed at /tmp/tmplsl6dw8k.jl:35\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplsl6dw8k.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplsl6dw8k.jl:31\\ntest set: Test Failed at /tmp/tmplsl6dw8k.jl:37\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplsl6dw8k.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplsl6dw8k.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    sorted_lst = sort(lst)\n    for i in 2:length(sorted_lst)\n    \
    \    if sorted_lst[i] != sorted_lst[i-1]\n            return sorted_lst[i]\n \
    \       end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9bw4uetm.jl:45\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp9bw4uetm.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9bw4uetm.jl:43\ntest set: Test Failed at /tmp/tmp9bw4uetm.jl:48\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9bw4uetm.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9bw4uetm.jl:43\ntest set: Test Failed at /tmp/tmp9bw4uetm.jl:50\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp9bw4uetm.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9bw4uetm.jl:43\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9bw4uetm.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo8hxkdtr.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpo8hxkdtr.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo8hxkdtr.jl:22\ntest set: Test Failed at /tmp/tmpo8hxkdtr.jl:28\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo8hxkdtr.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo8hxkdtr.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo8hxkdtr.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] < lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) == 2\n        if lst[1] > lst[2]\n \
    \           return lst[1]\n        end\n    end\n    if length(lst) > 2\n    \
    \    if lst[1] < lst[2]\n            return lst[2]\n        end\n    end\n   \
    \ if length(lst) > 2\n        if lst[1] > lst[2]\n            return lst[1]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == l\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5cyrrbbq.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5cyrrbbq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    if lst[1] == lst[2]\n        return nothing\n    end\n    return lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjlktlmzg.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjlktlmzg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjlktlmzg.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqut6iebp.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqut6iebp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqut6iebp.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1x51xtde.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp1x51xtde.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1x51xtde.jl:21\ntest set: Test Failed at /tmp/tmp1x51xtde.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1x51xtde.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1x51xtde.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1x51xtde.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_idx = findall(lst .== min_val)\n    if length(min_idx)\
    \ > 1\n        return nothing\n    end\n    lst[min_idx] = maximum(lst)\n    return\
    \ minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbfksvnjn.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  ArgumentError: indexed assignment\
    \ with a single value to many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64, ::Int64)\
    \ at ./indices.jl:258\n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\n\
    \   [3] _unsafe_setindex!(::IndexLinear, ::Array{Int64,1}, ::Int64, ::Array{Int64,1})\
    \ at ./multidimensional.jl:774\n   [4] _setindex! at ./multidimensional.jl:769\
    \ [inlined]\n   [5] setindex! at ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmpbfksvnjn.jl:20\n   [7] top-level scope at /tmp/tmpbfksvnjn.jl:28\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpbfksvnjn.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpbfksvnjn.jl:29\n  Test threw exception\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpbfksvnjn.jl:20\n   [7] top-level scope at /tmp/tmpbfksvnjn.jl:29\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpbfksvnjn.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpbfksvnjn.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpbfksvnjn.jl:20\n   [7] top-level scope at /tmp/tmpbfksvnjn.jl:32\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpbfksvnjn.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpbfksvnjn.jl:34\n  Test threw exception\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\n\
    \  Stacktrace:\n   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\n\
    \   [2] macro expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpbfksvnjn.jl:20\n   [7] top-level scope at /tmp/tmpbfksvnjn.jl:34\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpbfksvnjn.jl:27\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    3      4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbfksvnjn.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppt5c8ur5.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmppt5c8ur5.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppt5c8ur5.jl:21\ntest set: Test Failed at /tmp/tmppt5c8ur5.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppt5c8ur5.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppt5c8ur5.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppt5c8ur5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) >= 3\n        if lst[1] == lst[2]\n\
    \            return lst[3]\n        end\n    end\n    if length(lst) >= 3\n  \
    \      if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppydgexrx.jl:45\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmppydgexrx.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppydgexrx.jl:43\ntest set: Test Failed at /tmp/tmppydgexrx.jl:50\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppydgexrx.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppydgexrx.jl:43\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppydgexrx.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_val_idx = findall(lst .== min_val)\n    if length(min_val_idx)\
    \ == length(lst)\n        return nothing\n    end\n    lst[min_val_idx] = typemax(Int64)\n\
    \    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdxrpgm0r.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to many locations is not supported; perhaps\
    \ use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64) at ./indices.jl:258\\n   [2] macro expansion at ./multidimensional.jl:779\
    \ [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear, ::Array{Int64,1}, ::Int64,\
    \ ::Array{Int64,1}) at ./multidimensional.jl:774\\n   [4] _setindex! at ./multidimensional.jl:769\
    \ [inlined]\\n   [5] setindex! at ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmpdxrpgm0r.jl:20\\n   [7] top-level scope at /tmp/tmpdxrpgm0r.jl:28\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmpdxrpgm0r.jl:27\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpdxrpgm0r.jl:29\\n  Test threw exception\\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\\\
    n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpdxrpgm0r.jl:20\\n   [7] top-level scope at /tmp/tmpdxrpgm0r.jl:29\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmpdxrpgm0r.jl:27\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpdxrpgm0r.jl:32\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\\\
    n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpdxrpgm0r.jl:20\\n   [7] top-level scope at /tmp/tmpdxrpgm0r.jl:32\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmpdxrpgm0r.jl:27\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpdxrpgm0r.jl:34\\n  Test threw exception\\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\\\
    n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpdxrpgm0r.jl:20\\n   [7] top-level scope at /tmp/tmpdxrpgm0r.jl:34\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmpdxrpgm0r.jl:27\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    3      4      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    smallest\
    \ = lst[1]\n    second_smallest = nothing\n    for i in lst\n        if i < smallest\n\
    \            second_smallest = smallest\n            smallest = i\n        elseif\
    \ i > smallest && (second_smallest == nothing || i < second_smallest)\n      \
    \      second_smallest = i\n        end\n    end\n    return second_smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[2] == lst[3]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[3]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2] == lst[3]\n            return\
    \ nothing\n        end\n    end\n    if length(lst) > 2\n        if lst[1] ==\
    \ lst[2] == lst[3] == lst[4]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2] == lst[3] == lst[4] == lst[5]\n\
    \            return nothing\n        end\n    end\n    if length(lst) > 2\n  \
    \      if lst[1] == lst[2] == lst[3] == lst[4] == lst[5] == lst[6]\n         \
    \   return nothing\n        end\n    end\n    if length(lst) > 2\n        if lst[1]\
    \ == lst[2] == lst[3] == lst[4] == lst[5] == lst[6] == lst[7]\n            return\
    \ nothing\n        end\n    end\n    if length(lst) > 2\n        if lst[1] ==\
    \ lst[2] == lst[3] == lst[4] == lst[5] == lst[6] == lst[7] == lst[8]\n       \
    \     return nothing\n        end\n    end\n    if length(lst) > 2\n       \n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpma4spyh_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpma4spyh_.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpojie1mp5.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpojie1mp5.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpojie1mp5.jl:21\ntest set: Test Failed at /tmp/tmpojie1mp5.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpojie1mp5.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpojie1mp5.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpojie1mp5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    lst = sort(lst)\n    for i in 1:length(lst)-1\n        if lst[i]\
    \ != lst[i+1]\n            return lst[i+1]\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzteul0nd.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzteul0nd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzteul0nd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf591n1b3.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpf591n1b3.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf591n1b3.jl:21\ntest set: Test Failed at /tmp/tmpf591n1b3.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf591n1b3.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf591n1b3.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf591n1b3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjghtifs2.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpjghtifs2.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjghtifs2.jl:21\\ntest set: Test Failed at /tmp/tmpjghtifs2.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpjghtifs2.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpjghtifs2.jl:21\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     2      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted\
    \ = sort(lst)\n    if sorted[1] == sorted[2]\n        return nothing\n    end\n\
    \    return sorted[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvmbhb9fc.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpvmbhb9fc.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvmbhb9fc.jl:21\\ntest set: Test Failed at /tmp/tmpvmbhb9fc.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpvmbhb9fc.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvmbhb9fc.jl:21\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     2      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    sorted_lst = sort(lst)\n    for i in 2:length(sorted_lst)\n    \
    \    if sorted_lst[i] != sorted_lst[i-1]\n            return sorted_lst[i]\n \
    \       end\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_idx = findall(lst .== min_val)\n    lst[min_idx] = typemax(Int64)\n\
    \    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9i0y6ife.jl:25\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 2, 3, 4, 5]) == 2\\n  ArgumentError:\
    \ indexed assignment with a single value to many locations is not supported; perhaps\
    \ use broadcasting `.=` instead?\\n  Stacktrace:\\n   [1] setindex_shape_check(::Int64,\
    \ ::Int64) at ./indices.jl:258\\n   [2] macro expansion at ./multidimensional.jl:779\
    \ [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear, ::Array{Int64,1}, ::Int64,\
    \ ::Array{Int64,1}) at ./multidimensional.jl:774\\n   [4] _setindex! at ./multidimensional.jl:769\
    \ [inlined]\\n   [5] setindex! at ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmp9i0y6ife.jl:17\\n   [7] top-level scope at /tmp/tmp9i0y6ife.jl:25\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmp9i0y6ife.jl:24\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp9i0y6ife.jl:26\\n  Test threw exception\\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\\\
    n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp9i0y6ife.jl:17\\n   [7] top-level scope at /tmp/tmp9i0y6ife.jl:26\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmp9i0y6ife.jl:24\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp9i0y6ife.jl:28\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\\n \
    \ Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp9i0y6ife.jl:17\\n   [7] top-level scope at /tmp/tmp9i0y6ife.jl:28\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmp9i0y6ife.jl:24\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp9i0y6ife.jl:29\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\\\
    n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp9i0y6ife.jl:17\\n   [7] top-level scope at /tmp/tmp9i0y6ife.jl:29\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmp9i0y6ife.jl:24\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp9i0y6ife.jl:30\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\\n \
    \ Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp9i0y6ife.jl:17\\n   [7] top-level scope at /tmp/tmp9i0y6ife.jl:30\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmp9i0y6ife.jl:24\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp9i0y6ife.jl:31\\n  Test threw exception\\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\\\
    n  Stacktrace:\\n   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\\\
    n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\\\
    n   [4] _setindex! at ./multidimensional.jl:769 [inlined]\\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp9i0y6ife.jl:17\\n   [7] top-level scope at /tmp/tmp9i0y6ife.jl:31\\\
    n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [9] top-level scope at /tmp/tmp9i0y6ife.jl:24\\n  \\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsa50zsqu.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpsa50zsqu.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsa50zsqu.jl:21\ntest set: Test Failed at /tmp/tmpsa50zsqu.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsa50zsqu.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsa50zsqu.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsa50zsqu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] > lst[2]\n            return lst[1]\n\
    \        end\n        if lst[1] < lst[2]\n            return lst[2]\n        end\n\
    \    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n            return\
    \ nothing\n        end\n        if lst[1] > lst[2]\n            return lst[1]\n\
    \        end\n        if lst[1] < lst[2]\n            return lst[2]\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t\
    @test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpovv7ffam.jl:49\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpovv7ffam.jl:49\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpovv7ffam.jl:47\ntest set: Test Failed at /tmp/tmpovv7ffam.jl:52\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpovv7ffam.jl:52\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpovv7ffam.jl:47\ntest set: Test Failed at /tmp/tmpovv7ffam.jl:54\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpovv7ffam.jl:54\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpovv7ffam.jl:47\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpovv7ffam.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted\
    \ = sort(lst)\n    if sorted[1] == sorted[2]\n        return nothing\n    end\n\
    \    return sorted[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnwbholnf.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnwbholnf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnwbholnf.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpghdpf4kq.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpghdpf4kq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpghdpf4kq.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    for i in 2:length(sorted_lst)\n        if sorted_lst[i] !=\
    \ sorted_lst[i-1]\n            return sorted_lst[i]\n        end\n    end\n  \
    \  return nothing\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_val_idx = findall(lst .== min_val)\n    lst = deleteat!(lst,\
    \ min_val_idx)\n    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5r7ei19m.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmp5r7ei19m.jl:18\n\
    \   [13] top-level scope at /tmp/tmp5r7ei19m.jl:28\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmp5r7ei19m.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp5r7ei19m.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp5r7ei19m.jl:18\n   [13] top-level scope at /tmp/tmp5r7ei19m.jl:30\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmp5r7ei19m.jl:24\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5r7ei19m.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if lst[1]\
    \ < lst[2]\n        return lst[2]\n    else\n        return lst[1]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbyjv4esg.jl:27\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpbyjv4esg.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbyjv4esg.jl:25\ntest set: Test Failed at /tmp/tmpbyjv4esg.jl:29\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbyjv4esg.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbyjv4esg.jl:25\ntest set: Test Failed at /tmp/tmpbyjv4esg.jl:31\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbyjv4esg.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbyjv4esg.jl:25\ntest set: Test Failed at /tmp/tmpbyjv4esg.jl:32\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbyjv4esg.jl:32\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbyjv4esg.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbyjv4esg.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_val_idx = findall(lst .== min_val)\n    lst = deleteat!(lst,\
    \ min_val_idx)\n    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpa2jryc_c.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmpa2jryc_c.jl:18\n\
    \   [13] top-level scope at /tmp/tmpa2jryc_c.jl:28\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpa2jryc_c.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpa2jryc_c.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpa2jryc_c.jl:18\n   [13] top-level scope at /tmp/tmpa2jryc_c.jl:30\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpa2jryc_c.jl:24\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2jryc_c.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_idx = findall(lst .== min_val)\n    lst = deleteat!(lst,\
    \ min_idx)\n    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptreqrj77.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmptreqrj77.jl:18\n\
    \   [13] top-level scope at /tmp/tmptreqrj77.jl:28\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmptreqrj77.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmptreqrj77.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmptreqrj77.jl:18\n   [13] top-level scope at /tmp/tmptreqrj77.jl:30\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmptreqrj77.jl:24\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptreqrj77.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_val_idx = findall(lst .== min_val)\n    lst_without_min\
    \ = deleteat!(lst, min_val_idx)\n    return minimum(lst_without_min)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0cbwhkzs.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmp0cbwhkzs.jl:18\n\
    \   [13] top-level scope at /tmp/tmp0cbwhkzs.jl:28\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmp0cbwhkzs.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp0cbwhkzs.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp0cbwhkzs.jl:18\n   [13] top-level scope at /tmp/tmp0cbwhkzs.jl:30\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmp0cbwhkzs.jl:24\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0cbwhkzs.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    lst = sort(lst)\n    for i in 1:length(lst)-1\n        if lst[i] != lst[i+1]\n\
    \            return lst[i+1]\n        end\n    end\n    return nothing\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk_yustfm.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpk_yustfm.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk_yustfm.jl:21\ntest set: Test Failed at /tmp/tmpk_yustfm.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk_yustfm.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk_yustfm.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk_yustfm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplg3xyqj7.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmplg3xyqj7.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplg3xyqj7.jl:21\\ntest set: Test Failed at /tmp/tmplg3xyqj7.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplg3xyqj7.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplg3xyqj7.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxhvzh0e1.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpxhvzh0e1.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxhvzh0e1.jl:21\ntest set: Test Failed at /tmp/tmpxhvzh0e1.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxhvzh0e1.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxhvzh0e1.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxhvzh0e1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    smallest\
    \ = lst[1]\n    second_smallest = nothing\n    for i in 2:length(lst)\n      \
    \  if lst[i] < smallest\n            second_smallest = smallest\n            smallest\
    \ = lst[i]\n        elseif second_smallest == nothing || lst[i] < second_smallest\n\
    \            second_smallest = lst[i]\n        end\n    end\n    return second_smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp64az96k7.jl:35\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp64az96k7.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp64az96k7.jl:31\ntest set: Test Failed at /tmp/tmp64az96k7.jl:37\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp64az96k7.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp64az96k7.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp64az96k7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy0ugb5wn.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpy0ugb5wn.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy0ugb5wn.jl:21\ntest set: Test Failed at /tmp/tmpy0ugb5wn.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy0ugb5wn.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy0ugb5wn.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy0ugb5wn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    m =\
    \ minimum(lst)\n    lst = filter(x -> x != m, lst)\n    return minimum(lst)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaq5e72mx.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate([1, 1]) == nothing\\n  ArgumentError: reducing\
    \ over an empty collection is not allowed\\n  Stacktrace:\\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\\\
    n   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\\n   [9] _minimum at ./reducedim.jl:656 [inlined]\\\
    n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmpaq5e72mx.jl:17\\\
    n   [13] top-level scope at /tmp/tmpaq5e72mx.jl:27\\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [15] top-level scope at /tmp/tmpaq5e72mx.jl:23\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpaq5e72mx.jl:29\\n  Test threw exception\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n  ArgumentError: reducing over an empty collection is not allowed\\\
    n  Stacktrace:\\n   [1] _empty_reduce_error() at ./reduce.jl:295\\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\\\
    n   [8] _minimum at ./reducedim.jl:657 [inlined]\\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpaq5e72mx.jl:17\\n   [13] top-level scope at /tmp/tmpaq5e72mx.jl:29\\\
    n   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [15] top-level scope at /tmp/tmpaq5e72mx.jl:23\\n  \\nTest Summary: | Pass\
    \  Error  Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl9trijny.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpl9trijny.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl9trijny.jl:22\ntest set: Test Failed at /tmp/tmpl9trijny.jl:28\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl9trijny.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl9trijny.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl9trijny.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    for i in 1:length(lst)-1\n        if lst[i] != lst[i+1]\n            return\
    \ lst[i+1]\n        end\n    end\n    return nothing\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    smallest\
    \ = lst[1]\n    second_smallest = nothing\n    for i in lst\n        if i < smallest\n\
    \            second_smallest = smallest\n            smallest = i\n        elseif\
    \ i > smallest && (second_smallest == nothing || i < second_smallest)\n      \
    \      second_smallest = i\n        end\n    end\n    return second_smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ minimum(lst[lst .!= minimum(lst)])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9vtxqr1v.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmp9vtxqr1v.jl:15\n\
    \   [13] top-level scope at /tmp/tmp9vtxqr1v.jl:25\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmp9vtxqr1v.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp9vtxqr1v.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp9vtxqr1v.jl:15\n   [13] top-level scope at /tmp/tmp9vtxqr1v.jl:27\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmp9vtxqr1v.jl:21\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9vtxqr1v.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    smallest\
    \ = lst[1]\n    second_smallest = nothing\n    for i in 2:length(lst)\n      \
    \  if lst[i] < smallest\n            second_smallest = smallest\n            smallest\
    \ = lst[i]\n        elseif lst[i] < second_smallest\n            second_smallest\
    \ = lst[i]\n        end\n    end\n    return second_smallest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqw52hra6.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  MethodError: no method matching\
    \ isless(::Int64, ::Nothing)\n  Closest candidates are:\n    isless(!Matched::Missing,\
    \ ::Any) at missing.jl:87\n    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n\
    \    isless(::Real, !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Int64, ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmpqw52hra6.jl:21\n   [3] top-level scope at /tmp/tmpqw52hra6.jl:32\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqw52hra6.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpqw52hra6.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  MethodError: no method matching isless(::Int64, ::Nothing)\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpqw52hra6.jl:21\n   [3] top-level scope at /tmp/tmpqw52hra6.jl:35\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqw52hra6.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpqw52hra6.jl:36\n  Test threw exception\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n  MethodError: no method matching isless(::Int64, ::Nothing)\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpqw52hra6.jl:21\n   [3] top-level scope at /tmp/tmpqw52hra6.jl:36\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqw52hra6.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpqw52hra6.jl:37\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  MethodError: no method matching isless(::Int64, ::Nothing)\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpqw52hra6.jl:21\n   [3] top-level scope at /tmp/tmpqw52hra6.jl:37\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqw52hra6.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpqw52hra6.jl:38\n  Test threw exception\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\n  MethodError: no method matching isless(::Int64, ::Nothing)\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpqw52hra6.jl:21\n   [3] top-level scope at /tmp/tmpqw52hra6.jl:38\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqw52hra6.jl:31\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    2      5      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqw52hra6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgd35weln.jl:45\\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpgd35weln.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgd35weln.jl:43\\ntest set: Test Failed at /tmp/tmpgd35weln.jl:48\\\
    n  Expression: candidate([1, 1, 1, 1, 0]) == 1\\n   Evaluated: nothing == 1\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpgd35weln.jl:48\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgd35weln.jl:43\\ntest set: Test Failed at /tmp/tmpgd35weln.jl:50\\\
    n  Expression: candidate([-35, 34, 12, -45]) == -35\\n   Evaluated: 34 == -35\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpgd35weln.jl:50\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgd35weln.jl:43\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyhle2mrq.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpyhle2mrq.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyhle2mrq.jl:21\ntest set: Test Failed at /tmp/tmpyhle2mrq.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyhle2mrq.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyhle2mrq.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyhle2mrq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz1dd1aiy.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpz1dd1aiy.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz1dd1aiy.jl:21\ntest set: Test Failed at /tmp/tmpz1dd1aiy.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz1dd1aiy.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz1dd1aiy.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz1dd1aiy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_idx = findall(lst .== min_val)\n    lst = deleteat!(lst,\
    \ min_idx)\n    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq341i_ai.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmpq341i_ai.jl:18\n\
    \   [13] top-level scope at /tmp/tmpq341i_ai.jl:28\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpq341i_ai.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpq341i_ai.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpq341i_ai.jl:18\n   [13] top-level scope at /tmp/tmpq341i_ai.jl:30\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpq341i_ai.jl:24\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq341i_ai.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ minimum(lst[lst .!= minimum(lst)])\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbs31f4dc.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmpbs31f4dc.jl:15\n\
    \   [13] top-level scope at /tmp/tmpbs31f4dc.jl:25\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpbs31f4dc.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpbs31f4dc.jl:27\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpbs31f4dc.jl:15\n   [13] top-level scope at /tmp/tmpbs31f4dc.jl:27\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpbs31f4dc.jl:21\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbs31f4dc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min1\
    \ = lst[1]\n    min2 = lst[2]\n    if min1 > min2\n        min1, min2 = min2,\
    \ min1\n    end\n    for i in 3:length(lst)\n        if lst[i] < min1\n      \
    \      min2 = min1\n            min1 = lst[i]\n        elseif lst[i] < min2\n\
    \            min2 = lst[i]\n        end\n    end\n    return min2\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpowdbu5tz.jl:38\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpowdbu5tz.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpowdbu5tz.jl:34\ntest set: Test Failed at /tmp/tmpowdbu5tz.jl:40\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpowdbu5tz.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpowdbu5tz.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpowdbu5tz.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    lst\
    \ = sort(lst)\n    for i in 1:length(lst)-1\n        if lst[i] != lst[i+1]\n \
    \           return lst[i+1]\n        end\n    end\n    return nothing\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    sort(lst)\n    for i in 1:length(lst)-1\n        if lst[i] != lst[i+1]\n\
    \            return lst[i+1]\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr24x2t7q.jl:36\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpr24x2t7q.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr24x2t7q.jl:34\ntest set: Test Failed at /tmp/tmpr24x2t7q.jl:39\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: 0 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr24x2t7q.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr24x2t7q.jl:34\ntest set: Test Failed at /tmp/tmpr24x2t7q.jl:41\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpr24x2t7q.jl:41\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr24x2t7q.jl:34\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr24x2t7q.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    sort!(lst)\n    return lst[2]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if lst[1]\
    \ < lst[2]\n        return lst[2]\n    else\n        return lst[1]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvmbwcnp8.jl:27\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpvmbwcnp8.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvmbwcnp8.jl:25\ntest set: Test Failed at /tmp/tmpvmbwcnp8.jl:29\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvmbwcnp8.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvmbwcnp8.jl:25\ntest set: Test Failed at /tmp/tmpvmbwcnp8.jl:31\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvmbwcnp8.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvmbwcnp8.jl:25\ntest set: Test Failed at /tmp/tmpvmbwcnp8.jl:32\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvmbwcnp8.jl:32\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvmbwcnp8.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvmbwcnp8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxgm4ee90.jl:45\\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpxgm4ee90.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxgm4ee90.jl:43\\ntest set: Test Failed at /tmp/tmpxgm4ee90.jl:48\\\
    n  Expression: candidate([1, 1, 1, 1, 0]) == 1\\n   Evaluated: nothing == 1\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpxgm4ee90.jl:48\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxgm4ee90.jl:43\\ntest set: Test Failed at /tmp/tmpxgm4ee90.jl:50\\\
    n  Expression: candidate([-35, 34, 12, -45]) == -35\\n   Evaluated: 34 == -35\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpxgm4ee90.jl:50\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxgm4ee90.jl:43\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdqemj7t2.jl:45\\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpdqemj7t2.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdqemj7t2.jl:43\\ntest set: Test Failed at /tmp/tmpdqemj7t2.jl:48\\\
    n  Expression: candidate([1, 1, 1, 1, 0]) == 1\\n   Evaluated: nothing == 1\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpdqemj7t2.jl:48\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdqemj7t2.jl:43\\ntest set: Test Failed at /tmp/tmpdqemj7t2.jl:50\\\
    n  Expression: candidate([-35, 34, 12, -45]) == -35\\n   Evaluated: 34 == -35\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpdqemj7t2.jl:50\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdqemj7t2.jl:43\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] < lst[2]\n  \
    \          return lst[2]\n        end\n    end\n    if length(lst) > 2\n     \
    \   if lst[1] > lst[2]\n            return lst[1]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp70lcu7in.jl:45\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp70lcu7in.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70lcu7in.jl:43\ntest set: Test Failed at /tmp/tmp70lcu7in.jl:48\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70lcu7in.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70lcu7in.jl:43\ntest set: Test Failed at /tmp/tmp70lcu7in.jl:50\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp70lcu7in.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp70lcu7in.jl:43\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp70lcu7in.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    smallest\
    \ = lst[1]\n    second_smallest = nothing\n    for i in 2:length(lst)\n      \
    \  if lst[i] < smallest\n            second_smallest = smallest\n            smallest\
    \ = lst[i]\n        elseif lst[i] < second_smallest || second_smallest == nothing\n\
    \            second_smallest = lst[i]\n        end\n    end\n    return second_smallest\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn6neyfyf.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  MethodError: no method matching\
    \ isless(::Int64, ::Nothing)\n  Closest candidates are:\n    isless(!Matched::Missing,\
    \ ::Any) at missing.jl:87\n    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n\
    \    isless(::Real, !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Int64, ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmpn6neyfyf.jl:21\n   [3] top-level scope at /tmp/tmpn6neyfyf.jl:32\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpn6neyfyf.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpn6neyfyf.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  MethodError: no method matching isless(::Int64, ::Nothing)\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpn6neyfyf.jl:21\n   [3] top-level scope at /tmp/tmpn6neyfyf.jl:35\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpn6neyfyf.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpn6neyfyf.jl:36\n  Test threw exception\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n  MethodError: no method matching isless(::Int64, ::Nothing)\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpn6neyfyf.jl:21\n   [3] top-level scope at /tmp/tmpn6neyfyf.jl:36\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpn6neyfyf.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpn6neyfyf.jl:37\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  MethodError: no method matching isless(::Int64, ::Nothing)\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpn6neyfyf.jl:21\n   [3] top-level scope at /tmp/tmpn6neyfyf.jl:37\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpn6neyfyf.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpn6neyfyf.jl:38\n  Test threw exception\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\n  MethodError: no method matching isless(::Int64, ::Nothing)\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpn6neyfyf.jl:21\n   [3] top-level scope at /tmp/tmpn6neyfyf.jl:38\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpn6neyfyf.jl:31\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    2      5      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn6neyfyf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    lst\
    \ = sort(lst)\n    for i in 2:length(lst)\n        if lst[i] != lst[i-1]\n   \
    \         return lst[i]\n        end\n    end\n    return nothing\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1whah_oy.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp1whah_oy.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1whah_oy.jl:21\ntest set: Test Failed at /tmp/tmp1whah_oy.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1whah_oy.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1whah_oy.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1whah_oy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpv7v76sl8.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpv7v76sl8.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv7v76sl8.jl:21\\ntest set: Test Failed at /tmp/tmpv7v76sl8.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpv7v76sl8.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv7v76sl8.jl:21\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     2      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    return sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1feg4m_3.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp1feg4m_3.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1feg4m_3.jl:21\ntest set: Test Failed at /tmp/tmp1feg4m_3.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1feg4m_3.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1feg4m_3.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1feg4m_3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu87jzgm0.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpu87jzgm0.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu87jzgm0.jl:21\ntest set: Test Failed at /tmp/tmpu87jzgm0.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu87jzgm0.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu87jzgm0.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu87jzgm0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    # sort\
    \ the list\n    lst = sort(lst)\n    # remove duplicates\n    lst = unique(lst)\n\
    \    # return the second element\n    return lst[2]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\
    \t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwdvenn1i.jl:30\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  BoundsError: attempt to access\
    \ 1-element Array{Int64,1} at index [2]\n  Stacktrace:\n   [1] getindex at ./array.jl:788\
    \ [inlined]\n   [2] next_smallest(::Array{Int64,1}) at /tmp/tmpwdvenn1i.jl:20\n\
    \   [3] top-level scope at /tmp/tmpwdvenn1i.jl:30\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwdvenn1i.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpwdvenn1i.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  BoundsError: attempt to access 1-element Array{Int64,1} at\
    \ index [2]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2]\
    \ next_smallest(::Array{Int64,1}) at /tmp/tmpwdvenn1i.jl:20\n   [3] top-level\
    \ scope at /tmp/tmpwdvenn1i.jl:32\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpwdvenn1i.jl:26\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwdvenn1i.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpitqfk4rh.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpitqfk4rh.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpitqfk4rh.jl:21\\ntest set: Test Failed at /tmp/tmpitqfk4rh.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpitqfk4rh.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpitqfk4rh.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    return lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp46boqo0k.jl:26\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp46boqo0k.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp46boqo0k.jl:22\ntest set: Test Failed at /tmp/tmp46boqo0k.jl:28\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp46boqo0k.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp46boqo0k.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp46boqo0k.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted\
    \ = sort(lst)\n    if sorted[1] == sorted[2]\n        return nothing\n    end\n\
    \    return sorted[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw26rx65x.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpw26rx65x.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw26rx65x.jl:21\\ntest set: Test Failed at /tmp/tmpw26rx65x.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw26rx65x.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw26rx65x.jl:21\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    sorted = sort(lst)\n    for i in 2:length(sorted)\n        if sorted[i]\
    \ != sorted[i-1]\n            return sorted[i]\n        end\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    smallest\
    \ = lst[1]\n    second_smallest = nothing\n    for i in 2:length(lst)\n      \
    \  if lst[i] < smallest\n            second_smallest = smallest\n            smallest\
    \ = lst[i]\n        elseif lst[i] < second_smallest\n            second_smallest\
    \ = lst[i]\n        end\n    end\n    return second_smallest\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmprc34rerk.jl:32\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  MethodError: no method matching\
    \ isless(::Int64, ::Nothing)\n  Closest candidates are:\n    isless(!Matched::Missing,\
    \ ::Any) at missing.jl:87\n    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n\
    \    isless(::Real, !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n\
    \   [1] <(::Int64, ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmprc34rerk.jl:21\n   [3] top-level scope at /tmp/tmprc34rerk.jl:32\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprc34rerk.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmprc34rerk.jl:35\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  MethodError: no method matching isless(::Int64, ::Nothing)\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmprc34rerk.jl:21\n   [3] top-level scope at /tmp/tmprc34rerk.jl:35\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprc34rerk.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmprc34rerk.jl:36\n  Test threw exception\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n  MethodError: no method matching isless(::Int64, ::Nothing)\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmprc34rerk.jl:21\n   [3] top-level scope at /tmp/tmprc34rerk.jl:36\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprc34rerk.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmprc34rerk.jl:37\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  MethodError: no method matching isless(::Int64, ::Nothing)\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmprc34rerk.jl:21\n   [3] top-level scope at /tmp/tmprc34rerk.jl:37\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprc34rerk.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmprc34rerk.jl:38\n  Test threw exception\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\n  MethodError: no method matching isless(::Int64, ::Nothing)\n\
    \  Closest candidates are:\n    isless(!Matched::Missing, ::Any) at missing.jl:87\n\
    \    isless(::Real, !Matched::AbstractFloat) at operators.jl:157\n    isless(::Real,\
    \ !Matched::Real) at operators.jl:346\n    ...\n  Stacktrace:\n   [1] <(::Int64,\
    \ ::Nothing) at ./operators.jl:268\n   [2] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmprc34rerk.jl:21\n   [3] top-level scope at /tmp/tmprc34rerk.jl:38\n \
    \  [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmprc34rerk.jl:31\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    2      5      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprc34rerk.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n   \nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcfmjn122.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcfmjn122.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcfmjn122.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_idx = findall(lst .== min_val)\n    lst = deleteat!(lst,\
    \ min_idx)\n    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgthvcsl6.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmpgthvcsl6.jl:18\n\
    \   [13] top-level scope at /tmp/tmpgthvcsl6.jl:28\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpgthvcsl6.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmpgthvcsl6.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpgthvcsl6.jl:18\n   [13] top-level scope at /tmp/tmpgthvcsl6.jl:30\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpgthvcsl6.jl:24\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgthvcsl6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    return sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprs4ufy2t.jl:25\\n  Expression: candidate([1,\
    \ 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmprs4ufy2t.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprs4ufy2t.jl:21\\ntest set: Test Failed at /tmp/tmprs4ufy2t.jl:27\\\
    n  Expression: candidate([1, 1]) == nothing\\n   Evaluated: 1 == nothing\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprs4ufy2t.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprs4ufy2t.jl:21\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     2      7\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmprs4ufy2t.jl:19\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_idx = findall(lst .== min_val)\n    if length(min_idx)\
    \ > 1\n        return nothing\n    end\n    lst[min_idx] = typemax(Int64)\n  \
    \  return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbvr_c6ma.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  ArgumentError: indexed assignment\
    \ with a single value to many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64, ::Int64)\
    \ at ./indices.jl:258\n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\n\
    \   [3] _unsafe_setindex!(::IndexLinear, ::Array{Int64,1}, ::Int64, ::Array{Int64,1})\
    \ at ./multidimensional.jl:774\n   [4] _setindex! at ./multidimensional.jl:769\
    \ [inlined]\n   [5] setindex! at ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmpbvr_c6ma.jl:20\n   [7] top-level scope at /tmp/tmpbvr_c6ma.jl:28\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpbvr_c6ma.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpbvr_c6ma.jl:29\n  Test threw exception\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpbvr_c6ma.jl:20\n   [7] top-level scope at /tmp/tmpbvr_c6ma.jl:29\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpbvr_c6ma.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpbvr_c6ma.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpbvr_c6ma.jl:20\n   [7] top-level scope at /tmp/tmpbvr_c6ma.jl:32\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpbvr_c6ma.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpbvr_c6ma.jl:34\n  Test threw exception\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\n\
    \  Stacktrace:\n   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\n\
    \   [2] macro expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpbvr_c6ma.jl:20\n   [7] top-level scope at /tmp/tmpbvr_c6ma.jl:34\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpbvr_c6ma.jl:27\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    3      4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbvr_c6ma.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted\
    \ = sort(lst)\n    if sorted[1] == sorted[2]\n        return nothing\n    end\n\
    \    return sorted[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplyv2m1mv.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmplyv2m1mv.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplyv2m1mv.jl:21\ntest set: Test Failed at /tmp/tmplyv2m1mv.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplyv2m1mv.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplyv2m1mv.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyv2m1mv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_val_idx = findfirst(lst, min_val)\n    lst = deleteat!(lst,\
    \ min_val_idx)\n    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\n\
    candidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9n7hag6a.jl:25\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  MethodError: no method matching\
    \ findfirst(::Array{Int64,1}, ::Int64)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    findfirst(::Any) at array.jl:1692\n  Stacktrace:\n   [1]\
    \ next_smallest(::Array{Int64,1}) at /tmp/tmp9n7hag6a.jl:16\n   [2] top-level\
    \ scope at /tmp/tmp9n7hag6a.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9n7hag6a.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp9n7hag6a.jl:26\n  Test threw exception\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n  MethodError: no method matching findfirst(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    findfirst(::Union{AbstractString, AbstractArray})\
    \ at array.jl:1701\n    findfirst(!Matched::Function, ::Any) at array.jl:1776\n\
    \    findfirst(::Any) at array.jl:1692\n  Stacktrace:\n   [1] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmp9n7hag6a.jl:16\n   [2] top-level scope at /tmp/tmp9n7hag6a.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9n7hag6a.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp9n7hag6a.jl:28\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  MethodError: no method matching findfirst(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    findfirst(::Union{AbstractString, AbstractArray})\
    \ at array.jl:1701\n    findfirst(!Matched::Function, ::Any) at array.jl:1776\n\
    \    findfirst(::Any) at array.jl:1692\n  Stacktrace:\n   [1] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmp9n7hag6a.jl:16\n   [2] top-level scope at /tmp/tmp9n7hag6a.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9n7hag6a.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp9n7hag6a.jl:29\n  Test threw exception\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n  MethodError: no method matching findfirst(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    findfirst(::Union{AbstractString, AbstractArray})\
    \ at array.jl:1701\n    findfirst(!Matched::Function, ::Any) at array.jl:1776\n\
    \    findfirst(::Any) at array.jl:1692\n  Stacktrace:\n   [1] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmp9n7hag6a.jl:16\n   [2] top-level scope at /tmp/tmp9n7hag6a.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9n7hag6a.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp9n7hag6a.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  MethodError: no method matching findfirst(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    findfirst(::Union{AbstractString, AbstractArray})\
    \ at array.jl:1701\n    findfirst(!Matched::Function, ::Any) at array.jl:1776\n\
    \    findfirst(::Any) at array.jl:1692\n  Stacktrace:\n   [1] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmp9n7hag6a.jl:16\n   [2] top-level scope at /tmp/tmp9n7hag6a.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9n7hag6a.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp9n7hag6a.jl:31\n  Test threw exception\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\n  MethodError: no method matching findfirst(::Array{Int64,1},\
    \ ::Int64)\n  Closest candidates are:\n    findfirst(::Union{AbstractString, AbstractArray})\
    \ at array.jl:1701\n    findfirst(!Matched::Function, ::Any) at array.jl:1776\n\
    \    findfirst(::Any) at array.jl:1692\n  Stacktrace:\n   [1] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmp9n7hag6a.jl:16\n   [2] top-level scope at /tmp/tmp9n7hag6a.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9n7hag6a.jl:24\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9n7hag6a.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sorted_lst\
    \ = sort(lst)\n    if sorted_lst[1] == sorted_lst[2]\n        return nothing\n\
    \    end\n    return sorted_lst[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_idx = findall(lst .== min_val)\n    lst = deleteat!(lst,\
    \ min_idx)\n    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8lf_3yfw.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmp8lf_3yfw.jl:18\n\
    \   [13] top-level scope at /tmp/tmp8lf_3yfw.jl:28\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmp8lf_3yfw.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmp8lf_3yfw.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmp8lf_3yfw.jl:18\n   [13] top-level scope at /tmp/tmp8lf_3yfw.jl:30\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmp8lf_3yfw.jl:24\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8lf_3yfw.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_idx = findall(x -> x == min_val, lst)\n    if length(min_idx)\
    \ > 1\n        return nothing\n    end\n    lst[min_idx] = typemax(Int64)\n  \
    \  return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeatex2x3.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 2, 3, 4, 5]) == 2\n  ArgumentError: indexed assignment\
    \ with a single value to many locations is not supported; perhaps use broadcasting\
    \ `.=` instead?\n  Stacktrace:\n   [1] setindex_shape_check(::Int64, ::Int64)\
    \ at ./indices.jl:258\n   [2] macro expansion at ./multidimensional.jl:779 [inlined]\n\
    \   [3] _unsafe_setindex!(::IndexLinear, ::Array{Int64,1}, ::Int64, ::Array{Int64,1})\
    \ at ./multidimensional.jl:774\n   [4] _setindex! at ./multidimensional.jl:769\
    \ [inlined]\n   [5] setindex! at ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1})\
    \ at /tmp/tmpeatex2x3.jl:20\n   [7] top-level scope at /tmp/tmpeatex2x3.jl:28\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpeatex2x3.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpeatex2x3.jl:29\n  Test threw exception\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpeatex2x3.jl:20\n   [7] top-level scope at /tmp/tmpeatex2x3.jl:29\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpeatex2x3.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpeatex2x3.jl:32\n  Test threw exception\n  Expression: candidate([1,\
    \ 1, 1, 1, 0]) == 1\n  ArgumentError: indexed assignment with a single value to\
    \ many locations is not supported; perhaps use broadcasting `.=` instead?\n  Stacktrace:\n\
    \   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\n   [2] macro\
    \ expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpeatex2x3.jl:20\n   [7] top-level scope at /tmp/tmpeatex2x3.jl:32\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpeatex2x3.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpeatex2x3.jl:34\n  Test threw exception\n  Expression: candidate([-35,\
    \ 34, 12, -45]) == -35\n  ArgumentError: indexed assignment with a single value\
    \ to many locations is not supported; perhaps use broadcasting `.=` instead?\n\
    \  Stacktrace:\n   [1] setindex_shape_check(::Int64, ::Int64) at ./indices.jl:258\n\
    \   [2] macro expansion at ./multidimensional.jl:779 [inlined]\n   [3] _unsafe_setindex!(::IndexLinear,\
    \ ::Array{Int64,1}, ::Int64, ::Array{Int64,1}) at ./multidimensional.jl:774\n\
    \   [4] _setindex! at ./multidimensional.jl:769 [inlined]\n   [5] setindex! at\
    \ ./abstractarray.jl:1073 [inlined]\n   [6] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmpeatex2x3.jl:20\n   [7] top-level scope at /tmp/tmpeatex2x3.jl:34\n \
    \  [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpeatex2x3.jl:27\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    3      4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeatex2x3.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    lst_without_min = lst[lst .!= min_val]\n    return minimum(lst_without_min)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph8m4_amp.jl:27\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmph8m4_amp.jl:17\n\
    \   [13] top-level scope at /tmp/tmph8m4_amp.jl:27\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmph8m4_amp.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmph8m4_amp.jl:29\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmph8m4_amp.jl:17\n   [13] top-level scope at /tmp/tmph8m4_amp.jl:29\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmph8m4_amp.jl:23\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph8m4_amp.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr96o0_zh.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpr96o0_zh.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr96o0_zh.jl:21\ntest set: Test Failed at /tmp/tmpr96o0_zh.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr96o0_zh.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr96o0_zh.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr96o0_zh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    sort!(lst)\n\
    \    if lst[1] == lst[2]\n        return nothing\n    end\n    return lst[2]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6smil3qt.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp6smil3qt.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6smil3qt.jl:21\ntest set: Test Failed at /tmp/tmp6smil3qt.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6smil3qt.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6smil3qt.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6smil3qt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    min_val\
    \ = minimum(lst)\n    min_idx = findall(lst .== min_val)\n    lst = deleteat!(lst,\
    \ min_idx)\n    return minimum(lst)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppn37wvkv.jl:28\n  Test threw exception\n\
    \  Expression: candidate([1, 1]) == nothing\n  ArgumentError: reducing over an\
    \ empty collection is not allowed\n  Stacktrace:\n   [1] _empty_reduce_error()\
    \ at ./reduce.jl:295\n   [2] reduce_empty(::Function, ::Type{T} where T) at ./reduce.jl:305\n\
    \   [3] mapreduce_empty(::typeof(identity), ::Function, ::Type{T} where T) at\
    \ ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392 [inlined]\n   [5] _mapreduce_dim\
    \ at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580 at ./reducedim.jl:307\
    \ [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n   [8] _minimum\
    \ at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656 [inlined]\n\
    \   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum at ./reducedim.jl:652\
    \ [inlined]\n   [12] next_smallest(::Array{Int64,1}) at /tmp/tmppn37wvkv.jl:18\n\
    \   [13] top-level scope at /tmp/tmppn37wvkv.jl:28\n   [14] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmppn37wvkv.jl:24\n  \ntest set: Error During\
    \ Test at /tmp/tmppn37wvkv.jl:30\n  Test threw exception\n  Expression: candidate([1,\
    \ 1]) == nothing\n  ArgumentError: reducing over an empty collection is not allowed\n\
    \  Stacktrace:\n   [1] _empty_reduce_error() at ./reduce.jl:295\n   [2] reduce_empty(::Function,\
    \ ::Type{T} where T) at ./reduce.jl:305\n   [3] mapreduce_empty(::typeof(identity),\
    \ ::Function, ::Type{T} where T) at ./reduce.jl:335\n   [4] _mapreduce at ./reduce.jl:392\
    \ [inlined]\n   [5] _mapreduce_dim at ./reducedim.jl:312 [inlined]\n   [6] #mapreduce#580\
    \ at ./reducedim.jl:307 [inlined]\n   [7] mapreduce at ./reducedim.jl:307 [inlined]\n\
    \   [8] _minimum at ./reducedim.jl:657 [inlined]\n   [9] _minimum at ./reducedim.jl:656\
    \ [inlined]\n   [10] #minimum#589 at ./reducedim.jl:652 [inlined]\n   [11] minimum\
    \ at ./reducedim.jl:652 [inlined]\n   [12] next_smallest(::Array{Int64,1}) at\
    \ /tmp/tmppn37wvkv.jl:18\n   [13] top-level scope at /tmp/tmppn37wvkv.jl:30\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmppn37wvkv.jl:24\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    5      2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppn37wvkv.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb54b36n8.jl:45\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpb54b36n8.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb54b36n8.jl:43\ntest set: Test Failed at /tmp/tmpb54b36n8.jl:48\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb54b36n8.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb54b36n8.jl:43\ntest set: Test Failed at /tmp/tmpb54b36n8.jl:50\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpb54b36n8.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb54b36n8.jl:43\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb54b36n8.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    return sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = next_smallest;\n\t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5,\
    \ 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if lst[1]\
    \ < lst[2]\n        return lst[2]\n    else\n        return lst[1]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp883ksos2.jl:27\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp883ksos2.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp883ksos2.jl:25\ntest set: Test Failed at /tmp/tmp883ksos2.jl:29\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp883ksos2.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp883ksos2.jl:25\ntest set: Test Failed at /tmp/tmp883ksos2.jl:31\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp883ksos2.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp883ksos2.jl:25\ntest set: Test Failed at /tmp/tmp883ksos2.jl:32\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp883ksos2.jl:32\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp883ksos2.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp883ksos2.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi8m64ivt.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpi8m64ivt.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi8m64ivt.jl:21\ntest set: Test Failed at /tmp/tmpi8m64ivt.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi8m64ivt.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi8m64ivt.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi8m64ivt.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) == 2\n        if lst[1] != lst[2]\n            return lst[2]\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[2]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[1] != lst[2]\n            return lst[2]\n        end\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0tr8nmgj.jl:45\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp0tr8nmgj.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0tr8nmgj.jl:43\ntest set: Test Failed at /tmp/tmp0tr8nmgj.jl:48\n\
    \  Expression: candidate([1, 1, 1, 1, 0]) == 1\n   Evaluated: nothing == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0tr8nmgj.jl:48\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0tr8nmgj.jl:43\ntest set: Test Failed at /tmp/tmp0tr8nmgj.jl:50\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0tr8nmgj.jl:50\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0tr8nmgj.jl:43\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0tr8nmgj.jl:41\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if length(lst)\
    \ == 2\n        if lst[1] == lst[2]\n            return nothing\n        end\n\
    \    end\n    lst = sort(lst)\n    for i in 1:length(lst)-1\n        if lst[i]\
    \ != lst[i+1]\n            return lst[i+1]\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1, 2, 3, 4,\
    \ 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj2dd876k.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpj2dd876k.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj2dd876k.jl:21\ntest set: Test Failed at /tmp/tmpj2dd876k.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj2dd876k.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj2dd876k.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj2dd876k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp12f6wje9.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp12f6wje9.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12f6wje9.jl:21\ntest set: Test Failed at /tmp/tmp12f6wje9.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp12f6wje9.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12f6wje9.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12f6wje9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpba4xu97u.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpba4xu97u.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpba4xu97u.jl:21\ntest set: Test Failed at /tmp/tmpba4xu97u.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpba4xu97u.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpba4xu97u.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpba4xu97u.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    if lst[1]\
    \ < lst[2]\n        return lst[2]\n    else\n        return lst[1]\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8szmrp4c.jl:27\n  Expression: candidate([5,\
    \ 1, 4, 3, 2]) == 2\n   Evaluated: 5 == 2\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp8szmrp4c.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8szmrp4c.jl:25\ntest set: Test Failed at /tmp/tmp8szmrp4c.jl:29\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8szmrp4c.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8szmrp4c.jl:25\ntest set: Test Failed at /tmp/tmp8szmrp4c.jl:31\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8szmrp4c.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8szmrp4c.jl:25\ntest set: Test Failed at /tmp/tmp8szmrp4c.jl:32\n\
    \  Expression: candidate([-35, 34, 12, -45]) == -35\n   Evaluated: 34 == -35\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8szmrp4c.jl:32\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8szmrp4c.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     4      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8szmrp4c.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) < 2\n        return nothing\n    end\n    return\
    \ sort(lst)[2]\nend\nusing Test\n\n@testset begin\n\ncandidate = next_smallest;\n\
    \t@test(candidate([1, 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) ==\
    \ 2)\n\t@test(candidate(Vector{Int64}([])) == nothing)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([1, 1, 1, 1, 0]) == 1)\n\t@test(candidate([1,\
    \ 1]) == nothing)\n\t@test(candidate([-35, 34, 12, -45]) == -35)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo_vya41x.jl:25\n  Expression: candidate([1,\
    \ 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpo_vya41x.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo_vya41x.jl:21\ntest set: Test Failed at /tmp/tmpo_vya41x.jl:27\n\
    \  Expression: candidate([1, 1]) == nothing\n   Evaluated: 1 == nothing\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo_vya41x.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo_vya41x.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     2      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_vya41x.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
    \ that returns the 2nd smallest element of the list.\n    Return None if there\
    \ is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
    \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1])\
    \ == None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64,\
    \ Nothing} \n    if length(lst) == 0\n        return nothing\n    end\n    if\
    \ length(lst) == 1\n        return nothing\n    end\n    if length(lst) == 2\n\
    \        if lst[1] == lst[2]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2]\n            return nothing\n\
    \        end\n    end\n    if length(lst) > 2\n        if lst[1] == lst[3]\n \
    \           return nothing\n        end\n    end\n    if length(lst) > 2\n   \
    \     if lst[2] == lst[3]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 2\n        if lst[1] == lst[2] == lst[3]\n            return\
    \ nothing\n        end\n    end\n    if length(lst) > 3\n        if lst[1] ==\
    \ lst[2] == lst[3] == lst[4]\n            return nothing\n        end\n    end\n\
    \    if length(lst) > 4\n        if lst[1] == lst[2] == lst[3] == lst[4] == lst[5]\n\
    \            return nothing\n        end\n    end\n    if length(lst) > 5\n  \
    \      if lst[1] == lst[2] == lst[3] == lst[4] == lst[5] == lst[6]\n         \
    \   return nothing\n        end\n    end\n    if length(lst) > 6\n        if lst[1]\
    \ == lst[2] == lst[3] == lst[4] == lst[5] == lst[6] == lst[7]\n            return\
    \ nothing\n        end\n    end\n    if length(lst) > 7\n        if lst[1] ==\
    \ lst[2] == lst[3] == lst[4] == lst[5] == lst[6] == lst[7] == lst[8]\n       \
    \     return nothing\n        end\n    end\n    if length(lst) > 8\n       \n\
    using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
    \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
    \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1,\
    \ 1, 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35,\
    \ 34, 12, -45]) == -35)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxx6agkdb.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxx6agkdb.jl:1\n"
  exit_code: 1
  status: SyntaxError
