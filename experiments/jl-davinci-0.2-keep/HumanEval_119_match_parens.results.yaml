name: HumanEval_119_match_parens
language: julia
results:
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"\" && s2 == \"\"\n        return \"Yes\"\n    elseif s1\
    \ == \"\"\n        return \"No\"\n    elseif s2 == \"\"\n        return \"No\"\
    \n    elseif s1[1] == '('\n        if s2[end] == ')'\n            return match_parens([s1[2:end],\
    \ s2[1:end-1]])\n        else\n            return match_parens([s1[2:end], s2])\n\
    \        end\n    elseif s1[1] == ')'\n        if s2[end] == '('\n           \
    \ return match_parens([s1[2:end], s2[1:end-1]])\n        else\n            return\
    \ match_parens([s1[2:end], s2])\n        end\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp85f905b0.jl:42\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp85f905b0.jl:42 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85f905b0.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp85f905b0.jl:45\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp85f905b0.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85f905b0.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp85f905b0.jl:46\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp85f905b0.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85f905b0.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp85f905b0.jl:48\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp85f905b0.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85f905b0.jl:41\ntest set: Test\
    \ Failed at /tmp/tmp85f905b0.jl:51\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp85f905b0.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85f905b0.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp85f905b0.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1d5sx2w2.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmp1d5sx2w2.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp1d5sx2w2.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1d5sx2w2.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp1d5sx2w2.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmp1d5sx2w2.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp1d5sx2w2.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1d5sx2w2.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp1d5sx2w2.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ goes here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6k6g35r1.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6k6g35r1.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k6g35r1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6k6g35r1.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6k6g35r1.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k6g35r1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6k6g35r1.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6k6g35r1.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k6g35r1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6k6g35r1.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6k6g35r1.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k6g35r1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6k6g35r1.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6k6g35r1.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k6g35r1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp6k6g35r1.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6k6g35r1.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6k6g35r1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphv7bhr92.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphv7bhr92.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv7bhr92.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphv7bhr92.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphv7bhr92.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv7bhr92.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphv7bhr92.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphv7bhr92.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv7bhr92.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphv7bhr92.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphv7bhr92.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv7bhr92.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphv7bhr92.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphv7bhr92.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphv7bhr92.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphv7bhr92.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphv7bhr92.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphv7bhr92.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for s in lst\n        for c in s\n            if c == '('\n       \
    \         open_parens += 1\n            elseif c == ')'\n                open_parens\
    \ -= 1\n            end\n            if open_parens < 0\n                return\
    \ \"No\"\n            end\n        end\n    end\n    if open_parens == 0\n   \
    \     return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbt0k_64l.jl:43\n  Expression: candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbt0k_64l.jl:43 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbt0k_64l.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpbt0k_64l.jl:44\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbt0k_64l.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbt0k_64l.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpbt0k_64l.jl:51\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbt0k_64l.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbt0k_64l.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbt0k_64l.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    if length(lst[1])\
    \ == 0\n        return \"Yes\"\n    end\n    if length(lst[2]) == 0\n        return\
    \ \"Yes\"\n    end\n    if lst[1][1] == '(' && lst[2][1] == ')'\n        return\
    \ match_parens([lst[1][2:end], lst[2][2:end]])\n    end\n    if lst[1][1] == ')'\
    \ && lst[2][1] == '('\n        return match_parens([lst[1][2:end], lst[2][2:end]])\n\
    \    end\n    if lst[1][1] == '(' && lst[2][1] == '('\n        return match_parens([lst[1][2:end],\
    \ lst[2]])\n    end\n    if lst[1][1] == ')' && lst[2][1] == ')'\n        return\
    \ match_parens([lst[1][2:end], lst[2]])\n    end\n    return \"No\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjcyxjp7x.jl:42\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjcyxjp7x.jl:42 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjcyxjp7x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpjcyxjp7x.jl:43\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjcyxjp7x.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjcyxjp7x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpjcyxjp7x.jl:46\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjcyxjp7x.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjcyxjp7x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpjcyxjp7x.jl:48\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjcyxjp7x.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjcyxjp7x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpjcyxjp7x.jl:49\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjcyxjp7x.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjcyxjp7x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpjcyxjp7x.jl:50\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjcyxjp7x.jl:5"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjcyxjp7x.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(x -> x == ')', s1) + count(x -> x == ')', s2) >\n        count(x\
    \ -> x == '(', s1) + count(x -> x == '(', s2)\n        return \"No\"\n    end\n\
    \    s = s1 * s2\n    cnt = 0\n    for c in s\n        if c == '('\n         \
    \   cnt += 1\n        else\n            cnt -= 1\n        end\n        if cnt\
    \ < 0\n            return \"No\"\n        end\n    end\n    return \"Yes\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsgy3o0rb.jl:43\n  Expression: candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsgy3o0rb.jl:43 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsgy3o0rb.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpsgy3o0rb.jl:44\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsgy3o0rb.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsgy3o0rb.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpsgy3o0rb.jl:47\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsgy3o0rb.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsgy3o0rb.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpsgy3o0rb.jl:51\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsgy3o0rb.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsgy3o0rb.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsgy3o0rb.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"\"\n        return \"Yes\"\n    elseif s2 == \"\"\n    \
    \    return \"Yes\"\n    elseif s1[1] == '('\n        if s2[end] == ')'\n    \
    \        return match_parens([s1[2:end], s2[1:end-1]])\n        else\n       \
    \     return match_parens([s1[2:end], s2])\n        end\n    elseif s1[1] == ')'\n\
    \        if s2[end] == '('\n            return match_parens([s1[2:end], s2[1:end-1]])\n\
    \        else\n            return match_parens([s1[2:end], s2])\n        end\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp00ox1sz3.jl:41\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp00ox1sz3.jl:41 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp00ox1sz3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp00ox1sz3.jl:42\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp00ox1sz3.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp00ox1sz3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp00ox1sz3.jl:45\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp00ox1sz3.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp00ox1sz3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp00ox1sz3.jl:47\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp00ox1sz3.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp00ox1sz3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp00ox1sz3.jl:48\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp00ox1sz3.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp00ox1sz3.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp00ox1sz3.jl:49\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp00ox1sz3.jl:4"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp00ox1sz3.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s = lst[1]\
    \ * lst[2]\n    cnt = 0\n    for i in s\n        if i == '('\n            cnt\
    \ += 1\n        else\n            cnt -= 1\n        end\n        if cnt < 0\n\
    \            return \"No\"\n        end\n    end\n    if cnt == 0\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpncwiu28g.jl:42\n  Expression: candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpncwiu28g.jl:42 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpncwiu28g.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpncwiu28g.jl:43\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpncwiu28g.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpncwiu28g.jl:38\ntest set: Test\
    \ Failed at /tmp/tmpncwiu28g.jl:50\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpncwiu28g.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpncwiu28g.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpncwiu28g.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for s in lst\n        for c in s\n            if c == '('\n       \
    \         open_parens += 1\n            elseif c == ')'\n                open_parens\
    \ -= 1\n            end\n            if open_parens < 0\n                return\
    \ \"No\"\n            end\n        end\n    end\n    if open_parens == 0\n   \
    \     return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj7gwpmue.jl:43\n  Expression: candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpj7gwpmue.jl:43 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7gwpmue.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpj7gwpmue.jl:44\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj7gwpmue.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7gwpmue.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpj7gwpmue.jl:51\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj7gwpmue.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj7gwpmue.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj7gwpmue.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in lst[1]\n        if i == '('\n            open_parens += 1\n\
    \        else\n            open_parens -= 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open_parens += 1\n        else\n  \
    \          open_parens -= 1\n        end\n    end\n    if open_parens == 0\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzt4_3vpp.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzt4_3vpp.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzt4_3vpp.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzt4_3vpp.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if count(s1, '(') == count(s1, ')') && count(s2, '(') ==\
    \ count(s2, ')')\n        return \"Yes\"\n    else\n        return \"No\"\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpks7ruxu1.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ objects of type String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmpks7ruxu1.jl:17\\n   [5] macro expansion\\n     @ /tmp/tmpks7ruxu1.jl:28\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpks7ruxu1.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpks7ruxu1.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: objects of type String\
    \ are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String, itr::Char;\
    \ init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String, itr::Char)\\\
    n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\n   \
    \  @ Main /tmp/tmpks7ruxu1.jl:17\\n   [5] macro expansion\\n     @ /tmp/tmpks7ruxu1.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpks7ruxu1.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpks7ruxu1.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: objects of type\
    \ String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmpks7ruxu1.jl:17\\n   [5] ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmple_3fu6r.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmple_3fu6r.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmple_3fu6r.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmple_3fu6r.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmple_3fu6r.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmple_3fu6r.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmple_3fu6r.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmple_3fu6r.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmple_3fu6r.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    else\n        return \"No\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvoqcddtx.jl:32\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvoqcddtx.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvoqcddtx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvoqcddtx.jl:35\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvoqcddtx.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvoqcddtx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvoqcddtx.jl:36\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvoqcddtx.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvoqcddtx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvoqcddtx.jl:38\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvoqcddtx.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvoqcddtx.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvoqcddtx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    Check if it is possible to concatenate the two strings in some order,\n \
    \   that the resulting string will be good.\n    \"\"\"\n    if lst[1][end] ==\
    \ '(' && lst[2][1] == ')'\n        return \"Yes\"\n    elseif lst[1][end] == ')'\
    \ && lst[2][1] == '('\n        return \"Yes\"\n    else\n        return \"No\"\
    \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t\
    @test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"\
    ]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\t@test(candidate([\"\
    (()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\", \"((())\"]) ==\
    \ \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\"\
    )(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo8wpi7su.jl:35\n  Expression: candidate([\"\
    (()(())\", \"())())\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo8wpi7su.jl:35 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8wpi7su.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpo8wpi7su.jl:38\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo8wpi7su.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8wpi7su.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpo8wpi7su.jl:39\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo8wpi7su.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8wpi7su.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpo8wpi7su.jl:41\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo8wpi7su.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8wpi7su.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpo8wpi7su.jl:42\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo8wpi7su.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8wpi7su.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo8wpi7su.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_fctvlhk.jl:24\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp_fctvlhk.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fctvlhk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_fctvlhk.jl:27\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_fctvlhk.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fctvlhk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_fctvlhk.jl:28\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_fctvlhk.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fctvlhk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_fctvlhk.jl:30\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_fctvlhk.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fctvlhk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_fctvlhk.jl:34\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_fctvlhk.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fctvlhk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_fctvlhk.jl:35\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_fctvl"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_fctvlhk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if count(x -> x == ')', s1) == count(x -> x == '(', s2)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7qu5iytc.jl:28\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp7qu5iytc.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7qu5iytc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7qu5iytc.jl:31\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7qu5iytc.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7qu5iytc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7qu5iytc.jl:32\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7qu5iytc.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7qu5iytc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7qu5iytc.jl:33\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7qu5iytc.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7qu5iytc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7qu5iytc.jl:34\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7qu5iytc.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7qu5iytc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmp7qu5iytc.jl:37\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7qu"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7qu5iytc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if (count(x -> x == '(', s1) + count(x -> x == '(', s2))\
    \ == \n        (count(x -> x == ')', s1) + count(x -> x == ')', s2))\n       \
    \ return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplmx9ykv5.jl:38\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmplmx9ykv5.jl:38 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplmx9ykv5.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplmx9ykv5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for i in lst[1]\n        if i == '('\n      \
    \      open_parens += 1\n        else\n            close_parens += 1\n       \
    \ end\n    end\n    for i in lst[2]\n        if i == '('\n            open_parens\
    \ += 1\n        else\n            close_parens += 1\n        end\n    end\n  \
    \  if open_parens == close_parens\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpreo8qc6p.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpreo8qc6p.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpreo8qc6p.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpreo8qc6p.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz0wun6t0.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpz0wun6t0.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0wun6t0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz0wun6t0.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz0wun6t0.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0wun6t0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz0wun6t0.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz0wun6t0.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0wun6t0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz0wun6t0.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz0wun6t0.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0wun6t0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz0wun6t0.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz0wun6t0.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz0wun6t0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz0wun6t0.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz0wun6t0.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz0wun6t0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for i in lst[1]\n        if i == '('\n      \
    \      open_parens += 1\n        else\n            close_parens += 1\n       \
    \ end\n    end\n    for i in lst[2]\n        if i == '('\n            open_parens\
    \ += 1\n        else\n            close_parens += 1\n        end\n    end\n  \
    \  if open_parens == close_parens\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_2fl5s2l.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_2fl5s2l.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_2fl5s2l.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_2fl5s2l.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0jjgmlsz.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmp0jjgmlsz.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp0jjgmlsz.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0jjgmlsz.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp0jjgmlsz.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmp0jjgmlsz.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp0jjgmlsz.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0jjgmlsz.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp0jjgmlsz.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open = 0\n\
    \    close = 0\n    for i in lst[1]\n        if i == '('\n            open +=\
    \ 1\n        else\n            close += 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open += 1\n        else\n         \
    \   close += 1\n        end\n    end\n    if open == close\n        return \"\
    Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjm0uisoe.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjm0uisoe.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjm0uisoe.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjm0uisoe.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk42f57t5.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpk42f57t5.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpk42f57t5.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk42f57t5.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpk42f57t5.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpk42f57t5.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpk42f57t5.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk42f57t5.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpk42f57t5.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s = lst[1]\n\
    \    t = lst[2]\n    if count(x -> x == ')', s) + count(x -> x == ')', t) > count(x\
    \ -> x == '(', s) + count(x -> x == '(', t)\n        return \"No\"\n    end\n\
    \    if count(x -> x == ')', s) > count(x -> x == '(', s)\n        return \"No\"\
    \n    end\n    if count(x -> x == ')', t) > count(x -> x == '(', t)\n        return\
    \ \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvhohjjvr.jl:34\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvhohjjvr.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvhohjjvr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpvhohjjvr.jl:37\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvhohjjvr.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvhohjjvr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpvhohjjvr.jl:38\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvhohjjvr.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvhohjjvr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpvhohjjvr.jl:40\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvhohjjvr.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvhohjjvr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpvhohjjvr.jl:41\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvhohjjvr.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvhohjjvr.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpvhohjjvr.jl:42\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvhohjjvr.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"\"\n        return \"Yes\"\n    elseif s2 == \"\"\n    \
    \    return \"Yes\"\n    elseif s1[1] == '('\n        return match_parens([s1[2:end],\
    \ s2])\n    elseif s2[end] == ')'\n        return match_parens([s1, s2[1:end-1]])\n\
    \    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfdf9_wzp.jl:35\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfdf9_wzp.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfdf9_wzp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfdf9_wzp.jl:37\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfdf9_wzp.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfdf9_wzp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfdf9_wzp.jl:38\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfdf9_wzp.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfdf9_wzp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfdf9_wzp.jl:40\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfdf9_wzp.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfdf9_wzp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfdf9_wzp.jl:41\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfdf9_wzp.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfdf9_wzp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpfdf9_wzp.jl:45\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfdf"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfdf9_wzp.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1[1] == ')' || s2[1] == ')'\n        return \"No\"\n    end\n \
    \   if s1[end] == '(' || s2[end] == '('\n        return \"No\"\n    end\n    s\
    \ = s1 * s2\n    if s[1] == ')' || s[end] == '('\n        return \"No\"\n    end\n\
    \    if s[1] == '(' && s[end] == ')'\n        return \"Yes\"\n    end\n    return\
    \ \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj_exumca.jl:37\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpj_exumca.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj_exumca.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj_exumca.jl:39\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj_exumca.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj_exumca.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj_exumca.jl:40\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj_exumca.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj_exumca.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj_exumca.jl:41\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj_exumca.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj_exumca.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj_exumca.jl:42\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj_exumca.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj_exumca.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpj_exumca.jl:43\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /t"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj_exumca.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in 1:length(lst[1])\n        if lst[1][i] == '('\n          \
    \  open_parens += 1\n        else\n            open_parens -= 1\n        end\n\
    \    end\n    for i in 1:length(lst[2])\n        if lst[2][i] == '('\n       \
    \     open_parens += 1\n        else\n            open_parens -= 1\n        end\n\
    \    end\n    if open_parens == 0\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgsiue92f.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgsiue92f.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgsiue92f.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgsiue92f.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in lst[1]\n        if i == '('\n            open_parens += 1\n\
    \        else\n            open_parens -= 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open_parens += 1\n        else\n  \
    \          open_parens -= 1\n        end\n    end\n    if open_parens == 0\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3kgcwlvr.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3kgcwlvr.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3kgcwlvr.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3kgcwlvr.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_tcjbt97.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_tcjbt97.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tcjbt97.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_tcjbt97.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_tcjbt97.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tcjbt97.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_tcjbt97.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_tcjbt97.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tcjbt97.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_tcjbt97.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_tcjbt97.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tcjbt97.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_tcjbt97.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_tcjbt97.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tcjbt97.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp_tcjbt97.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_tcjbt97.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_tcjbt97.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in lst[1]\n        if i == '('\n            open_parens += 1\n\
    \        else\n            open_parens -= 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open_parens += 1\n        else\n  \
    \          open_parens -= 1\n        end\n    end\n    if open_parens == 0\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb8g6stwp.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpb8g6stwp.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb8g6stwp.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb8g6stwp.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv6j5ipyy.jl:24\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpv6j5ipyy.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv6j5ipyy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv6j5ipyy.jl:27\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv6j5ipyy.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv6j5ipyy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv6j5ipyy.jl:28\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv6j5ipyy.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv6j5ipyy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv6j5ipyy.jl:30\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv6j5ipyy.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv6j5ipyy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv6j5ipyy.jl:34\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv6j5ipyy.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv6j5ipyy.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv6j5ipyy.jl:35\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv6j5ip"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv6j5ipyy.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in lst[1]\n        if i == '('\n            open_parens += 1\n\
    \        else\n            open_parens -= 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open_parens += 1\n        else\n  \
    \          open_parens -= 1\n        end\n    end\n    if open_parens == 0\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp18t1wxzh.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp18t1wxzh.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp18t1wxzh.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp18t1wxzh.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # check\
    \ if the first string is good\n    if !is_good(lst[1])\n        return \"No\"\n\
    \    end\n    # check if the second string is good\n    if !is_good(lst[2])\n\
    \        return \"No\"\n    end\n    # check if the concatenation of the two strings\
    \ is good\n    if !is_good(lst[1] * lst[2])\n        return \"No\"\n    end\n\
    \    # check if the concatenation of the two strings in reverse order is good\n\
    \    if !is_good(lst[2] * lst[1])\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t\
    @test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"\
    ]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\t@test(candidate([\"\
    (()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\", \"((())\"]) ==\
    \ \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\"\
    )(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptftstf5l.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  UndefVarError:\
    \ is_good not defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmptftstf5l.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmptftstf5l.jl:39\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptftstf5l.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmptftstf5l.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  UndefVarError: is_good not defined\\\
    n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main /tmp/tmptftstf5l.jl:17\\\
    n   [2] macro expansion\\n     @ /tmp/tmptftstf5l.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptftstf5l.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmptftstf5l.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  UndefVarError: is_good not\
    \ defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @\
    \ Main /tmp/tmptftstf5l.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmptftstf5l.jl:41\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptftstf5l.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmptftstf5l.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  UndefVarError: is_good not\
    \ defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @\
    \ Main /tmp/tmptftstf5l.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmptftstf5l.jl:42\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptft"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    n1, n2 = length(s1), length(s2)\n    if n1 == 0 && n2 == 0\n      \
    \  return \"Yes\"\n    elseif n1 == 0\n        return \"No\"\n    elseif n2 ==\
    \ 0\n        return \"Yes\"\n    elseif s1[end] == '(' && s2[1] == ')'\n     \
    \   return match_parens([s1[1:end-1], s2[2:end]])\n    elseif s1[end] == ')' &&\
    \ s2[1] == '('\n        return match_parens([s1[1:end-1], s2[2:end]])\n    else\n\
    \        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxk2gkod0.jl:40\n  Expression: candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxk2gkod0.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxk2gkod0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxk2gkod0.jl:41\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxk2gkod0.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxk2gkod0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxk2gkod0.jl:43\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxk2gkod0.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxk2gkod0.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpxk2gkod0.jl:46\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxk2gkod0.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxk2gkod0.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxk2gkod0.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaq9v1pvc.jl:24\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpaq9v1pvc.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq9v1pvc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaq9v1pvc.jl:27\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaq9v1pvc.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq9v1pvc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaq9v1pvc.jl:28\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaq9v1pvc.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq9v1pvc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaq9v1pvc.jl:30\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaq9v1pvc.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq9v1pvc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaq9v1pvc.jl:34\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaq9v1pvc.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq9v1pvc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpaq9v1pvc.jl:35\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpaq9v1p"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaq9v1pvc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    s = s1 * s2\n    cnt = 0\n    for i in 1:length(s)\n   \
    \     if s[i] == '('\n            cnt += 1\n        else\n            cnt -= 1\n\
    \        end\n        if cnt < 0\n            return \"No\"\n        end\n   \
    \ end\n    if cnt == 0\n        return \"Yes\"\n    else\n        return \"No\"\
    \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t\
    @test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"\
    ]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\t@test(candidate([\"\
    (()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\", \"((())\"]) ==\
    \ \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\"\
    )(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsvto4edb.jl:43\n  Expression: candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsvto4edb.jl:43 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsvto4edb.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpsvto4edb.jl:44\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsvto4edb.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsvto4edb.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpsvto4edb.jl:51\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsvto4edb.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsvto4edb.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsvto4edb.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1[1] == ')' || s2[1] == ')'\n        return \"No\"\n    end\n \
    \   if s1[end] == '(' || s2[end] == '('\n        return \"No\"\n    end\n    if\
    \ count(x -> x == '(', s1) != count(x -> x == ')', s1)\n        return \"No\"\n\
    \    end\n    if count(x -> x == '(', s2) != count(x -> x == ')', s2)\n      \
    \  return \"No\"\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg5y6661y.jl:36\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpg5y6661y.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg5y6661y.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpg5y6661y.jl:39\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg5y6661y.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg5y6661y.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpg5y6661y.jl:40\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg5y6661y.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg5y6661y.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpg5y6661y.jl:42\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg5y6661y.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg5y6661y.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpg5y6661y.jl:46\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg5y6661y.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg5y6661y.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpg5y6661y.jl:47\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg5y666"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg5y6661y.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1j96fgke.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1j96fgke.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1j96fgke.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1j96fgke.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1j96fgke.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1j96fgke.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1j96fgke.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1j96fgke.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1j96fgke.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1j96fgke.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1j96fgke.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1j96fgke.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1j96fgke.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1j96fgke.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1j96fgke.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1j96fgke.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1j96fgke.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1j96fgke.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8pwof_bb.jl:24\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8pwof_bb.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8pwof_bb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8pwof_bb.jl:27\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8pwof_bb.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8pwof_bb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8pwof_bb.jl:28\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8pwof_bb.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8pwof_bb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8pwof_bb.jl:30\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8pwof_bb.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8pwof_bb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8pwof_bb.jl:34\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8pwof_bb.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8pwof_bb.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8pwof_bb.jl:35\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8pwof_"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8pwof_bb.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpahh2k4gv.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpahh2k4gv.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpahh2k4gv.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpahh2k4gv.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpahh2k4gv.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpahh2k4gv.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpahh2k4gv.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpahh2k4gv.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpahh2k4gv.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for i in lst[1]\n        if i == '('\n      \
    \      open_parens += 1\n        else\n            close_parens += 1\n       \
    \ end\n    end\n    for i in lst[2]\n        if i == '('\n            open_parens\
    \ += 1\n        else\n            close_parens += 1\n        end\n    end\n  \
    \  if open_parens == close_parens\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_px7e_mr.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_px7e_mr.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_px7e_mr.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_px7e_mr.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in lst[1]\n        if i == '('\n            open_parens += 1\n\
    \        else\n            open_parens -= 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open_parens += 1\n        else\n  \
    \          open_parens -= 1\n        end\n    end\n    if open_parens == 0\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_2i74gdj.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_2i74gdj.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_2i74gdj.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_2i74gdj.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc4mjfsf4.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpc4mjfsf4.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4mjfsf4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc4mjfsf4.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc4mjfsf4.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4mjfsf4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc4mjfsf4.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc4mjfsf4.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4mjfsf4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc4mjfsf4.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc4mjfsf4.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4mjfsf4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc4mjfsf4.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc4mjfsf4.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc4mjfsf4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpc4mjfsf4.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc4mjfsf4.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc4mjfsf4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in lst[1]\n        if i == '('\n            open_parens += 1\n\
    \        else\n            open_parens -= 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open_parens += 1\n        else\n  \
    \          open_parens -= 1\n        end\n    end\n    if open_parens == 0\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjomlsf3_.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjomlsf3_.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjomlsf3_.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjomlsf3_.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    You are given a list of two strings, both strings consist of open\n    parentheses\
    \ '(' or close parentheses ')' only.\n    Your job is to check if it is possible\
    \ to concatenate the two strings in\n    some order, that the resulting string\
    \ will be good.\n    A string S is considered to be good if and only if all parentheses\
    \ in S\n    are balanced. For example: the string '(())()' is good, while the\
    \ string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good\
    \ string, and return 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpcq8esvzd.jl:1\nin expression starting at /tmp/tmpcq8esvzd.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv4256atk.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpv4256atk.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv4256atk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv4256atk.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv4256atk.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv4256atk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv4256atk.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv4256atk.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv4256atk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv4256atk.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv4256atk.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv4256atk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv4256atk.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv4256atk.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv4256atk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpv4256atk.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv4256atk.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv4256atk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Check\
    \ if the first string is good\n    if isgood(lst[1])\n        return \"Yes\"\n\
    \    end\n    # Check if the second string is good\n    if isgood(lst[2])\n  \
    \      return \"Yes\"\n    end\n    # Check if the concatenation of the two strings\
    \ is good\n    if isgood(lst[1] * lst[2])\n        return \"Yes\"\n    end\n \
    \   # Check if the concatenation of the two strings in reverse order is good\n\
    \    if isgood(lst[2] * lst[1])\n        return \"Yes\"\n    end\n    # If none\
    \ of the above is true, return \"No\"\n    return \"No\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8hxitt6k.jl:40\n  Test threw exception\n\
    \  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\n  UndefVarError: isgood\
    \ not defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @\
    \ Main /tmp/tmp8hxitt6k.jl:17\n   [2] macro expansion\n     @ /tmp/tmp8hxitt6k.jl:40\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8hxitt6k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp8hxitt6k.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\n  UndefVarError: isgood not defined\n \
    \ Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main /tmp/tmp8hxitt6k.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmp8hxitt6k.jl:41 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8hxitt6k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp8hxitt6k.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\n  UndefVarError: isgood not\
    \ defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main\
    \ /tmp/tmp8hxitt6k.jl:17\n   [2] macro expansion\n     @ /tmp/tmp8hxitt6k.jl:42\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8hxitt6k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp8hxitt6k.jl:43\n  Test threw exception\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\n  UndefVarError: isgood not defined\n\
    \  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main /tmp/tmp8hxitt6k.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmp8hxitt6k.jl:43 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp8hxitt6k.jl:39\ntest set:\
    \ Error During Test at /tmp/tmp8hxitt"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8hxitt6k.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if sum(s1) == 0 && sum(s2) == 0\n        return \"Yes\"\n    elseif\
    \ sum(s1) == 0 && sum(s2) < 0\n        return \"Yes\"\n    elseif sum(s1) > 0\
    \ && sum(s2) == 0\n        return \"Yes\"\n    elseif sum(s1) > 0 && sum(s2) <\
    \ 0\n        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp00qfpnv1.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ no method matching +(::Char, ::Char)\\n  Closest candidates are:\\n    +(::Any,\
    \ ::Any, !Matched::Any, !Matched::Any...) at operators.jl:560\\n    +(::T, !Matched::Integer)\
    \ where T<:AbstractChar at char.jl:223\\n    +(!Matched::Integer, ::AbstractChar)\
    \ at char.jl:224\\n  Stacktrace:\\n    [1] add_sum(x::Char, y::Char)\\n      @\
    \ Base ./reduce.jl:24\\n    [2] BottomRF\\n      @ ./reduce.jl:81 [inlined]\\\
    n    [3] _foldl_impl(op::Base.BottomRF{typeof(Base.add_sum)}, init::Base._InitialValue,\
    \ itr::String)\\n      @ Base ./reduce.jl:62\\n    [4] foldl_impl\\n      @ ./reduce.jl:48\
    \ [inlined]\\n    [5] mapfoldl_impl\\n      @ ./reduce.jl:44 [inlined]\\n    [6]\
    \ #mapfoldl#214\\n      @ ./reduce.jl:160 [inlined]\\n    [7] mapfoldl\\n    \
    \  @ ./reduce.jl:160 [inlined]\\n    [8] #mapreduce#218\\n      @ ./reduce.jl:287\
    \ [inlined]\\n    [9] mapreduce\\n      @ ./reduce.jl:287 [inlined]\\n   [10]\
    \ #sum#221\\n      @ ./reduce.jl:501 [inlined]\\n   [11] sum\\n      @ ./reduce.jl:501\
    \ [inlined]\\n   [12] #sum#222\\n      @ ./reduce.jl:528 [inlined]\\n   [13] sum\\\
    n      @ ./reduce.jl:528 [inlined]\\n   [14] match_parens(lst::Vector{String})\\\
    n      @ Main /tmp/tmp00qfpnv1.jl:17\\n   [15] macro expansion\\n      @ /tmp/tmp00qfpnv1.jl:34\
    \ [inlined]\\n   [16] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [17] top-level scope\\n      @ /tmp/tmp00qfpnv1.jl:33\\ntest\
    \ set: Error During Test at /tmp/tmp00qfpnv1.jl:35\\n  Test threw exception\\\
    n  Expression: candidate([\")\", \")\"]) == \"No\"\\n  MethodError: no method\
    \ matching isless(::Int64, ::Char)\\n  Closest candidates are:\\n    isless(!Matched::Char,\
    \ ::Char) at char.jl:209\\n    isless(!Matched::AbstractChar, ::AbstractChar)\
    \ at char.jl:216\\n    isless(::Real, !Matched::AbstractFloat) at operators.jl:168\\\
    n    ...\\n  Stacktrace:\\n   [1] <(x::Int64, y::Char)\\n     @ Base ./operators.jl:279\\\
    n   [2] >(x::Char, y::Int"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpaeod1uvc.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpaeod1uvc.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpaeod1uvc.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpaeod1uvc.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpaeod1uvc.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpaeod1uvc.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpaeod1uvc.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpaeod1uvc.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpaeod1uvc.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for s in lst\n        for c in s\n            if c == '('\n       \
    \         open_parens += 1\n            elseif c == ')'\n                open_parens\
    \ -= 1\n            end\n            if open_parens < 0\n                return\
    \ \"No\"\n            end\n        end\n    end\n    if open_parens == 0\n   \
    \     return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpai6i35ot.jl:43\n  Expression: candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpai6i35ot.jl:43 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpai6i35ot.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpai6i35ot.jl:44\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpai6i35ot.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpai6i35ot.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpai6i35ot.jl:51\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpai6i35ot.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpai6i35ot.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpai6i35ot.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp84gleeou.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp84gleeou.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp84gleeou.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp84gleeou.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp84gleeou.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp84gleeou.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp84gleeou.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp84gleeou.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp84gleeou.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp84gleeou.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp84gleeou.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp84gleeou.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp84gleeou.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp84gleeou.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp84gleeou.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp84gleeou.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp84gleeou.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp84gleeou.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzgq2q1b1.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzgq2q1b1.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzgq2q1b1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzgq2q1b1.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzgq2q1b1.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzgq2q1b1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzgq2q1b1.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzgq2q1b1.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzgq2q1b1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzgq2q1b1.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzgq2q1b1.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzgq2q1b1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzgq2q1b1.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzgq2q1b1.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzgq2q1b1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzgq2q1b1.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzgq2q1b1.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzgq2q1b1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n\
    \    elseif s1 == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1\
    \ == \"(\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"Yes\"\n    else\n        return \"No\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv09i6z5b.jl:34\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpv09i6z5b.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv09i6z5b.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpv09i6z5b.jl:35\n  Expression: candidate([\")\", \")\"]) ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv09i6z5b.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv09i6z5b.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpv09i6z5b.jl:37\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv09i6z5b.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv09i6z5b.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpv09i6z5b.jl:38\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv09i6z5b.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv09i6z5b.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpv09i6z5b.jl:40\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv09i6z5b.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv09i6z5b.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv09i6z5b.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(x -> x == '(', s1) == count(x -> x == ')', s1)\n        if\
    \ count(x -> x == '(', s2) == count(x -> x == ')', s2)\n            return \"\
    Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt97it09b.jl:29\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpt97it09b.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt97it09b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpt97it09b.jl:32\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt97it09b.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt97it09b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpt97it09b.jl:33\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt97it09b.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt97it09b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpt97it09b.jl:35\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt97it09b.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt97it09b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpt97it09b.jl:38\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt97it09b.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt97it09b.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpt97it09b.jl:39\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt97it"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt97it09b.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(x -> x == '(', s1) == count(x -> x == ')', s1)\n        if\
    \ count(x -> x == '(', s2) == count(x -> x == ')', s2)\n            return \"\
    Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5t6wj3fv.jl:29\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5t6wj3fv.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5t6wj3fv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5t6wj3fv.jl:32\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5t6wj3fv.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5t6wj3fv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5t6wj3fv.jl:33\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5t6wj3fv.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5t6wj3fv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5t6wj3fv.jl:35\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5t6wj3fv.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5t6wj3fv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5t6wj3fv.jl:38\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5t6wj3fv.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5t6wj3fv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5t6wj3fv.jl:39\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5t6wj"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5t6wj3fv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiy8coe6s.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpiy8coe6s.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpiy8coe6s.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiy8coe6s.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpiy8coe6s.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpiy8coe6s.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpiy8coe6s.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpiy8coe6s.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpiy8coe6s.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    Returns 'Yes' if the two strings can be concatenated to form a good string,\n\
    \    and 'No' otherwise.\n    \"\"\"\n    s1, s2 = lst[1], lst[2]\n    if is_good(s1)\
    \ && is_good(s2)\n        return \"Yes\"\n    end\n    if is_good(s1) && !is_good(s2)\n\
    \        return \"No\"\n    end\n    if !is_good(s1) && is_good(s2)\n        return\
    \ \"No\"\n    end\n    if !is_good(s1) && !is_good(s2)\n        return \"Yes\"\
    \n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t\
    @test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"\
    ]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\t@test(candidate([\"\
    (()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\", \"((())\"]) ==\
    \ \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\"\
    )(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3rg8d39z.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\n  UndefVarError: is_good\
    \ not defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @\
    \ Main /tmp/tmp3rg8d39z.jl:21\n   [2] macro expansion\n     @ /tmp/tmp3rg8d39z.jl:39\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3rg8d39z.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp3rg8d39z.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\n  UndefVarError: is_good not defined\n\
    \  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main /tmp/tmp3rg8d39z.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmp3rg8d39z.jl:40 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3rg8d39z.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp3rg8d39z.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\n  UndefVarError: is_good not\
    \ defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main\
    \ /tmp/tmp3rg8d39z.jl:21\n   [2] macro expansion\n     @ /tmp/tmp3rg8d39z.jl:41\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3rg8d39z.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp3rg8d39z.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\n  UndefVarError: is_good not defined\n\
    \  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main /tmp/tmp3rg8d39z.jl:21\n\
    \   [2] macro expansion\n     @ /tmp/tmp3rg8d39z.jl:42 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp3rg8d39z.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp3r"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3rg8d39z.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8vyf5nrt.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8vyf5nrt.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8vyf5nrt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8vyf5nrt.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8vyf5nrt.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8vyf5nrt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8vyf5nrt.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8vyf5nrt.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8vyf5nrt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8vyf5nrt.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8vyf5nrt.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8vyf5nrt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8vyf5nrt.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8vyf5nrt.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8vyf5nrt.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8vyf5nrt.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8vyf5nrt.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8vyf5nrt.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe2pb0rcb.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpe2pb0rcb.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpe2pb0rcb.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe2pb0rcb.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpe2pb0rcb.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpe2pb0rcb.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpe2pb0rcb.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpe2pb0rcb.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpe2pb0rcb.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphfm8nv7o.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphfm8nv7o.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphfm8nv7o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphfm8nv7o.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphfm8nv7o.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphfm8nv7o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphfm8nv7o.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphfm8nv7o.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphfm8nv7o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphfm8nv7o.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphfm8nv7o.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphfm8nv7o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphfm8nv7o.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphfm8nv7o.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphfm8nv7o.jl:23\ntest set: Test\
    \ Failed at /tmp/tmphfm8nv7o.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphfm8nv7o.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphfm8nv7o.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    if length(lst[1])\
    \ == 0 && length(lst[2]) == 0\n        return \"Yes\"\n    elseif length(lst[1])\
    \ == 0 && length(lst[2]) != 0\n        return \"No\"\n    elseif length(lst[1])\
    \ != 0 && length(lst[2]) == 0\n        return \"No\"\n    elseif lst[1][1] ==\
    \ '(' && lst[2][1] == ')'\n        return match_parens([lst[1][2:end], lst[2][2:end]])\n\
    \    elseif lst[1][1] == '(' && lst[2][1] == '('\n        return match_parens([lst[1][2:end],\
    \ lst[2]])\n    elseif lst[1][1] == ')' && lst[2][1] == ')'\n        return match_parens([lst[1],\
    \ lst[2][2:end]])\n    elseif lst[1][1] == ')' && lst[2][1] == '('\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7o5agwv6.jl:37\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp7o5agwv6.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7o5agwv6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp7o5agwv6.jl:40\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7o5agwv6.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7o5agwv6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp7o5agwv6.jl:41\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7o5agwv6.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7o5agwv6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp7o5agwv6.jl:43\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7o5agwv6.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7o5agwv6.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp7o5agwv6.jl:48\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7o5agwv6.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7o5agwv6.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7o5agwv6.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for i in lst[1]\n        if i == '('\n      \
    \      open_parens += 1\n        else\n            close_parens += 1\n       \
    \ end\n    end\n    for i in lst[2]\n        if i == '('\n            open_parens\
    \ += 1\n        else\n            close_parens += 1\n        end\n    end\n  \
    \  if open_parens == close_parens\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsduw6gqs.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsduw6gqs.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsduw6gqs.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsduw6gqs.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in 1:length(lst[1])\n        if lst[1][i] == '('\n          \
    \  open_parens += 1\n        else\n            open_parens -= 1\n        end\n\
    \    end\n    for i in 1:length(lst[2])\n        if lst[2][i] == '('\n       \
    \     open_parens += 1\n        else\n            open_parens -= 1\n        end\n\
    \    end\n    if open_parens == 0\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl3gyp1v7.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpl3gyp1v7.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl3gyp1v7.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl3gyp1v7.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    Check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    \"\"\"\n    s1, s2 = lst[1], lst[2]\n\
    \    if is_good(s1) && is_good(s2)\n        return \"Yes\"\n    end\n    if is_good(s1)\
    \ && !is_good(s2)\n        return \"No\"\n    end\n    if !is_good(s1) && is_good(s2)\n\
    \        return \"No\"\n    end\n    if !is_good(s1) && !is_good(s2)\n       \
    \ return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7kpbtcjh.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  UndefVarError:\
    \ is_good not defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmp7kpbtcjh.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmp7kpbtcjh.jl:39\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7kpbtcjh.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp7kpbtcjh.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  UndefVarError: is_good not defined\\\
    n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main /tmp/tmp7kpbtcjh.jl:21\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7kpbtcjh.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7kpbtcjh.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp7kpbtcjh.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  UndefVarError: is_good not\
    \ defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @\
    \ Main /tmp/tmp7kpbtcjh.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmp7kpbtcjh.jl:41\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7kpbtcjh.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmp7kpbtcjh.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  UndefVarError: is_good not\
    \ defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @\
    \ Main /tmp/tmp7kpbtcjh.jl:21\\n   [2] macro expansion\\n     @ /tmp/tmp7kpbtcjh.jl:42\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7kp"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # check\
    \ if the first string is good\n    if is_good(lst[1])\n        return \"Yes\"\n\
    \    elseif is_good(lst[2])\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6lqckd4s.jl:30\n  Test threw exception\n\
    \  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\n  UndefVarError: is_good\
    \ not defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @\
    \ Main /tmp/tmp6lqckd4s.jl:17\n   [2] macro expansion\n     @ /tmp/tmp6lqckd4s.jl:30\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6lqckd4s.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6lqckd4s.jl:31\n  Test threw exception\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\n  UndefVarError: is_good not defined\n\
    \  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main /tmp/tmp6lqckd4s.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmp6lqckd4s.jl:31 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6lqckd4s.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6lqckd4s.jl:32\n  Test threw exception\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\n  UndefVarError: is_good not\
    \ defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main\
    \ /tmp/tmp6lqckd4s.jl:17\n   [2] macro expansion\n     @ /tmp/tmp6lqckd4s.jl:32\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6lqckd4s.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6lqckd4s.jl:33\n  Test threw exception\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\n  UndefVarError: is_good not defined\n\
    \  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main /tmp/tmp6lqckd4s.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmp6lqckd4s.jl:33 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp6lqckd4s.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp6l"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6lqckd4s.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in lst[1]\n        if i == '('\n            open_parens += 1\n\
    \        else\n            open_parens -= 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open_parens += 1\n        else\n  \
    \          open_parens -= 1\n        end\n    end\n    if open_parens == 0\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7cij8uwy.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7cij8uwy.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7cij8uwy.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7cij8uwy.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpygnw151c.jl:24\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpygnw151c.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygnw151c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpygnw151c.jl:27\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpygnw151c.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygnw151c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpygnw151c.jl:28\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpygnw151c.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygnw151c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpygnw151c.jl:30\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpygnw151c.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygnw151c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpygnw151c.jl:34\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpygnw151c.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygnw151c.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpygnw151c.jl:35\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpygnw15"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygnw151c.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppe1m1x52.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppe1m1x52.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppe1m1x52.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppe1m1x52.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppe1m1x52.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppe1m1x52.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppe1m1x52.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppe1m1x52.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppe1m1x52.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppe1m1x52.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppe1m1x52.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppe1m1x52.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppe1m1x52.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppe1m1x52.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppe1m1x52.jl:23\ntest set: Test\
    \ Failed at /tmp/tmppe1m1x52.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppe1m1x52.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppe1m1x52.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoazwyrhx.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpoazwyrhx.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoazwyrhx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoazwyrhx.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpoazwyrhx.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoazwyrhx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoazwyrhx.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpoazwyrhx.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoazwyrhx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoazwyrhx.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpoazwyrhx.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoazwyrhx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoazwyrhx.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpoazwyrhx.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoazwyrhx.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpoazwyrhx.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpoazwyrhx.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoazwyrhx.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpha8iseiw.jl:24\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpha8iseiw.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpha8iseiw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpha8iseiw.jl:27\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpha8iseiw.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpha8iseiw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpha8iseiw.jl:28\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpha8iseiw.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpha8iseiw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpha8iseiw.jl:30\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpha8iseiw.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpha8iseiw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpha8iseiw.jl:34\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpha8iseiw.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpha8iseiw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpha8iseiw.jl:35\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpha8ise"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpha8iseiw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyoumz8od.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyoumz8od.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyoumz8od.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyoumz8od.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyoumz8od.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyoumz8od.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyoumz8od.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyoumz8od.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyoumz8od.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyoumz8od.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyoumz8od.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyoumz8od.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyoumz8od.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyoumz8od.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyoumz8od.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpyoumz8od.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyoumz8od.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyoumz8od.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for s in lst\n        for c in s\n            if c == '('\n       \
    \         open_parens += 1\n            elseif c == ')'\n                open_parens\
    \ -= 1\n            end\n            if open_parens < 0\n                return\
    \ \"No\"\n            end\n        end\n    end\n    if open_parens == 0\n   \
    \     return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ecezao9.jl:43\n  Expression: candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8ecezao9.jl:43 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ecezao9.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp8ecezao9.jl:44\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8ecezao9.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ecezao9.jl:39\ntest set: Test\
    \ Failed at /tmp/tmp8ecezao9.jl:51\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8ecezao9.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ecezao9.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ecezao9.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if count(s1, '(') == count(s2, '(') && count(s1, ')') ==\
    \ count(s2, ')')\n        return \"Yes\"\n    else\n        return \"No\"\n  \
    \  end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_jj8krfp.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ objects of type String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmp_jj8krfp.jl:17\\n   [5] macro expansion\\n     @ /tmp/tmp_jj8krfp.jl:28\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp_jj8krfp.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp_jj8krfp.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: objects of type String\
    \ are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String, itr::Char;\
    \ init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String, itr::Char)\\\
    n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\n   \
    \  @ Main /tmp/tmp_jj8krfp.jl:17\\n   [5] macro expansion\\n     @ /tmp/tmp_jj8krfp.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp_jj8krfp.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmp_jj8krfp.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: objects of type\
    \ String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmp_jj8krfp.jl:17\\n   [5] ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo49z2a62.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpo49z2a62.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo49z2a62.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo49z2a62.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo49z2a62.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo49z2a62.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo49z2a62.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo49z2a62.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo49z2a62.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo49z2a62.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo49z2a62.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo49z2a62.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo49z2a62.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo49z2a62.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo49z2a62.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpo49z2a62.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo49z2a62.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo49z2a62.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \")\" || s2 == \")\"\n        return \"No\"\n    end\n   \
    \ if s1 == \"(\" && s2 == \"(\"\n        return \"Yes\"\n    end\n    if s1 ==\
    \ \"(\"\n        return \"Yes\"\n    end\n    if s2 == \"(\"\n        return \"\
    Yes\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpjjw7d37_.jl:35\\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpjjw7d37_.jl:35 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpjjw7d37_.jl:34\\ntest set: Error\
    \ During Test at /tmp/tmpjjw7d37_.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpjjw7d37_.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmpjjw7d37_.jl:37\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjjw7d37_.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmpjjw7d37_.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpjjw7d37_.jl:27\\n   [2] macro expansion\\n     @ /tmp/tmpjjw7d37_.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # check\
    \ if the first string is good\n    if isgood(lst[1])\n        return \"Yes\"\n\
    \    end\n    # check if the second string is good\n    if isgood(lst[2])\n  \
    \      return \"Yes\"\n    end\n    # check if the concatenation of the two strings\
    \ is good\n    if isgood(lst[1] * lst[2])\n        return \"Yes\"\n    end\n \
    \   if isgood(lst[2] * lst[1])\n        return \"Yes\"\n    end\n    return \"\
    No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjdph_afi.jl:38\n  Test threw exception\n\
    \  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\n  UndefVarError: isgood\
    \ not defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @\
    \ Main /tmp/tmpjdph_afi.jl:17\n   [2] macro expansion\n     @ /tmp/tmpjdph_afi.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjdph_afi.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpjdph_afi.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\n  UndefVarError: isgood not defined\n \
    \ Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main /tmp/tmpjdph_afi.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpjdph_afi.jl:39 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjdph_afi.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpjdph_afi.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\n  UndefVarError: isgood not\
    \ defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpjdph_afi.jl:17\n   [2] macro expansion\n     @ /tmp/tmpjdph_afi.jl:40\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjdph_afi.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpjdph_afi.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\n  UndefVarError: isgood not defined\n\
    \  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main /tmp/tmpjdph_afi.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpjdph_afi.jl:41 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpjdph_afi.jl:37\ntest set:\
    \ Error During Test at /tmp/tmpjdph_a"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjdph_afi.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for s in lst\n        for c in s\n          \
    \  if c == '('\n                open_parens += 1\n            else\n         \
    \       close_parens += 1\n            end\n        end\n    end\n    if open_parens\
    \ == close_parens\n        return \"Yes\"\n    else\n        return \"No\"\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps9vyelti.jl:47\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps9vyelti.jl:47 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9vyelti.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps9vyelti.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2havok3y.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2havok3y.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2havok3y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2havok3y.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2havok3y.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2havok3y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2havok3y.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2havok3y.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2havok3y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2havok3y.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2havok3y.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2havok3y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2havok3y.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2havok3y.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2havok3y.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp2havok3y.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2havok3y.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2havok3y.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open = 0\n\
    \    close = 0\n    for i in lst[1]\n        if i == '('\n            open +=\
    \ 1\n        else\n            close += 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open += 1\n        else\n         \
    \   close += 1\n        end\n    end\n    if open == close\n        return \"\
    Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_uu6sbw6.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_uu6sbw6.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_uu6sbw6.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_uu6sbw6.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    You are given a list of two strings, both strings consist of open\n    parentheses\
    \ '(' or close parentheses ')' only.\n    Your job is to check if it is possible\
    \ to concatenate the two strings in\n    some order, that the resulting string\
    \ will be good.\n    A string S is considered to be good if and only if all parentheses\
    \ in S\n    are balanced. For example: the string '(())()' is good, while the\
    \ string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good\
    \ string, and return 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpsdsdytdh.jl:1\nin expression starting at /tmp/tmpsdsdytdh.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for i in lst[1]\n        if i == '('\n      \
    \      open_parens += 1\n        else\n            close_parens += 1\n       \
    \ end\n    end\n    for i in lst[2]\n        if i == '('\n            open_parens\
    \ += 1\n        else\n            close_parens += 1\n        end\n    end\n  \
    \  if open_parens == close_parens\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo5odf8m8.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpo5odf8m8.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo5odf8m8.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo5odf8m8.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if count(x -> x == ')', s1) + count(x -> x == ')', s2) >\
    \ \n        count(x -> x == '(', s1) + count(x -> x == '(', s2)\n        return\
    \ \"No\"\n    end\n    if count(x -> x == ')', s1) > count(x -> x == '(', s1)\n\
    \        s1, s2 = s2, s1\n    end\n    s = s1 * s2\n    while count(x -> x ==\
    \ ')', s) > count(x -> x == '(', s)\n        s = s[2:end]\n    end\n    if count(x\
    \ -> x == ')', s) == count(x -> x == '(', s)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsxjk4_0h.jl:48\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsxjk4_0h.jl:48 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsxjk4_0h.jl:38\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsxjk4_0h.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_4da0z5k.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmp_4da0z5k.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp_4da0z5k.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_4da0z5k.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp_4da0z5k.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmp_4da0z5k.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp_4da0z5k.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_4da0z5k.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp_4da0z5k.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvuxpd0lh.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpvuxpd0lh.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpvuxpd0lh.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvuxpd0lh.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpvuxpd0lh.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpvuxpd0lh.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpvuxpd0lh.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvuxpd0lh.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpvuxpd0lh.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmputn4sv9a.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmputn4sv9a.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputn4sv9a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputn4sv9a.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmputn4sv9a.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputn4sv9a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputn4sv9a.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmputn4sv9a.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputn4sv9a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputn4sv9a.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmputn4sv9a.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputn4sv9a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputn4sv9a.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmputn4sv9a.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmputn4sv9a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmputn4sv9a.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmputn4sv9a.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmputn4sv9a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for i in lst[1]\n        if i == '('\n      \
    \      open_parens += 1\n        else\n            close_parens += 1\n       \
    \ end\n    end\n    for i in lst[2]\n        if i == '('\n            open_parens\
    \ += 1\n        else\n            close_parens += 1\n        end\n    end\n  \
    \  if open_parens == close_parens\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy_umqczq.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy_umqczq.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy_umqczq.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy_umqczq.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    if length(lst[1])\
    \ == 0 && length(lst[2]) == 0\n        return \"Yes\"\n    elseif length(lst[1])\
    \ == 0 && length(lst[2]) != 0\n        return \"No\"\n    elseif length(lst[1])\
    \ != 0 && length(lst[2]) == 0\n        return \"No\"\n    elseif lst[1][1] ==\
    \ '(' && lst[2][1] == ')'\n        return match_parens([lst[1][2:end], lst[2][2:end]])\n\
    \    elseif lst[1][1] == '(' && lst[2][1] == '('\n        return match_parens([lst[1][2:end],\
    \ lst[2]])\n    elseif lst[1][1] == ')' && lst[2][1] == ')'\n        return match_parens([lst[1],\
    \ lst[2][2:end]])\n    elseif lst[1][1] == ')' && lst[2][1] == '('\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdfep3tyn.jl:37\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpdfep3tyn.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdfep3tyn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdfep3tyn.jl:40\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdfep3tyn.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdfep3tyn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdfep3tyn.jl:41\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdfep3tyn.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdfep3tyn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdfep3tyn.jl:43\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdfep3tyn.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdfep3tyn.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpdfep3tyn.jl:48\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdfep3tyn.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdfep3tyn.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdfep3tyn.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    You are given a list of two strings, both strings consist of open\n    parentheses\
    \ '(' or close parentheses ')' only.\n    Your job is to check if it is possible\
    \ to concatenate the two strings in\n    some order, that the resulting string\
    \ will be good.\n    A string S is considered to be good if and only if all parentheses\
    \ in S\n    are balanced. For example: the string '(())()' is good, while the\
    \ string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good\
    \ string, and return 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpw90jmlu1.jl:1\nin expression starting at /tmp/tmpw90jmlu1.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # check\
    \ if the first string is balanced\n    if is_balanced(lst[1])\n        # if it\
    \ is, check if the second string is balanced\n        if is_balanced(lst[2])\n\
    \            # if both strings are balanced, return 'Yes'\n            return\
    \ \"Yes\"\n        else\n            # if the second string is not balanced, return\
    \ 'No'\n            return \"No\"\n        end\n    else\n        # if the first\
    \ string is not balanced, return 'No'\n        return \"No\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwq20b5cm.jl:36\n  Test threw exception\n\
    \  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\n  UndefVarError: is_balanced\
    \ not defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @\
    \ Main /tmp/tmpwq20b5cm.jl:17\n   [2] macro expansion\n     @ /tmp/tmpwq20b5cm.jl:36\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwq20b5cm.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpwq20b5cm.jl:37\n  Test threw exception\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\n  UndefVarError: is_balanced not defined\n\
    \  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main /tmp/tmpwq20b5cm.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmpwq20b5cm.jl:37 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwq20b5cm.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpwq20b5cm.jl:38\n  Test threw exception\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\n  UndefVarError: is_balanced\
    \ not defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @\
    \ Main /tmp/tmpwq20b5cm.jl:17\n   [2] macro expansion\n     @ /tmp/tmpwq20b5cm.jl:38\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwq20b5cm.jl:35\ntest set:\
    \ Error During Test at /tmp/tmpwq20b5cm.jl:39\n  Test threw exception\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\n  UndefVarError: is_balanced not\
    \ defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main\
    \ /tmp/tmpwq20b5cm.jl:17\n   [2] macro expansion\n     @ /tmp/tmpwq20b5cm.jl:39\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpwq20b5cm.jl:35\ntest set:\
    \ Error During Te"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwq20b5cm.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if count(x -> x == '(', s1) == count(x -> x == ')', s2)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpclbr5ovc.jl:28\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpclbr5ovc.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpclbr5ovc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpclbr5ovc.jl:30\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpclbr5ovc.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpclbr5ovc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpclbr5ovc.jl:31\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpclbr5ovc.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpclbr5ovc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpclbr5ovc.jl:32\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpclbr5ovc.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpclbr5ovc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpclbr5ovc.jl:34\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpclbr5ovc.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpclbr5ovc.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpclbr5ovc.jl:37\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpclbr5ovc.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwnev0hw2.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwnev0hw2.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnev0hw2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwnev0hw2.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwnev0hw2.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnev0hw2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwnev0hw2.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwnev0hw2.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnev0hw2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwnev0hw2.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwnev0hw2.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnev0hw2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwnev0hw2.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwnev0hw2.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnev0hw2.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpwnev0hw2.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwnev0hw2.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwnev0hw2.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s = lst[1]\
    \ * lst[2]\n    if count(x -> x == '(', s) == count(x -> x == ')', s)\n      \
    \  return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx0bkeiqj.jl:37\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpx0bkeiqj.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0bkeiqj.jl:27\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx0bkeiqj.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    You are given a list of two strings, both strings consist of open\n    parentheses\
    \ '(' or close parentheses ')' only.\n    Your job is to check if it is possible\
    \ to concatenate the two strings in\n    some order, that the resulting string\
    \ will be good.\n    A string S is considered to be good if and only if all parentheses\
    \ in S\n    are balanced. For example: the string '(())()' is good, while the\
    \ string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good\
    \ string, and return 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpf0qo2eab.jl:1\nin expression starting at /tmp/tmpf0qo2eab.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf55n787g.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpf55n787g.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf55n787g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf55n787g.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf55n787g.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf55n787g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf55n787g.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf55n787g.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf55n787g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf55n787g.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf55n787g.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf55n787g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf55n787g.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf55n787g.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf55n787g.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf55n787g.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf55n787g.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf55n787g.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpebc9nvpw.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpebc9nvpw.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpebc9nvpw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpebc9nvpw.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpebc9nvpw.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpebc9nvpw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpebc9nvpw.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpebc9nvpw.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpebc9nvpw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpebc9nvpw.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpebc9nvpw.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpebc9nvpw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpebc9nvpw.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpebc9nvpw.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpebc9nvpw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpebc9nvpw.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpebc9nvpw.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpebc9nvpw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open = 0\n\
    \    for i in lst[1]\n        if i == '('\n            open += 1\n        else\n\
    \            open -= 1\n        end\n    end\n    for i in lst[2]\n        if\
    \ i == '('\n            open += 1\n        else\n            open -= 1\n     \
    \   end\n    end\n    if open == 0\n        return \"Yes\"\n    else\n       \
    \ return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1dusopnl.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1dusopnl.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dusopnl.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1dusopnl.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    if length(lst[1])\
    \ == 0 && length(lst[2]) == 0\n        return \"Yes\"\n    elseif length(lst[1])\
    \ == 0\n        if lst[2][1] == ')'\n            return \"No\"\n        else\n\
    \            return match_parens([lst[1], lst[2][2:end]])\n        end\n    elseif\
    \ length(lst[2]) == 0\n        if lst[1][end] == '('\n            return \"No\"\
    \n        else\n            return match_parens([lst[1][1:end-1], lst[2]])\n \
    \       end\n    else\n        if lst[1][end] == '(' && lst[2][1] == ')'\n   \
    \         return match_parens([lst[1][1:end-1], lst[2][2:end]])\n        elseif\
    \ lst[1][end] == '('\n            return match_parens([lst[1][1:end-1], lst[2]])\n\
    \        elseif lst[2][1] == ')'\n            return match_parens([lst[1], lst[2][2:end]])\n\
    \        else\n            return \"No\"\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpem953b9s.jl:47\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpem953b9s.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpem953b9s.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpem953b9s.jl:48\n  Expression: candidate([\")\", \")\"]) ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpem953b9s.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpem953b9s.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpem953b9s.jl:50\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpem953b9s.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpem953b9s.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpem953b9s.jl:51\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpem953b9s.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpem953b9s.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpem953b9s.jl:53\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpem953b9s.jl:53 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpem953b9s.jl:46\ntest set: Test\
    \ Failed at /tmp/tmpem953b9s.jl:58\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpem953b9"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpem953b9s.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if length(s1) == 0\n        return \"Yes\"\n    elseif length(s2)\
    \ == 0\n        return \"Yes\"\n    elseif s1[end] == '(' && s2[1] == ')'\n  \
    \      return match_parens([s1[1:end-1], s2[2:end]])\n    elseif s1[end] == ')'\
    \ && s2[1] == '('\n        return match_parens([s1[1:end-1], s2[2:end]])\n   \
    \ else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t\
    @test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"\
    ())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\
    \t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbsizy7f8.jl:38\n  Expression: candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbsizy7f8.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbsizy7f8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbsizy7f8.jl:39\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbsizy7f8.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbsizy7f8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbsizy7f8.jl:40\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbsizy7f8.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbsizy7f8.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbsizy7f8.jl:43\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbsizy7f8.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbsizy7f8.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbsizy7f8.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(s1, '(') == count(s1, ')') && count(s2, '(') == count(s2,\
    \ ')')\n        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsjyr5hrt.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ objects of type String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmpsjyr5hrt.jl:17\\n   [5] macro expansion\\n     @ /tmp/tmpsjyr5hrt.jl:28\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpsjyr5hrt.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpsjyr5hrt.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: objects of type String\
    \ are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String, itr::Char;\
    \ init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String, itr::Char)\\\
    n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\n   \
    \  @ Main /tmp/tmpsjyr5hrt.jl:17\\n   [5] macro expansion\\n     @ /tmp/tmpsjyr5hrt.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpsjyr5hrt.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpsjyr5hrt.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: objects of type\
    \ String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmpsjyr5hrt.jl:17\\n   [5] ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # YOUR CODE\
    \ HERE\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpew7sp2ty.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpew7sp2ty.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpew7sp2ty.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpew7sp2ty.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpew7sp2ty.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpew7sp2ty.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpew7sp2ty.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpew7sp2ty.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpew7sp2ty.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpew7sp2ty.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpew7sp2ty.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpew7sp2ty.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpew7sp2ty.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpew7sp2ty.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpew7sp2ty.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpew7sp2ty.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpew7sp2ty.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpew7sp2ty.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkyg42h_a.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkyg42h_a.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkyg42h_a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkyg42h_a.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkyg42h_a.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkyg42h_a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkyg42h_a.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkyg42h_a.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkyg42h_a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkyg42h_a.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkyg42h_a.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkyg42h_a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkyg42h_a.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkyg42h_a.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkyg42h_a.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpkyg42h_a.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkyg42h_a.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkyg42h_a.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    if length(lst[1])\
    \ == 0\n        return \"Yes\"\n    end\n    if length(lst[2]) == 0\n        return\
    \ \"Yes\"\n    end\n    if lst[1][1] == '('\n        if lst[2][1] == ')'\n   \
    \         return match_parens([lst[1][2:end], lst[2][2:end]])\n        else\n\
    \            return match_parens([lst[1][2:end], lst[2]])\n        end\n    else\n\
    \        if lst[2][1] == ')'\n            return match_parens([lst[1], lst[2][2:end]])\n\
    \        else\n            return \"No\"\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps9l1z0ta.jl:42\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps9l1z0ta.jl:42 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9l1z0ta.jl:40\ntest set: Test\
    \ Failed at /tmp/tmps9l1z0ta.jl:44\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps9l1z0ta.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9l1z0ta.jl:40\ntest set: Test\
    \ Failed at /tmp/tmps9l1z0ta.jl:45\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps9l1z0ta.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9l1z0ta.jl:40\ntest set: Test\
    \ Failed at /tmp/tmps9l1z0ta.jl:47\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps9l1z0ta.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9l1z0ta.jl:40\ntest set: Test\
    \ Failed at /tmp/tmps9l1z0ta.jl:48\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps9l1z0ta.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps9l1z0ta.jl:40\ntest set: Test\
    \ Failed at /tmp/tmps9l1z0ta.jl:52\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps9l"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps9l1z0ta.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    s = s1 * s2\n    if count(s, '(') == count(s, ')')\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1isd0bm6.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ objects of type String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmp1isd0bm6.jl:18\\n   [5] macro expansion\\n     @ /tmp/tmp1isd0bm6.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp1isd0bm6.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1isd0bm6.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: objects of type String\
    \ are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String, itr::Char;\
    \ init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String, itr::Char)\\\
    n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\n   \
    \  @ Main /tmp/tmp1isd0bm6.jl:18\\n   [5] macro expansion\\n     @ /tmp/tmp1isd0bm6.jl:30\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp1isd0bm6.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1isd0bm6.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: objects of type\
    \ String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmp1isd0bm6.jl:18\\n   [5] ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(x -> x == '(', s1) == count(x -> x == ')', s1)\n        if\
    \ count(x -> x == '(', s2) == count(x -> x == ')', s2)\n            return \"\
    Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdsmrqczn.jl:29\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpdsmrqczn.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdsmrqczn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdsmrqczn.jl:32\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdsmrqczn.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdsmrqczn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdsmrqczn.jl:33\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdsmrqczn.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdsmrqczn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdsmrqczn.jl:35\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdsmrqczn.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdsmrqczn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdsmrqczn.jl:38\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdsmrqczn.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdsmrqczn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdsmrqczn.jl:39\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdsmrq"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdsmrqczn.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(x -> x == '(', s1) == count(x -> x == ')', s1) &&\n      \
    \ count(x -> x == '(', s2) == count(x -> x == ')', s2)\n        return \"Yes\"\
    \n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx1iw6v5h.jl:29\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpx1iw6v5h.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1iw6v5h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx1iw6v5h.jl:32\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx1iw6v5h.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1iw6v5h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx1iw6v5h.jl:33\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx1iw6v5h.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1iw6v5h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx1iw6v5h.jl:35\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx1iw6v5h.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1iw6v5h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx1iw6v5h.jl:38\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx1iw6v5h.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1iw6v5h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx1iw6v5h.jl:39\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx1iw6"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx1iw6v5h.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp59thwevr.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp59thwevr.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp59thwevr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp59thwevr.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp59thwevr.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp59thwevr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp59thwevr.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp59thwevr.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp59thwevr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp59thwevr.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp59thwevr.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp59thwevr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp59thwevr.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp59thwevr.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp59thwevr.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp59thwevr.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp59thwevr.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp59thwevr.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in 1:length(lst[1])\n        if lst[1][i] == '('\n          \
    \  open_parens += 1\n        else\n            open_parens -= 1\n        end\n\
    \    end\n    for i in 1:length(lst[2])\n        if lst[2][i] == '('\n       \
    \     open_parens += 1\n        else\n            open_parens -= 1\n        end\n\
    \    end\n    if open_parens == 0\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd65y48yi.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpd65y48yi.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd65y48yi.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd65y48yi.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s = lst[1]\
    \ * lst[2]\n    if s[1] == ')' || s[end] == '('\n        return \"No\"\n    end\n\
    \    cnt = 0\n    for i in s\n        if i == '('\n            cnt += 1\n    \
    \    else\n            cnt -= 1\n        end\n        if cnt < 0\n           \
    \ return \"No\"\n        end\n    end\n    return \"Yes\"\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjueb7jl8.jl:41\n  Expression: candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjueb7jl8.jl:41 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjueb7jl8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpjueb7jl8.jl:42\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjueb7jl8.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjueb7jl8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpjueb7jl8.jl:45\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjueb7jl8.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjueb7jl8.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpjueb7jl8.jl:49\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjueb7jl8.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjueb7jl8.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjueb7jl8.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(x -> x == '(', s1) == count(x -> x == ')', s1)\n        return\
    \ \"Yes\"\n    elseif count(x -> x == '(', s2) == count(x -> x == ')', s2)\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz1w6_ogb.jl:30\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpz1w6_ogb.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz1w6_ogb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz1w6_ogb.jl:33\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz1w6_ogb.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz1w6_ogb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz1w6_ogb.jl:34\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz1w6_ogb.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz1w6_ogb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz1w6_ogb.jl:35\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz1w6_ogb.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz1w6_ogb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz1w6_ogb.jl:36\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz1w6_ogb.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz1w6_ogb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz1w6_ogb.jl:38\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz1w6_ogb.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzdd395cw.jl:24\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpzdd395cw.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdd395cw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzdd395cw.jl:27\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzdd395cw.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdd395cw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzdd395cw.jl:28\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzdd395cw.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdd395cw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzdd395cw.jl:30\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzdd395cw.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdd395cw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzdd395cw.jl:34\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzdd395cw.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdd395cw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpzdd395cw.jl:35\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzdd395"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzdd395cw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if s1[end] == '(' && s2[1] == ')'\n        return \"Yes\"\
    \n    elseif s1[end] == ')' && s2[1] == '('\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdjkn3olb.jl:32\n  Expression: candidate([\"\
    (()(())\", \"())())\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdjkn3olb.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdjkn3olb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdjkn3olb.jl:35\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdjkn3olb.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdjkn3olb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdjkn3olb.jl:36\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdjkn3olb.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdjkn3olb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdjkn3olb.jl:38\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdjkn3olb.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdjkn3olb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpdjkn3olb.jl:39\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdjkn3olb.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdjkn3olb.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdjkn3olb.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \")\" || s2 == \")\"\n        return \"No\"\n    end\n   \
    \ if s1 == \"(\" && s2 == \"(\"\n        return \"Yes\"\n    end\n    if s1 ==\
    \ \"(\" && s2 == \")\"\n        return \"Yes\"\n    end\n    if s1 == \")\" &&\
    \ s2 == \"(\"\n        return \"Yes\"\n    end\n    if s1 == \")\" && s2 == \"\
    )\"\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpcl8abuqv.jl:38\\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1]\
    \ macro expansion\\n   @ /tmp/tmpcl8abuqv.jl:38 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpcl8abuqv.jl:37\\ntest set: Error\
    \ During Test at /tmp/tmpcl8abuqv.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpcl8abuqv.jl:30\\n   [2] macro expansion\\n     @ /tmp/tmpcl8abuqv.jl:40\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcl8abuqv.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpcl8abuqv.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpcl8abuqv.jl:30\\n   [2] macro expansion\\n     @ /tmp/tmpcl8abuqv.jl:41\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5azufgf4.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5azufgf4.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5azufgf4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5azufgf4.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5azufgf4.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5azufgf4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5azufgf4.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5azufgf4.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5azufgf4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5azufgf4.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5azufgf4.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5azufgf4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5azufgf4.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5azufgf4.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5azufgf4.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp5azufgf4.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5azufgf4.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5azufgf4.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for i in lst[1]\n        if i == '('\n      \
    \      open_parens += 1\n        else\n            close_parens += 1\n       \
    \ end\n    end\n    for i in lst[2]\n        if i == '('\n            open_parens\
    \ += 1\n        else\n            close_parens += 1\n        end\n    end\n  \
    \  if open_parens == close_parens\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiflrthns.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpiflrthns.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpiflrthns.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiflrthns.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Check\
    \ if the first string is balanced\n    if is_balanced(lst[1])\n        # If it\
    \ is, check if the second string is balanced\n        if is_balanced(lst[2])\n\
    \            # If it is, return 'Yes'\n            return \"Yes\"\n        else\n\
    \            # If it isn't, return 'No'\n            return \"No\"\n        end\n\
    \    else\n        # If the first string isn't balanced, return 'No'\n       \
    \ return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqebwc95q.jl:36\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  UndefVarError:\
    \ is_balanced not defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmpqebwc95q.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpqebwc95q.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqebwc95q.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpqebwc95q.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  UndefVarError: is_balanced not defined\\\
    n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main /tmp/tmpqebwc95q.jl:17\\\
    n   [2] macro expansion\\n     @ /tmp/tmpqebwc95q.jl:37 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqebwc95q.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpqebwc95q.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  UndefVarError: is_balanced\
    \ not defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n  \
    \   @ Main /tmp/tmpqebwc95q.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpqebwc95q.jl:38\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqebwc95q.jl:35\\ntest set:\
    \ Error During Test at /tmp/tmpqebwc95q.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  UndefVarError: is_balanced\
    \ not defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n  \
    \   @ Main /tmp/tmpqebwc95q.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpqebwc95q.jl:39\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n  "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy7snv2b6.jl:24\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpy7snv2b6.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7snv2b6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy7snv2b6.jl:27\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy7snv2b6.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7snv2b6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy7snv2b6.jl:28\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy7snv2b6.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7snv2b6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy7snv2b6.jl:30\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy7snv2b6.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7snv2b6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy7snv2b6.jl:34\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy7snv2b6.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7snv2b6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpy7snv2b6.jl:35\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy7snv2"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy7snv2b6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for i in 1:length(lst[1])\n        if lst[1][i]\
    \ == '('\n            open_parens += 1\n        elseif lst[1][i] == ')'\n    \
    \        close_parens += 1\n        end\n    end\n    for i in 1:length(lst[2])\n\
    \        if lst[2][i] == '('\n            open_parens += 1\n        elseif lst[2][i]\
    \ == ')'\n            close_parens += 1\n        end\n    end\n    if open_parens\
    \ == close_parens\n        return \"Yes\"\n    else\n        return \"No\"\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2y6dwtnk.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2y6dwtnk.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2y6dwtnk.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2y6dwtnk.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    else\n        return \"No\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9_m1jicf.jl:32\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp9_m1jicf.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9_m1jicf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9_m1jicf.jl:35\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9_m1jicf.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9_m1jicf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9_m1jicf.jl:36\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9_m1jicf.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9_m1jicf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9_m1jicf.jl:38\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9_m1jicf.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9_m1jicf.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_m1jicf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvqcv9iqw.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvqcv9iqw.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqcv9iqw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvqcv9iqw.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvqcv9iqw.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqcv9iqw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvqcv9iqw.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvqcv9iqw.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqcv9iqw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvqcv9iqw.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvqcv9iqw.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqcv9iqw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvqcv9iqw.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvqcv9iqw.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqcv9iqw.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpvqcv9iqw.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvqcv9iqw.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvqcv9iqw.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if s1 == \"\" && s2 == \"\"\n        return \"Yes\"\n  \
    \  elseif s1 == \"\"\n        return \"No\"\n    elseif s2 == \"\"\n        return\
    \ \"No\"\n    elseif s1[1] == '('\n        if s2[1] == ')'\n            return\
    \ match_parens([s1[2:end], s2[2:end]])\n        else\n            return match_parens([s1[2:end],\
    \ s2])\n        end\n    else\n        if s2[1] == ')'\n            return match_parens([s1,\
    \ s2[2:end]])\n        else\n            return \"No\"\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfau327hj.jl:42\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpfau327hj.jl:42 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfau327hj.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpfau327hj.jl:45\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfau327hj.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfau327hj.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpfau327hj.jl:46\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfau327hj.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfau327hj.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpfau327hj.jl:48\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfau327hj.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfau327hj.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpfau327hj.jl:53\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfau327hj.jl:53 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfau327hj.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfau327hj.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    s = s1 * s2\n    if is_good(s)\n        return \"Yes\"\n\
    \    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwrmzk67q.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  UndefVarError:\
    \ is_good not defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmpwrmzk67q.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpwrmzk67q.jl:29\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwrmzk67q.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpwrmzk67q.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  UndefVarError: is_good not defined\\\
    n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main /tmp/tmpwrmzk67q.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwrmzk67q.jl:30 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwrmzk67q.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpwrmzk67q.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  UndefVarError: is_good not\
    \ defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @\
    \ Main /tmp/tmpwrmzk67q.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpwrmzk67q.jl:31\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwrmzk67q.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpwrmzk67q.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  UndefVarError: is_good not\
    \ defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @\
    \ Main /tmp/tmpwrmzk67q.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpwrmzk67q.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwrm"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open = 0\n\
    \    close = 0\n    for i in lst[1]\n        if i == '('\n            open +=\
    \ 1\n        else\n            close += 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open += 1\n        else\n         \
    \   close += 1\n        end\n    end\n    if open == close\n        return \"\
    Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0vwisl5y.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0vwisl5y.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0vwisl5y.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0vwisl5y.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in lst[1]\n        if i == '('\n            open_parens += 1\n\
    \        else\n            open_parens -= 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open_parens += 1\n        else\n  \
    \          open_parens -= 1\n        end\n    end\n    if open_parens == 0\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfomrjc82.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfomrjc82.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfomrjc82.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfomrjc82.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if count(x -> x == '(', s1) == count(x -> x == ')', s2)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpij6h3gak.jl:28\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpij6h3gak.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij6h3gak.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpij6h3gak.jl:30\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpij6h3gak.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij6h3gak.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpij6h3gak.jl:31\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpij6h3gak.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij6h3gak.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpij6h3gak.jl:32\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpij6h3gak.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij6h3gak.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpij6h3gak.jl:34\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpij6h3gak.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij6h3gak.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpij6h3gak.jl:37\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpij6h3gak.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    >>> match_parens(['()(', ')'])\n    'Yes'\n    >>> match_parens([')', ')'])\n\
    \    'No'\n    \"\"\"\n    s1, s2 = lst\n    if count(s1, '(') == count(s2, '(')\
    \ && count(s1, ')') == count(s2, ')')\n        return \"Yes\"\n    else\n    \
    \    return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9xkc7js7.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ objects of type String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmp9xkc7js7.jl:23\\n   [5] macro expansion\\n     @ /tmp/tmp9xkc7js7.jl:34\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp9xkc7js7.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp9xkc7js7.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: objects of type String\
    \ are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String, itr::Char;\
    \ init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String, itr::Char)\\\
    n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\n   \
    \  @ Main /tmp/tmp9xkc7js7.jl:23\\n   [5] macro expansion\\n     @ /tmp/tmp9xkc7js7.jl:35\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp9xkc7js7.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp9xkc7js7.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: objects of type\
    \ String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmp9xkc7js7.jl:23\\n   [5] ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7qtfri_0.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7qtfri_0.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7qtfri_0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7qtfri_0.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7qtfri_0.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7qtfri_0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7qtfri_0.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7qtfri_0.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7qtfri_0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7qtfri_0.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7qtfri_0.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7qtfri_0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7qtfri_0.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7qtfri_0.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7qtfri_0.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp7qtfri_0.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7qtfri_0.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7qtfri_0.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n\
    \    elseif s1 == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2\
    \ == \"(\"\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpap7ouz3o.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpap7ouz3o.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpap7ouz3o.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpap7ouz3o.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpap7ouz3o.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpap7ouz3o.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpap7ouz3o.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpap7ouz3o.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpap7ouz3o.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7w_yeyuo.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmp7w_yeyuo.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp7w_yeyuo.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7w_yeyuo.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp7w_yeyuo.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmp7w_yeyuo.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmp7w_yeyuo.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7w_yeyuo.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp7w_yeyuo.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open = 0\n\
    \    close = 0\n    for i in lst[1]\n        if i == '('\n            open +=\
    \ 1\n        else\n            close += 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open += 1\n        else\n         \
    \   close += 1\n        end\n    end\n    if open == close\n        return \"\
    Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmjt74wsm.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmjt74wsm.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmjt74wsm.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmjt74wsm.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf3hqnm0e.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpf3hqnm0e.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3hqnm0e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3hqnm0e.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf3hqnm0e.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3hqnm0e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3hqnm0e.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf3hqnm0e.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3hqnm0e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3hqnm0e.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf3hqnm0e.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3hqnm0e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3hqnm0e.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf3hqnm0e.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3hqnm0e.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpf3hqnm0e.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf3hqnm0e.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf3hqnm0e.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for s in lst\n        for c in s\n          \
    \  if c == '('\n                open_parens += 1\n            elseif c == ')'\n\
    \                close_parens += 1\n            end\n        end\n    end\n  \
    \  if open_parens == close_parens\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt0c9z1rz.jl:47\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpt0c9z1rz.jl:47 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt0c9z1rz.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt0c9z1rz.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(x -> x == '(', s1) == count(x -> x == ')', s1)\n        if\
    \ count(x -> x == '(', s2) == count(x -> x == ')', s2)\n            return \"\
    Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptrje54j8.jl:29\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmptrje54j8.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptrje54j8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptrje54j8.jl:32\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptrje54j8.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptrje54j8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptrje54j8.jl:33\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptrje54j8.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptrje54j8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptrje54j8.jl:35\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptrje54j8.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptrje54j8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptrje54j8.jl:38\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptrje54j8.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptrje54j8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmptrje54j8.jl:39\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptrje5"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptrje54j8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    You are given a list of two strings, both strings consist of open\n    parentheses\
    \ '(' or close parentheses ')' only.\n    Your job is to check if it is possible\
    \ to concatenate the two strings in\n    some order, that the resulting string\
    \ will be good.\n    A string S is considered to be good if and only if all parentheses\
    \ in S\n    are balanced. For example: the string '(())()' is good, while the\
    \ string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good\
    \ string, and return 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmp4p8y9em9.jl:1\nin expression starting at /tmp/tmp4p8y9em9.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for i in lst[1]\n        if i == '('\n      \
    \      open_parens += 1\n        else\n            close_parens += 1\n       \
    \ end\n    end\n    for i in lst[2]\n        if i == '('\n            open_parens\
    \ += 1\n        else\n            close_parens += 1\n        end\n    end\n  \
    \  if open_parens == close_parens\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_u1ta0l7.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_u1ta0l7.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_u1ta0l7.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_u1ta0l7.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf3siyor7.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpf3siyor7.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpf3siyor7.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf3siyor7.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpf3siyor7.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpf3siyor7.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpf3siyor7.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf3siyor7.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpf3siyor7.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if isempty(s1)\n        return \"Yes\"\n    end\n    if s1[1] == '('\n\
    \        if isempty(s2)\n            return \"No\"\n        end\n        if s2[1]\
    \ == ')'\n            return match_parens([s1[2:end], s2[2:end]])\n        else\n\
    \            return match_parens([s1[2:end], s2])\n        end\n    else\n   \
    \     return match_parens([s1[2:end], s2])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnx0zw_vg.jl:38\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpnx0zw_vg.jl:38 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnx0zw_vg.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnx0zw_vg.jl:39\n  Expression: candidate([\")\", \")\"]) ==\
    \ \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnx0zw_vg.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnx0zw_vg.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnx0zw_vg.jl:40\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnx0zw_vg.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnx0zw_vg.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnx0zw_vg.jl:43\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnx0zw_vg.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnx0zw_vg.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnx0zw_vg.jl:45\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnx0zw_vg.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnx0zw_vg.jl:37\ntest set: Test\
    \ Failed at /tmp/tmpnx0zw_vg.jl:46\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnx0zw_vg.jl:"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnx0zw_vg.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptpbv4_zn.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmptpbv4_zn.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptpbv4_zn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptpbv4_zn.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptpbv4_zn.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptpbv4_zn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptpbv4_zn.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptpbv4_zn.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptpbv4_zn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptpbv4_zn.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptpbv4_zn.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptpbv4_zn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptpbv4_zn.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptpbv4_zn.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptpbv4_zn.jl:23\ntest set: Test\
    \ Failed at /tmp/tmptpbv4_zn.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptpbv4_zn.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptpbv4_zn.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpke3ytjyt.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpke3ytjyt.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpke3ytjyt.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpke3ytjyt.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpke3ytjyt.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpke3ytjyt.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpke3ytjyt.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpke3ytjyt.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpke3ytjyt.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuinxtv55.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpuinxtv55.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpuinxtv55.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuinxtv55.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpuinxtv55.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpuinxtv55.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpuinxtv55.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpuinxtv55.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpuinxtv55.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq7_ksxhp.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpq7_ksxhp.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpq7_ksxhp.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq7_ksxhp.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpq7_ksxhp.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpq7_ksxhp.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpq7_ksxhp.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpq7_ksxhp.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpq7_ksxhp.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    s = s1 * s2\n    if count(x -> x == '(', s) != count(x -> x == ')',\
    \ s)\n        return \"No\"\n    end\n    if count(x -> x == '(', s1) > count(x\
    \ -> x == ')', s1)\n        return \"Yes\"\n    end\n    return \"No\"\nend\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpepevs_hy.jl:34\n  Expression: candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpepevs_hy.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepevs_hy.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpepevs_hy.jl:35\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpepevs_hy.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepevs_hy.jl:30\ntest set: Test\
    \ Failed at /tmp/tmpepevs_hy.jl:42\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpepevs_hy.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpepevs_hy.jl:30\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpepevs_hy.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    if length(lst[1])\
    \ == 0\n        return \"Yes\"\n    end\n    if length(lst[2]) == 0\n        return\
    \ \"Yes\"\n    end\n    if lst[1][1] == '(' && lst[2][1] == ')'\n        return\
    \ match_parens([lst[1][2:end], lst[2][2:end]])\n    end\n    if lst[1][1] == ')'\
    \ && lst[2][1] == '('\n        return match_parens([lst[1][2:end], lst[2][2:end]])\n\
    \    end\n    if lst[1][1] == '(' && lst[2][1] == '('\n        return match_parens([lst[1][2:end],\
    \ lst[2]])\n    end\n    if lst[1][1] == ')' && lst[2][1] == ')'\n        return\
    \ match_parens([lst[1][2:end], lst[2]])\n    end\n    return \"No\"\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7umb82_c.jl:42\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7umb82_c.jl:42 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7umb82_c.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp7umb82_c.jl:43\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7umb82_c.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7umb82_c.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp7umb82_c.jl:46\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7umb82_c.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7umb82_c.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp7umb82_c.jl:48\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7umb82_c.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7umb82_c.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp7umb82_c.jl:49\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7umb82_c.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7umb82_c.jl:40\ntest set: Test\
    \ Failed at /tmp/tmp7umb82_c.jl:50\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7umb82_c.jl:5"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7umb82_c.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1[1] == ')' || s2[1] == ')'\n        return \"No\"\n    end\n \
    \   if s1[end] == '(' || s2[end] == '('\n        return \"No\"\n    end\n    s\
    \ = s1 * s2\n    cnt = 0\n    for i in s\n        if i == '('\n            cnt\
    \ += 1\n        else\n            cnt -= 1\n        end\n        if cnt < 0\n\
    \            return \"No\"\n        end\n    end\n    if cnt == 0\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvwuf4bzt.jl:46\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpvwuf4bzt.jl:46 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvwuf4bzt.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvwuf4bzt.jl:49\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvwuf4bzt.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvwuf4bzt.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvwuf4bzt.jl:50\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvwuf4bzt.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvwuf4bzt.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvwuf4bzt.jl:52\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvwuf4bzt.jl:52 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvwuf4bzt.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvwuf4bzt.jl:56\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvwuf4bzt.jl:56 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvwuf4bzt.jl:45\ntest set: Test\
    \ Failed at /tmp/tmpvwuf4bzt.jl:57\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvwuf4b"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvwuf4bzt.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if count(x -> x == '(', s1) == count(x -> x == ')', s2)\n\
    \        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmejc7s02.jl:28\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpmejc7s02.jl:28 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmejc7s02.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmejc7s02.jl:30\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmejc7s02.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmejc7s02.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmejc7s02.jl:31\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmejc7s02.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmejc7s02.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmejc7s02.jl:32\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmejc7s02.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmejc7s02.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmejc7s02.jl:34\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmejc7s02.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmejc7s02.jl:27\ntest set: Test\
    \ Failed at /tmp/tmpmejc7s02.jl:37\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmejc7s02.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcq8le55b.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpcq8le55b.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpcq8le55b.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcq8le55b.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpcq8le55b.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpcq8le55b.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpcq8le55b.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcq8le55b.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpcq8le55b.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb_750ks6.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpb_750ks6.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb_750ks6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb_750ks6.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb_750ks6.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb_750ks6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb_750ks6.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb_750ks6.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb_750ks6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb_750ks6.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb_750ks6.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb_750ks6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb_750ks6.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb_750ks6.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb_750ks6.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpb_750ks6.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb_750ks6.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb_750ks6.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    if length(lst[1])\
    \ == 0\n        return \"Yes\"\n    end\n    if length(lst[2]) == 0\n        return\
    \ \"Yes\"\n    end\n    if lst[1][1] == '('\n        if lst[2][1] == ')'\n   \
    \         return match_parens([lst[1][2:end], lst[2][2:end]])\n        else\n\
    \            return match_parens([lst[1][2:end], lst[2]])\n        end\n    else\n\
    \        if lst[2][1] == ')'\n            return match_parens([lst[1], lst[2][2:end]])\n\
    \        else\n            return \"No\"\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpikubvkxy.jl:42\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpikubvkxy.jl:42 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpikubvkxy.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpikubvkxy.jl:44\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpikubvkxy.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpikubvkxy.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpikubvkxy.jl:45\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpikubvkxy.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpikubvkxy.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpikubvkxy.jl:47\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpikubvkxy.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpikubvkxy.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpikubvkxy.jl:48\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpikubvkxy.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpikubvkxy.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpikubvkxy.jl:52\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpiku"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpikubvkxy.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdq2nsb4g.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpdq2nsb4g.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpdq2nsb4g.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdq2nsb4g.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpdq2nsb4g.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpdq2nsb4g.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpdq2nsb4g.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdq2nsb4g.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpdq2nsb4g.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(x -> x == ')', s1) + count(x -> x == ')', s2) > count(x ->\
    \ x == '(', s1) + count(x -> x == '(', s2)\n        return \"No\"\n    end\n \
    \   s = s1 * s2\n    while true\n        s = replace(s, r\"\\(\\)|\\)\\(\", \"\
    \")\n        if !occursin(r\"\\(\\)|\\)\\(\", s)\n            break\n        end\n\
    \    end\n    if count(x -> x == '(', s) == count(x -> x == ')', s)\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"\
    Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\"\
    , \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7lgnz9ts.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ no method matching replace(::String, ::Regex, ::String)\\n  Closest candidates\
    \ are:\\n    replace(!Matched::Union{Function, Type}, ::Any; count) at set.jl:605\\\
    n    replace(::String, !Matched::Pair{var\"#s75\", B} where {var\"#s75\"<:AbstractChar,\
    \ B}; count) at strings/util.jl:513\\n    replace(::String, !Matched::Pair{var\"\
    #s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar, N} where N}, Set{var\"\
    #s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"#s54\"} where var\"\
    #s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\n    ...\\n  Stacktrace:\\\
    n   [1] match_parens(lst::Vector{String})\\n     @ Main /tmp/tmp7lgnz9ts.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7lgnz9ts.jl:38 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7lgnz9ts.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmp7lgnz9ts.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: no method matching\
    \ replace(::String, ::Regex, ::String)\\n  Closest candidates are:\\n    replace(!Matched::Union{Function,\
    \ Type}, ::Any; count) at set.jl:605\\n    replace(::String, !Matched::Pair{var\"\
    #s75\", B} where {var\"#s75\"<:AbstractChar, B}; count) at strings/util.jl:513\\\
    n    replace(::String, !Matched::Pair{var\"#s72\", B} where {var\"#s72\"<:Union{Tuple{Vararg{AbstractChar,\
    \ N} where N}, Set{var\"#s53\"} where var\"#s53\"<:AbstractChar, AbstractVector{var\"\
    #s54\"} where var\"#s54\"<:AbstractChar}, B}; count) at strings/util.jl:518\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmp7lgnz9ts.jl:22\\n   [2] macro expansion\\n     @ /tmp/tmp7lgnz9ts.jl:41\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # Your code\
    \ here\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpohynp5xl.jl:24\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpohynp5xl.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpohynp5xl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpohynp5xl.jl:27\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpohynp5xl.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpohynp5xl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpohynp5xl.jl:28\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpohynp5xl.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpohynp5xl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpohynp5xl.jl:30\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpohynp5xl.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpohynp5xl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpohynp5xl.jl:34\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpohynp5xl.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpohynp5xl.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpohynp5xl.jl:35\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpohynp5"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpohynp5xl.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # check\
    \ if the first string is good\n    if is_good(lst[1])\n        return \"Yes\"\n\
    \    end\n    # check if the second string is good\n    if is_good(lst[2])\n \
    \       return \"Yes\"\n    end\n    # check if the concatenation of the two strings\
    \ is good\n    if is_good(lst[1] * lst[2])\n        return \"Yes\"\n    end\n\
    \    # check if the concatenation of the two strings in reverse order is good\n\
    \    if is_good(lst[2] * lst[1])\n        return \"Yes\"\n    end\n    return\
    \ \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgjyauxio.jl:39\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  UndefVarError:\
    \ is_good not defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmpgjyauxio.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpgjyauxio.jl:39\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgjyauxio.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmpgjyauxio.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  UndefVarError: is_good not defined\\\
    n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main /tmp/tmpgjyauxio.jl:17\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgjyauxio.jl:40 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgjyauxio.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmpgjyauxio.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  UndefVarError: is_good not\
    \ defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @\
    \ Main /tmp/tmpgjyauxio.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpgjyauxio.jl:41\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgjyauxio.jl:38\\ntest set:\
    \ Error During Test at /tmp/tmpgjyauxio.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  UndefVarError: is_good not\
    \ defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @\
    \ Main /tmp/tmpgjyauxio.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpgjyauxio.jl:42\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgjy"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for c in lst[1]\n        if c == '('\n            open_parens += 1\n\
    \        else\n            open_parens -= 1\n        end\n    end\n    for c in\
    \ lst[2]\n        if c == '('\n            open_parens += 1\n        else\n  \
    \          open_parens -= 1\n        end\n    end\n    if open_parens == 0\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsvyjyla5.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsvyjyla5.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsvyjyla5.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsvyjyla5.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    You are given a list of two strings, both strings consist of open\n    parentheses\
    \ '(' or close parentheses ')' only.\n    Your job is to check if it is possible\
    \ to concatenate the two strings in\n    some order, that the resulting string\
    \ will be good.\n    A string S is considered to be good if and only if all parentheses\
    \ in S\n    are balanced. For example: the string '(())()' is good, while the\
    \ string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good\
    \ string, and return 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpai5unif5.jl:1\nin expression starting at /tmp/tmpai5unif5.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # YOUR CODE\
    \ HERE\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpewngav72.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpewngav72.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewngav72.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpewngav72.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpewngav72.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewngav72.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpewngav72.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpewngav72.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewngav72.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpewngav72.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpewngav72.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewngav72.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpewngav72.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpewngav72.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewngav72.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpewngav72.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpewngav72.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewngav72.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if s1[end] == '(' && s2[1] == ')'\n        return \"Yes\"\
    \n    elseif s1[end] == ')' && s2[1] == '('\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz1ul98gb.jl:32\n  Expression: candidate([\"\
    (()(())\", \"())())\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpz1ul98gb.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz1ul98gb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz1ul98gb.jl:35\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz1ul98gb.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz1ul98gb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz1ul98gb.jl:36\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz1ul98gb.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz1ul98gb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz1ul98gb.jl:38\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz1ul98gb.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz1ul98gb.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpz1ul98gb.jl:39\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz1ul98gb.jl:39 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz1ul98gb.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz1ul98gb.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1[1] == ')' || s2[1] == ')'\n        return \"No\"\n    end\n \
    \   s = s1 * s2\n    if s[end] == '('\n        return \"No\"\n    end\n    cnt\
    \ = 0\n    for i in s\n        if i == '('\n            cnt += 1\n        else\n\
    \            cnt -= 1\n        end\n        if cnt < 0\n            return \"\
    No\"\n        end\n    end\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkkqr8o2n.jl:42\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpkkqr8o2n.jl:42 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkkqr8o2n.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpkkqr8o2n.jl:45\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkkqr8o2n.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkkqr8o2n.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpkkqr8o2n.jl:46\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkkqr8o2n.jl:46 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkkqr8o2n.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpkkqr8o2n.jl:49\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkkqr8o2n.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkkqr8o2n.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpkkqr8o2n.jl:52\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkkqr8o2n.jl:52 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkkqr8o2n.jl:41\ntest set: Test\
    \ Failed at /tmp/tmpkkqr8o2n.jl:53\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkkqr8o2n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkkqr8o2n.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in lst[1]\n        if i == '('\n            open_parens += 1\n\
    \        else\n            open_parens -= 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open_parens += 1\n        else\n  \
    \          open_parens -= 1\n        end\n    end\n    if open_parens == 0\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9clg4j0h.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9clg4j0h.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9clg4j0h.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9clg4j0h.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(s1, '(') == count(s1, ')') && count(s2, '(') == count(s2,\
    \ ')')\n        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw2wkppud.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ objects of type String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmpw2wkppud.jl:17\\n   [5] macro expansion\\n     @ /tmp/tmpw2wkppud.jl:28\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpw2wkppud.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpw2wkppud.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: objects of type String\
    \ are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String, itr::Char;\
    \ init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String, itr::Char)\\\
    n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\n   \
    \  @ Main /tmp/tmpw2wkppud.jl:17\\n   [5] macro expansion\\n     @ /tmp/tmpw2wkppud.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpw2wkppud.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpw2wkppud.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: objects of type\
    \ String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmpw2wkppud.jl:17\\n   [5] ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ll461i8.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0ll461i8.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ll461i8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0ll461i8.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0ll461i8.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ll461i8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0ll461i8.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0ll461i8.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ll461i8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0ll461i8.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0ll461i8.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ll461i8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0ll461i8.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0ll461i8.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ll461i8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp0ll461i8.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0ll461i8.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ll461i8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps8xl5ddq.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmps8xl5ddq.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps8xl5ddq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps8xl5ddq.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps8xl5ddq.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps8xl5ddq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps8xl5ddq.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps8xl5ddq.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps8xl5ddq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps8xl5ddq.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps8xl5ddq.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps8xl5ddq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps8xl5ddq.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps8xl5ddq.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps8xl5ddq.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps8xl5ddq.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps8xl5ddq.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps8xl5ddq.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptmdu2wmm.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmptmdu2wmm.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmptmdu2wmm.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptmdu2wmm.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmptmdu2wmm.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmptmdu2wmm.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmptmdu2wmm.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptmdu2wmm.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmptmdu2wmm.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    s = s1 * s2\n    if isbalanced(s)\n        return \"Yes\"\n    else\n\
    \        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2o8967y0.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  UndefVarError:\
    \ isbalanced not defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmp2o8967y0.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmp2o8967y0.jl:29\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2o8967y0.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp2o8967y0.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  UndefVarError: isbalanced not defined\\\
    n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main /tmp/tmp2o8967y0.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmp2o8967y0.jl:30 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2o8967y0.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp2o8967y0.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  UndefVarError: isbalanced\
    \ not defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n  \
    \   @ Main /tmp/tmp2o8967y0.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmp2o8967y0.jl:31\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2o8967y0.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp2o8967y0.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  UndefVarError: isbalanced not\
    \ defined\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @\
    \ Main /tmp/tmp2o8967y0.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmp2o8967y0.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for i in lst[1]\n        if i == '('\n      \
    \      open_parens += 1\n        else\n            close_parens += 1\n       \
    \ end\n    end\n    for i in lst[2]\n        if i == '('\n            open_parens\
    \ += 1\n        else\n            close_parens += 1\n        end\n    end\n  \
    \  if open_parens == close_parens\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpee97ef3j.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpee97ef3j.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpee97ef3j.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpee97ef3j.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa5v29xjc.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpa5v29xjc.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5v29xjc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa5v29xjc.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa5v29xjc.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5v29xjc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa5v29xjc.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa5v29xjc.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5v29xjc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa5v29xjc.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa5v29xjc.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5v29xjc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa5v29xjc.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa5v29xjc.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa5v29xjc.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpa5v29xjc.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa5v29xjc.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa5v29xjc.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # check\
    \ if the first string has more open parentheses than close parentheses\n    if\
    \ count(x -> x == '(', lst[1]) > count(x -> x == ')', lst[1])\n        # check\
    \ if the second string has more close parentheses than open parentheses\n    \
    \    if count(x -> x == ')', lst[2]) > count(x -> x == '(', lst[2])\n        \
    \    return \"Yes\"\n        end\n    end\n    return \"No\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp17ukc8xh.jl:32\n  Expression: candidate([\"\
    (()(())\", \"())())\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp17ukc8xh.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp17ukc8xh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp17ukc8xh.jl:33\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp17ukc8xh.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp17ukc8xh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp17ukc8xh.jl:34\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp17ukc8xh.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp17ukc8xh.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp17ukc8xh.jl:41\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp17ukc8xh.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp17ukc8xh.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp17ukc8xh.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ goes here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpny8_h288.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpny8_h288.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpny8_h288.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpny8_h288.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpny8_h288.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpny8_h288.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpny8_h288.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpny8_h288.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpny8_h288.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpny8_h288.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpny8_h288.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpny8_h288.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpny8_h288.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpny8_h288.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpny8_h288.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpny8_h288.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpny8_h288.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpny8_h288.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoqymz6zk.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpoqymz6zk.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpoqymz6zk.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoqymz6zk.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpoqymz6zk.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpoqymz6zk.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpoqymz6zk.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoqymz6zk.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpoqymz6zk.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgqjk7b40.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgqjk7b40.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgqjk7b40.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgqjk7b40.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgqjk7b40.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgqjk7b40.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgqjk7b40.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgqjk7b40.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgqjk7b40.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgqjk7b40.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgqjk7b40.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgqjk7b40.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgqjk7b40.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgqjk7b40.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgqjk7b40.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpgqjk7b40.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgqjk7b40.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgqjk7b40.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    if length(lst[1])\
    \ == 0\n        return \"Yes\"\n    end\n    if length(lst[2]) == 0\n        return\
    \ \"Yes\"\n    end\n    if lst[1][1] == '('\n        if lst[2][1] == ')'\n   \
    \         return match_parens([lst[1][2:end], lst[2][2:end]])\n        else\n\
    \            return match_parens([lst[1][2:end], lst[2]])\n        end\n    else\n\
    \        if lst[2][1] == ')'\n            return match_parens([lst[1], lst[2][2:end]])\n\
    \        else\n            return \"No\"\n        end\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsmovfr9x.jl:42\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsmovfr9x.jl:42 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsmovfr9x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpsmovfr9x.jl:44\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsmovfr9x.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsmovfr9x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpsmovfr9x.jl:45\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsmovfr9x.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsmovfr9x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpsmovfr9x.jl:47\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsmovfr9x.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsmovfr9x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpsmovfr9x.jl:48\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsmovfr9x.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsmovfr9x.jl:40\ntest set: Test\
    \ Failed at /tmp/tmpsmovfr9x.jl:52\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsmo"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsmovfr9x.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(s1, '(') == count(s1, ')') == count(s2, '(') == count(s2,\
    \ ')')\n        return \"Yes\"\n    else\n        return \"No\"\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv5k03c_r.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ objects of type String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmpv5k03c_r.jl:17\\n   [5] macro expansion\\n     @ /tmp/tmpv5k03c_r.jl:28\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpv5k03c_r.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpv5k03c_r.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: objects of type String\
    \ are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String, itr::Char,\
    \ init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String, itr::Char;\
    \ init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String, itr::Char)\\\
    n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\n   \
    \  @ Main /tmp/tmpv5k03c_r.jl:17\\n   [5] macro expansion\\n     @ /tmp/tmpv5k03c_r.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpv5k03c_r.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpv5k03c_r.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: objects of type\
    \ String are not callable\\n  Stacktrace:\\n   [1] _simple_count(pred::String,\
    \ itr::Char, init::Int64)\\n     @ Base ./reduce.jl:970\\n   [2] count(f::String,\
    \ itr::Char; init::Int64)\\n     @ Base ./reduce.jl:965\\n   [3] count(f::String,\
    \ itr::Char)\\n     @ Base ./reduce.jl:965\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmpv5k03c_r.jl:17\\n   [5] ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    if length(lst[1])\
    \ == 0 && length(lst[2]) == 0\n        return \"Yes\"\n    elseif length(lst[1])\
    \ == 0 && length(lst[2]) != 0\n        return \"No\"\n    elseif length(lst[1])\
    \ != 0 && length(lst[2]) == 0\n        return \"No\"\n    elseif lst[1][1] ==\
    \ '(' && lst[2][1] == ')'\n        return match_parens([lst[1][2:end], lst[2][2:end]])\n\
    \    elseif lst[1][1] == '(' && lst[2][1] == '('\n        return match_parens([lst[1][2:end],\
    \ lst[2]])\n    elseif lst[1][1] == ')' && lst[2][1] == ')'\n        return match_parens([lst[1],\
    \ lst[2][2:end]])\n    elseif lst[1][1] == ')' && lst[2][1] == '('\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpufew5scp.jl:37\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpufew5scp.jl:37 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpufew5scp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpufew5scp.jl:40\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpufew5scp.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpufew5scp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpufew5scp.jl:41\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpufew5scp.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpufew5scp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpufew5scp.jl:43\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpufew5scp.jl:43 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpufew5scp.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpufew5scp.jl:48\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpufew5scp.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpufew5scp.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpufew5scp.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdia3iupm.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpdia3iupm.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpdia3iupm.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdia3iupm.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpdia3iupm.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpdia3iupm.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpdia3iupm.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdia3iupm.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpdia3iupm.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwnoq0zbl.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpwnoq0zbl.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpwnoq0zbl.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwnoq0zbl.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpwnoq0zbl.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpwnoq0zbl.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpwnoq0zbl.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwnoq0zbl.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpwnoq0zbl.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if length(s1) == 0\n        if length(s2) == 0\n            return\
    \ \"Yes\"\n        else\n            return \"No\"\n        end\n    end\n   \
    \ if s1[1] == '('\n        if s2[end] == ')'\n            return match_parens([s1[2:end],\
    \ s2[1:end-1]])\n        else\n            return match_parens([s1[2:end], s2])\n\
    \        end\n    else\n        if s2[end] == ')'\n            return match_parens([s1,\
    \ s2[1:end-1]])\n        else\n            return \"No\"\n        end\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp25wymfu9.jl:43\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  BoundsError:\
    \ attempt to access empty String at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\\
    n     @ ./strings/basic.jl:216 [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102\
    \ [inlined]\\n   [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n  \
    \ [4] match_parens(lst::Vector{String})\\n     @ Main /tmp/tmp25wymfu9.jl:31\\\
    n   [5] match_parens(lst::Vector{String})\\n     @ Main /tmp/tmp25wymfu9.jl:26\\\
    n   [6] macro expansion\\n     @ /tmp/tmp25wymfu9.jl:43 [inlined]\\n   [7] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp25wymfu9.jl:42\\ntest set:\
    \ Error During Test at /tmp/tmp25wymfu9.jl:44\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  BoundsError: attempt to access empty\
    \ String at index [0]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] codeunit\\n     @ ./strings/string.jl:102 [inlined]\\n  \
    \ [3] getindex\\n     @ ./strings/string.jl:223 [inlined]\\n   [4] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmp25wymfu9.jl:31\\n   [5] match_parens(lst::Vector{String})\\\
    n     @ Main /tmp/tmp25wymfu9.jl:32\\n   [6] macro expansion\\n     @ /tmp/tmp25wymfu9.jl:44\
    \ [inlined]\\n   [7] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [8] top-level scope\\n     @ /tmp/tmp25wymfu9.jl:42\\ntest set:\
    \ Test Failed at /tmp/tmp25wymfu9.jl:46\\n  Expression: candidate([\")())\", \"\
    (()()(\"]) == \"Yes\"\\n   Evaluated: \"No\" == \"Yes\"\\nStacktrace:\\n [1] macro\
    \ expansion\\n   @ /tmp/tmp25wymfu9.jl:46 [inlined]\\n [2] macro expansion\\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp25wymfu9.jl:42\\ntest set: Test\
    \ Failed at /tmp/tmp25wymfu9.jl:47\\n  Expression: candidate([\"(()))"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyi_ayo5x.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpyi_ayo5x.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpyi_ayo5x.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyi_ayo5x.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpyi_ayo5x.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpyi_ayo5x.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpyi_ayo5x.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyi_ayo5x.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpyi_ayo5x.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for s in lst\n        for c in s\n            if c == '('\n       \
    \         open_parens += 1\n            elseif c == ')'\n                open_parens\
    \ -= 1\n            end\n            if open_parens < 0\n                return\
    \ \"No\"\n            end\n        end\n    end\n    if open_parens == 0\n   \
    \     return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsw9cx49f.jl:43\n  Expression: candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsw9cx49f.jl:43 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsw9cx49f.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpsw9cx49f.jl:44\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsw9cx49f.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsw9cx49f.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpsw9cx49f.jl:51\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsw9cx49f.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsw9cx49f.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsw9cx49f.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if s1[1] == ')' || s2[1] == ')'\n        return \"No\"\n\
    \    end\n    if s1[end] == '(' || s2[end] == '('\n        return \"No\"\n   \
    \ end\n    if count(x -> x == '(', s1) == count(x -> x == ')', s1) &&\n      \
    \  count(x -> x == '(', s2) == count(x -> x == ')', s2)\n        return \"Yes\"\
    \n    end\n    return \"No\"\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbd8fnxnt.jl:34\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpbd8fnxnt.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbd8fnxnt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbd8fnxnt.jl:37\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbd8fnxnt.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbd8fnxnt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbd8fnxnt.jl:38\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbd8fnxnt.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbd8fnxnt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbd8fnxnt.jl:40\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbd8fnxnt.jl:40 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbd8fnxnt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbd8fnxnt.jl:44\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbd8fnxnt.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbd8fnxnt.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpbd8fnxnt.jl:45\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbd8fnx"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbd8fnxnt.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    Returns 'Yes' if it is possible to concatenate the two strings in\n    some\
    \ order, that the resulting string will be good.\n    Returns 'No' otherwise.\n\
    \    \"\"\"\n    s1, s2 = lst[1], lst[2]\n    if s1 == \"\" && s2 == \"\"\n  \
    \      return \"Yes\"\n    elseif s1 == \"\"\n        return \"No\"\n    elseif\
    \ s2 == \"\"\n        return \"No\"\n    elseif s1[end] == '(' && s2[1] == ')'\n\
    \        return match_parens([s1[1:end-1], s2[2:end]])\n    elseif s1[end] ==\
    \ ')' && s2[1] == '('\n        return match_parens([s1[1:end-1], s2[2:end]])\n\
    \    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprmht11z5.jl:41\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmprmht11z5.jl:41 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprmht11z5.jl:40\ntest set: Test\
    \ Failed at /tmp/tmprmht11z5.jl:44\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprmht11z5.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprmht11z5.jl:40\ntest set: Test\
    \ Failed at /tmp/tmprmht11z5.jl:45\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprmht11z5.jl:45 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprmht11z5.jl:40\ntest set: Test\
    \ Failed at /tmp/tmprmht11z5.jl:47\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprmht11z5.jl:47 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprmht11z5.jl:40\ntest set: Test\
    \ Failed at /tmp/tmprmht11z5.jl:50\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprmht11z5.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprmht11z5.jl:40\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     5     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprmht11z5.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in lst[1]\n        if i == '('\n            open_parens += 1\n\
    \        else\n            open_parens -= 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open_parens += 1\n        else\n  \
    \          open_parens -= 1\n        end\n    end\n    if open_parens == 0\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm3vnub1x.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpm3vnub1x.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm3vnub1x.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm3vnub1x.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for i in lst[1]\n        if i == '('\n            open_parens += 1\n\
    \        else\n            open_parens -= 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open_parens += 1\n        else\n  \
    \          open_parens -= 1\n        end\n    end\n    if open_parens == 0\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzg9lhiic.jl:51\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzg9lhiic.jl:51 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzg9lhiic.jl:41\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzg9lhiic.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_count\
    \ = 0\n    close_count = 0\n    for i in lst[1]\n        if i == '('\n       \
    \     open_count += 1\n        else\n            close_count += 1\n        end\n\
    \    end\n    for i in lst[2]\n        if i == '('\n            open_count +=\
    \ 1\n        else\n            close_count += 1\n        end\n    end\n    if\
    \ open_count == close_count\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcskbuhy5.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpcskbuhy5.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcskbuhy5.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcskbuhy5.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst[1], lst[2]\n    if (count(x -> x == '(', s1) + count(x -> x == '(', s2))\
    \ == \n        (count(x -> x == ')', s1) + count(x -> x == ')', s2))\n       \
    \ return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnglw8lzt.jl:38\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnglw8lzt.jl:38 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnglw8lzt.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnglw8lzt.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo5jsa64a.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpo5jsa64a.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpo5jsa64a.jl:23\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo5jsa64a.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpo5jsa64a.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type String\\n  Closest candidates are:\\n \
    \   convert(::Type{String}, !Matched::String) at essentials.jl:210\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractString at strings/basic.jl:231\\n    convert(::Type{T},\
    \ !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpo5jsa64a.jl:17\\n   [2] macro expansion\\n     @ /tmp/tmpo5jsa64a.jl:24\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo5jsa64a.jl:22\\ntest set:\
    \ Error During Test at /tmp/tmpo5jsa64a.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for i in lst[1]\n        if i == '('\n      \
    \      open_parens += 1\n        else\n            close_parens += 1\n       \
    \ end\n    end\n    for i in lst[2]\n        if i == '('\n            open_parens\
    \ += 1\n        else\n            close_parens += 1\n        end\n    end\n  \
    \  if open_parens == close_parens\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2btxhioj.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2btxhioj.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2btxhioj.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2btxhioj.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    else\n        return \"No\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpztt5u57y.jl:32\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpztt5u57y.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpztt5u57y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpztt5u57y.jl:35\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpztt5u57y.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpztt5u57y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpztt5u57y.jl:36\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpztt5u57y.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpztt5u57y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpztt5u57y.jl:38\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpztt5u57y.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpztt5u57y.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpztt5u57y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpukm3ujuk.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpukm3ujuk.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpukm3ujuk.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpukm3ujuk.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpukm3ujuk.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpukm3ujuk.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpukm3ujuk.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpukm3ujuk.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpukm3ujuk.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    You are given a list of two strings, both strings consist of open\n    parentheses\
    \ '(' or close parentheses ')' only.\n    Your job is to check if it is possible\
    \ to concatenate the two strings in\n    some order, that the resulting string\
    \ will be good.\n    A string S is considered to be good if and only if all parentheses\
    \ in S\n    are balanced. For example: the string '(())()' is good, while the\
    \ string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good\
    \ string, and return 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpr465umqz.jl:1\nin expression starting at /tmp/tmpr465umqz.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    else\n        return \"No\"\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"\
    ()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc32aww76.jl:32\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpc32aww76.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc32aww76.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc32aww76.jl:35\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc32aww76.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc32aww76.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc32aww76.jl:36\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc32aww76.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc32aww76.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc32aww76.jl:38\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc32aww76.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc32aww76.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc32aww76.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    \"\"\"\n\
    \    You are given a list of two strings, both strings consist of open\n    parentheses\
    \ '(' or close parentheses ')' only.\n    Your job is to check if it is possible\
    \ to concatenate the two strings in\n    some order, that the resulting string\
    \ will be good.\n    A string S is considered to be good if and only if all parentheses\
    \ in S\n    are balanced. For example: the string '(())()' is good, while the\
    \ string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good\
    \ string, and return 'No' otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: invalid string syntax\nStacktrace:\n\
    \ [1] top-level scope\n   @ /tmp/tmpob93r5ys.jl:1\nin expression starting at /tmp/tmpob93r5ys.jl:1\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8_0stzh9.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8_0stzh9.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8_0stzh9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8_0stzh9.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8_0stzh9.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8_0stzh9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8_0stzh9.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8_0stzh9.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8_0stzh9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8_0stzh9.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8_0stzh9.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8_0stzh9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8_0stzh9.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8_0stzh9.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8_0stzh9.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp8_0stzh9.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8_0stzh9.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8_0stzh9.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1jwl3e19.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1jwl3e19.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1jwl3e19.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1jwl3e19.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1jwl3e19.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1jwl3e19.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1jwl3e19.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1jwl3e19.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1jwl3e19.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1jwl3e19.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1jwl3e19.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1jwl3e19.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1jwl3e19.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1jwl3e19.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1jwl3e19.jl:23\ntest set: Test\
    \ Failed at /tmp/tmp1jwl3e19.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1jwl3e19.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1jwl3e19.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if s1 == \"(\" && s2 == \")\"\n        return \"Yes\"\n    elseif s1\
    \ == \")\" && s2 == \"(\"\n        return \"Yes\"\n    elseif s1 == \")\" && s2\
    \ == \")\"\n        return \"No\"\n    elseif s1 == \"(\" && s2 == \"(\"\n   \
    \     return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\"\
    )\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\"\
    )\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"\
    (())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) ==\
    \ \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"\
    ((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"\
    No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\"\
    , \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm8shhp6l.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type String\\n  Closest\
    \ candidates are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpm8shhp6l.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpm8shhp6l.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm8shhp6l.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpm8shhp6l.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] match_parens(lst::Vector{String})\\n     @ Main\
    \ /tmp/tmpm8shhp6l.jl:24\\n   [2] macro expansion\\n     @ /tmp/tmpm8shhp6l.jl:34\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm8shhp6l.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpm8shhp6l.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Mat"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open = 0\n\
    \    close = 0\n    for i in lst[1]\n        if i == '('\n            open +=\
    \ 1\n        else\n            close += 1\n        end\n    end\n    for i in\
    \ lst[2]\n        if i == '('\n            open += 1\n        else\n         \
    \   close += 1\n        end\n    end\n    if open == close\n        return \"\
    Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsatlms8d.jl:52\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsatlms8d.jl:52 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsatlms8d.jl:42\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsatlms8d.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(x -> x == '(', s1) == count(x -> x == ')', s1) &&\n      \
    \  count(x -> x == '(', s2) == count(x -> x == ')', s2)\n        return \"Yes\"\
    \n    else\n        return \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = match_parens;\n\t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\
    \t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"(()(())\",\
    \ \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"]) == \"Yes\"\
    )\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplyz3uxjc.jl:29\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmplyz3uxjc.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyz3uxjc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplyz3uxjc.jl:32\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplyz3uxjc.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyz3uxjc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplyz3uxjc.jl:33\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplyz3uxjc.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyz3uxjc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplyz3uxjc.jl:35\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplyz3uxjc.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyz3uxjc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplyz3uxjc.jl:38\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplyz3uxjc.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplyz3uxjc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplyz3uxjc.jl:39\n  Expression: candidate([\"(\", \")\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplyz3u"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplyz3uxjc.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # your code\
    \ here\n    return \"Yes\"\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg43h7vv3.jl:25\n  Expression: candidate([\"\
    )\", \")\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpg43h7vv3.jl:25 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg43h7vv3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg43h7vv3.jl:26\n  Expression: candidate([\"(()(())\", \"())())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg43h7vv3.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg43h7vv3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg43h7vv3.jl:29\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg43h7vv3.jl:29 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg43h7vv3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg43h7vv3.jl:31\n  Expression: candidate([\"((((\", \"((())\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg43h7vv3.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg43h7vv3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg43h7vv3.jl:32\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg43h7vv3.jl:32 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg43h7vv3.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpg43h7vv3.jl:33\n  Expression: candidate([\")(\", \")(\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg43h7vv3.jl:3"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg43h7vv3.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    close_parens = 0\n    for s in lst\n        for c in s\n          \
    \  if c == '('\n                open_parens += 1\n            elseif c == ')'\n\
    \                close_parens += 1\n            end\n        end\n    end\n  \
    \  if open_parens == close_parens\n        return \"Yes\"\n    else\n        return\
    \ \"No\"\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = match_parens;\n\
    \t@test(candidate([\"()(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"\
    )\"]) == \"No\")\n\t@test(candidate([\"(()(())\", \"())())\"]) == \"No\")\n\t\
    @test(candidate([\")())\", \"(()()(\"]) == \"Yes\")\n\t@test(candidate([\"(())))\"\
    , \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"()\", \"())\"]) == \"No\")\n\
    \t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\")\n\t@test(candidate([\"((((\"\
    , \"((())\"]) == \"No\")\n\t@test(candidate([\")(()\", \"(()(\"]) == \"No\")\n\
    \t@test(candidate([\")(\", \")(\"]) == \"No\")\n\t@test(candidate([\"(\", \")\"\
    ]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4o7v2m6j.jl:47\n  Expression: candidate([\"\
    )(\", \")(\"]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4o7v2m6j.jl:47 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4o7v2m6j.jl:37\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   11     1     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 11 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4o7v2m6j.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    s1, s2 =\
    \ lst\n    if count(x -> x == '(', s1) == count(x -> x == ')', s1)\n        return\
    \ \"Yes\"\n    elseif count(x -> x == '(', s2) == count(x -> x == ')', s2)\n \
    \       return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw9v3s66i.jl:30\n  Expression: candidate([\"\
    ()(\", \")\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpw9v3s66i.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9v3s66i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw9v3s66i.jl:33\n  Expression: candidate([\")())\", \"(()()(\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw9v3s66i.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9v3s66i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw9v3s66i.jl:34\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw9v3s66i.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9v3s66i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw9v3s66i.jl:35\n  Expression: candidate([\"()\", \"())\"])\
    \ == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw9v3s66i.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9v3s66i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw9v3s66i.jl:36\n  Expression: candidate([\"(()(\", \"()))()\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw9v3s66i.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw9v3s66i.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpw9v3s66i.jl:38\n  Expression: candidate([\")(()\", \"(()(\"\
    ]) == \"No\"\n   Evaluated: \"Yes\" == \"No\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tm"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 9 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw9v3s66i.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    # check\
    \ if the first string is good\n    if is_good(lst[1])\n        return \"Yes\"\n\
    \    end\n    # check if the second string is good\n    if is_good(lst[2])\n \
    \       return \"Yes\"\n    end\n    # check if the concatenation of the two strings\
    \ is good\n    if is_good(lst[1] * lst[2])\n        return \"Yes\"\n    end\n\
    \    # check if the concatenation of the two strings is good\n    if is_good(lst[2]\
    \ * lst[1])\n        return \"Yes\"\n    end\n    return \"No\"\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp782k3uc8.jl:39\n  Test threw exception\n\
    \  Expression: candidate([\"()(\", \")\"]) == \"Yes\"\n  UndefVarError: is_good\
    \ not defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @\
    \ Main /tmp/tmp782k3uc8.jl:17\n   [2] macro expansion\n     @ /tmp/tmp782k3uc8.jl:39\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp782k3uc8.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp782k3uc8.jl:40\n  Test threw exception\n  Expression:\
    \ candidate([\")\", \")\"]) == \"No\"\n  UndefVarError: is_good not defined\n\
    \  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main /tmp/tmp782k3uc8.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmp782k3uc8.jl:40 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp782k3uc8.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp782k3uc8.jl:41\n  Test threw exception\n  Expression:\
    \ candidate([\"(()(())\", \"())())\"]) == \"No\"\n  UndefVarError: is_good not\
    \ defined\n  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main\
    \ /tmp/tmp782k3uc8.jl:17\n   [2] macro expansion\n     @ /tmp/tmp782k3uc8.jl:41\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp782k3uc8.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp782k3uc8.jl:42\n  Test threw exception\n  Expression:\
    \ candidate([\")())\", \"(()()(\"]) == \"Yes\"\n  UndefVarError: is_good not defined\n\
    \  Stacktrace:\n   [1] match_parens(lst::Vector{String})\n     @ Main /tmp/tmp782k3uc8.jl:17\n\
    \   [2] macro expansion\n     @ /tmp/tmp782k3uc8.jl:42 [inlined]\n   [3] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmp782k3uc8.jl:38\ntest set:\
    \ Error During Test at /tmp/tmp78"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 12 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp782k3uc8.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You are given a list of two strings, both strings consist\
    \ of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is\
    \ to check if it is possible to concatenate the two strings in\n    some order,\
    \ that the resulting string will be good.\n    A string S is considered to be\
    \ good if and only if all parentheses in S\n    are balanced. For example: the\
    \ string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes'\
    \ if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n\
    \    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n\
    \    \"\"\"\nfunction match_parens(lst::Vector{String})::String \n    open_parens\
    \ = 0\n    for s in lst\n        for c in s\n            if c == '('\n       \
    \         open_parens += 1\n            elseif c == ')'\n                open_parens\
    \ -= 1\n            end\n            if open_parens < 0\n                return\
    \ \"No\"\n            end\n        end\n    end\n    if open_parens == 0\n   \
    \     return \"Yes\"\n    else\n        return \"No\"\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = match_parens;\n\t@test(candidate([\"()(\", \"\
    )\"]) == \"Yes\")\n\t@test(candidate([\")\", \")\"]) == \"No\")\n\t@test(candidate([\"\
    (()(())\", \"())())\"]) == \"No\")\n\t@test(candidate([\")())\", \"(()()(\"])\
    \ == \"Yes\")\n\t@test(candidate([\"(())))\", \"(()())((\"]) == \"Yes\")\n\t@test(candidate([\"\
    ()\", \"())\"]) == \"No\")\n\t@test(candidate([\"(()(\", \"()))()\"]) == \"Yes\"\
    )\n\t@test(candidate([\"((((\", \"((())\"]) == \"No\")\n\t@test(candidate([\"\
    )(()\", \"(()(\"]) == \"No\")\n\t@test(candidate([\")(\", \")(\"]) == \"No\")\n\
    \t@test(candidate([\"(\", \")\"]) == \"Yes\")\n\t@test(candidate([\")\", \"(\"\
    ]) == \"Yes\")\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgg2umy0t.jl:43\n  Expression: candidate([\"\
    )())\", \"(()()(\"]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgg2umy0t.jl:43 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgg2umy0t.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpgg2umy0t.jl:44\n  Expression: candidate([\"(())))\", \"(()())((\"\
    ]) == \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgg2umy0t.jl:44 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgg2umy0t.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpgg2umy0t.jl:51\n  Expression: candidate([\")\", \"(\"]) ==\
    \ \"Yes\"\n   Evaluated: \"No\" == \"Yes\"\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgg2umy0t.jl:51 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgg2umy0t.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    9     3     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 9 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgg2umy0t.jl:37\n"
  exit_code: 1
  status: SyntaxError
