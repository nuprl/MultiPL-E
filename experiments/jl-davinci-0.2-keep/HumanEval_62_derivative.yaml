name: HumanEval_62_derivative
language: julia
prompt: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] * x\
  \ + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same form.\n\
  \    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
  \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
  \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
  \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1])\
  \ == Vector{Int64}([]))\nend\n"
completions: ["    n = length(xs)\n    if n == 1\n        return [0]\n    end\n  \
    \  ys = zeros(Int64, n-1)\n    for i in 1:n-1\n        ys[i] = xs[i+1] * i\n \
    \   end\n    return ys\nend", "    n = length(xs)\n    if n == 1\n        return\
    \ [0]\n    end\n    return [xs[i] * i for i in 2:n]\nend", "    return xs[2:end]\
    \ .* (1:length(xs)-1)\nend", "    n = length(xs)\n    if n == 1\n        return\
    \ [0]\n    end\n    return [xs[i] * i for i in 2:n]\nend", "    return [i * xs[i]\
    \ for i in 2:length(xs)]\nend", "    # YOUR CODE HERE\n    if length(xs) == 1\n\
    \        return [0]\n    else\n        return [xs[i] * i for i in 2:length(xs)]\n\
    \    end\nend", "    return xs[2:end] .* (1:length(xs)-1)\nend", "    # YOUR CODE\
    \ HERE\n    return [i*xs[i] for i in 1:length(xs)-1]\nend", "    return [i * xs[i]\
    \ for i in 1:length(xs) - 1]\nend", "    return [i * xs[i] for i in 2:length(xs)]\n\
    end", "    n = length(xs)\n    if n == 1\n        return [0]\n    end\n    return\
    \ [xs[i] * i for i in 2:n]\nend", "    xs2 = zeros(Int64, length(xs)-1)\n    for\
    \ i in 1:length(xs)-1\n        xs2[i] = xs[i+1] * i\n    end\n    return xs2\n\
    end", "    n = length(xs)\n    if n == 1\n        return [0]\n    end\n    ys\
    \ = zeros(Int64, n-1)\n    for i in 1:n-1\n        ys[i] = i * xs[i+1]\n    end\n\
    \    return ys\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\nend", " \
    \   n = length(xs)\n    ys = zeros(Int64, n-1)\n    for i in 1:n-1\n        ys[i]\
    \ = xs[i+1] * i\n    end\n    return ys\nend", "    n = length(xs)\n    if n ==\
    \ 1\n        return [0]\n    end\n    return [xs[i] * i for i in 2:n]\nend", " \
    \   return [i * xs[i] for i in 1:length(xs) - 1]\nend", "    return [i * xs[i]\
    \ for i in 1:length(xs) - 1]\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\n\
    end", "    return [i * xs[i] for i in 2:length(xs)]\nend", "    return [i * xs[i]\
    \ for i in 1:length(xs) - 1]\nend", "    n = length(xs)\n    if n == 1\n     \
    \   return [0]\n    end\n    return [xs[i] * i for i in 2:n]\nend", "    return\
    \ [i * xs[i] for i in 2:length(xs)]\nend", "    return [i * xs[i] for i in 1:length(xs)\
    \ - 1]\nend", "    return [i * xs[i] for i in 2:length(xs)]\nend", "    return\
    \ xs[2:end] .* (1:length(xs)-1)\nend", "    n = length(xs)\n    if n == 1\n  \
    \      return [0]\n    end\n    ys = zeros(Int64, n-1)\n    for i in 1:n-1\n \
    \       ys[i] = xs[i+1] * i\n    end\n    return ys\nend", "    return [i * xs[i]\
    \ for i in 1:length(xs)-1]\nend", "    return xs[2:end] .* collect(1:length(xs)-1)\n\
    end", "    return [i * xs[i] for i in 1:length(xs)-1]\nend", "    return [i *\
    \ xs[i] for i in 1:length(xs) - 1]\nend", "    return [i * xs[i] for i in 1:length(xs)\
    \ - 1]\nend", "    xs_derivative = zeros(Int64, length(xs) - 1)\n    for i in\
    \ 1:length(xs_derivative)\n        xs_derivative[i] = xs[i + 1] * (i + 1)\n  \
    \  end\n    return xs_derivative\nend", "    n = length(xs)\n    if n == 1\n \
    \       return [0]\n    end\n    return [xs[i] * i for i in 2:n]\nend", "    return\
    \ [i * xs[i] for i in 2:length(xs)]\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\n\
    end", "    return [i * xs[i] for i in 1:length(xs) - 1]\nend", "    return [i\
    \ * xs[i] for i in 1:length(xs)-1]\nend", "    n = length(xs)\n    ys = zeros(Int64,\
    \ n-1)\n    for i in 1:n-1\n        ys[i] = i * xs[i+1]\n    end\n    return ys\n\
    end", "    return [i * xs[i] for i in 1:length(xs) - 1]\nend", "    n = length(xs)\n\
    \    if n == 1\n        return [0]\n    end\n    return [i * xs[i] for i in 1:n-1]\n\
    end", "    return xs[2:end] .* (1:length(xs)-1)\nend", "    n = length(xs)\n \
    \   if n == 1\n        return [0]\n    end\n    ys = zeros(Int64, n-1)\n    for\
    \ i in 1:n-1\n        ys[i] = xs[i+1] * i\n    end\n    return ys\nend", "   \
    \ xs_derivative = zeros(Int64, length(xs) - 1)\n    for i in 1:length(xs_derivative)\n\
    \        xs_derivative[i] = xs[i + 1] * (i + 1)\n    end\n    return xs_derivative\n\
    end", "    return [i * xs[i] for i in 1:length(xs) - 1]\nend", "    if length(xs)\
    \ == 1\n        return [0]\n    else\n        return [i * xs[i] for i in 2:length(xs)]\n\
    \    end\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\nend", "    return\
    \ [i * xs[i] for i in 1:length(xs)-1]\nend", "    return [i * xs[i] for i in 1:length(xs)\
    \ - 1]\nend", "    if length(xs) == 1\n        return [0]\n    else\n        return\
    \ [i * xs[i] for i in 1:length(xs) - 1]\n    end\nend", "    return xs[2:end]\
    \ .* (1:length(xs)-1)\nend", "    return [i * xs[i] for i in 1:length(xs) - 1]\n\
    end", "    return xs[2:end] .* (1:length(xs)-1)\nend", "    return [i * xs[i]\
    \ for i in 1:length(xs)-1]\nend", "    n = length(xs)\n    if n == 1\n       \
    \ return [0]\n    end\n    return [xs[i] * i for i in 2:n]\nend", "    xs_deriv\
    \ = zeros(Int64, length(xs)-1)\n    for i in 1:length(xs_deriv)\n        xs_deriv[i]\
    \ = xs[i+1] * (i+1)\n    end\n    return xs_deriv\nend", "    if length(xs) ==\
    \ 1\n        return [0]\n    else\n        return [i * xs[i] for i in 1:length(xs)\
    \ - 1]\n    end\nend", "    return [i * xs[i] for i in 1:length(xs) - 1]\nend",
  "    return xs[2:end] .* collect(1:length(xs)-1)\nend", "    n = length(xs)\n  \
    \  if n == 1\n        return [0]\n    end\n    dxs = zeros(Int64, n-1)\n    for\
    \ i in 1:n-1\n        dxs[i] = xs[i+1] * i\n    end\n    return dxs\nend", " \
    \   return [i * xs[i] for i in 1:length(xs) - 1]\nend", "    n = length(xs)\n\
    \    if n == 1\n        return [0]\n    end\n    return [i * xs[i] for i in 1:n-1]\n\
    end", "    n = length(xs)\n    ys = zeros(Int64, n-1)\n    for i = 1:n-1\n   \
    \     ys[i] = xs[i+1] * i\n    end\n    return ys\nend", "    return [i * xs[i]\
    \ for i in 2:length(xs)]\nend", "    n = length(xs)\n    if n == 1\n        return\
    \ [0]\n    end\n    return [xs[i] * i for i in 2:n]\nend", "    return [i * xs[i]\
    \ for i in 1:length(xs) - 1]\nend", "    xs_derivative = zeros(Int64, length(xs)-1)\n\
    \    for i in 1:length(xs)-1\n        xs_derivative[i] = xs[i+1] * (i+1)\n   \
    \ end\n    return xs_derivative\nend", "    return xs[2:end] .* (1:length(xs[2:end]))\n\
    end", "    return [i * xs[i] for i in 1:length(xs) - 1]\nend", "    if length(xs)\
    \ == 1\n        return [0]\n    else\n        return [i * xs[i] for i in 1:length(xs)\
    \ - 1]\n    end\nend", "    n = length(xs)\n    ys = zeros(Int64, n-1)\n    for\
    \ i in 1:n-1\n        ys[i] = i * xs[i+1]\n    end\n    return ys\nend", "   \
    \ n = length(xs)\n    if n == 1\n        return [0]\n    end\n    ys = zeros(Int64,\
    \ n-1)\n    for i = 1:n-1\n        ys[i] = i * xs[i+1]\n    end\n    return ys\n\
    end", "    return [xs[i] * i for i in 2:length(xs)]\nend", "    xs_derivative\
    \ = zeros(Int64, length(xs) - 1)\n    for i in 1:length(xs) - 1\n        xs_derivative[i]\
    \ = xs[i] * i\n    end\n    return xs_derivative\nend", "    return [i * xs[i]\
    \ for i in 1:length(xs) - 1]\nend", "    return [i * xs[i] for i in 1:length(xs)\
    \ - 1]\nend", "    xs_derivative = [i * xs[i] for i in 1:length(xs)-1]\n    return\
    \ xs_derivative\nend", "    n = length(xs)\n    if n == 1\n        return [0]\n\
    \    end\n    ys = zeros(Int64, n-1)\n    for i in 1:n-1\n        ys[i] = xs[i+1]\
    \ * i\n    end\n    return ys\nend", "    return [i * xs[i] for i in 1:length(xs)\
    \ - 1]\nend", "    n = length(xs)\n    if n == 1\n        return [0]\n    end\n\
    \    return [i * xs[i] for i in 1:n-1]\nend", "    return [i * xs[i] for i in\
    \ 1:length(xs) - 1]\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\nend",
  "    return [i * xs[i] for i in 1:length(xs) - 1]\nend", "    n = length(xs)\n \
    \   if n == 1\n        return [0]\n    end\n    return [xs[i] * i for i in 2:n]\n\
    end", "    return [i * xs[i] for i in 2:length(xs)]\nend", "    if length(xs)\
    \ == 1\n        return [0]\n    else\n        return [xs[i] * i for i in 2:length(xs)]\n\
    \    end\nend", "    return xs[2:end] .* (1:length(xs)-1)\nend", "    return [i\
    \ * xs[i] for i in 2:length(xs)]\nend", "    n = length(xs)\n    if n == 1\n \
    \       return [0]\n    end\n    ys = zeros(Int64, n-1)\n    for i in 1:n-1\n\
    \        ys[i] = xs[i+1] * i\n    end\n    return ys\nend", "    xs_new = zeros(Int64,\
    \ length(xs)-1)\n    for i in 1:length(xs_new)\n        xs_new[i] = xs[i+1]*(i+1)\n\
    \    end\n    return xs_new\nend", "    xs_derivative = Int64[]\n    for i in\
    \ 1:length(xs)-1\n        push!(xs_derivative, i*xs[i+1])\n    end\n    return\
    \ xs_derivative\nend", "    n = length(xs)\n    if n == 1\n        return [0]\n\
    \    end\n    ys = zeros(Int64, n-1)\n    for i in 1:n-1\n        ys[i] = xs[i+1]\
    \ * i\n    end\n    return ys\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\n\
    end", "    return [i * xs[i] for i in 1:length(xs)-1]\nend", "    return [i *\
    \ xs[i] for i in 2:length(xs)]\nend", "    n = length(xs)\n    ys = zeros(Int64,\
    \ n-1)\n    for i in 1:n-1\n        ys[i] = xs[i+1] * i\n    end\n    return ys\n\
    end", "    return [i * xs[i] for i in 1:length(xs)-1]\nend", "    xs_new = zeros(Int64,\
    \ length(xs)-1)\n    for i in 1:length(xs)-1\n        xs_new[i] = i*xs[i+1]\n\
    \    end\n    return xs_new\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\n\
    end", "    return [i * xs[i] for i in 1:length(xs) - 1]\nend", "    n = length(xs)\n\
    \    if n == 1\n        return [0]\n    end\n    ys = zeros(Int64, n-1)\n    for\
    \ i in 1:n-1\n        ys[i] = i * xs[i+1]\n    end\n    return ys\nend", "   \
    \ n = length(xs)\n    ys = zeros(Int64, n-1)\n    for i in 1:n-1\n        ys[i]\
    \ = xs[i+1] * i\n    end\n    return ys\nend", "    if length(xs) == 1\n     \
    \   return [0]\n    else\n        return [i * xs[i] for i in 2:length(xs)]\n \
    \   end\nend", "    n = length(xs)\n    ys = zeros(Int64, n-1)\n    for i in 1:n-1\n\
    \        ys[i] = xs[i+1] * i\n    end\n    return ys\nend", "    return [i * xs[i]\
    \ for i in 2:length(xs)]\nend", "    xs_deriv = zeros(Int64, length(xs)-1)\n \
    \   for i in 1:length(xs)-1\n        xs_deriv[i] = xs[i+1] * (i+1)\n    end\n\
    \    return xs_deriv\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\n\
    end", "    return [i * xs[i] for i in 1:length(xs) - 1]\nend", "    n = length(xs)\n\
    \    if n == 1\n        return [0]\n    end\n    ys = zeros(Int64, n-1)\n    for\
    \ i in 1:n-1\n        ys[i] = i * xs[i+1]\n    end\n    return ys\nend", "   \
    \ if length(xs) == 1\n        return [0]\n    else\n        return [i * xs[i]\
    \ for i in 2:length(xs)]\n    end\nend", "    return [i * xs[i] for i in 1:length(xs)\
    \ - 1]\nend", "    xs_derivative = zeros(Int64, length(xs) - 1)\n    for i in\
    \ 1:length(xs_derivative)\n        xs_derivative[i] = xs[i] * i\n    end\n   \
    \ return xs_derivative\nend", "    return [i * xs[i] for i in 2:length(xs)]\n\
    end", "    n = length(xs)\n    if n == 1\n        return [0]\n    end\n    return\
    \ [xs[i] * i for i in 2:n]\nend", "    xs_new = zeros(Int64, length(xs)-1)\n \
    \   for i in 1:length(xs)-1\n        xs_new[i] = xs[i+1] * (i+1)\n    end\n  \
    \  return xs_new\nend", "    if length(xs) == 1\n        return [0]\n    else\n\
    \        return [i * xs[i] for i in 1:length(xs) - 1]\n    end\nend", "    n =\
    \ length(xs)\n    if n == 1\n        return [0]\n    end\n    return [xs[i] *\
    \ i for i in 2:n]\nend", "    return xs[2:end] .* collect(1:length(xs)-1)\nend",
  "    n = length(xs)\n    ys = zeros(Int64, n-1)\n    for i in 1:n-1\n        ys[i]\
    \ = xs[i+1] * i\n    end\n    return ys\nend", "    return xs[2:end] .* (1:length(xs)-1)\n\
    end", "    return [i * xs[i] for i in 1:length(xs)-1]\nend", "    n = length(xs)\n\
    \    if n == 1\n        return [0]\n    end\n    return [i * xs[i] for i in 1:n-1]\n\
    end", "    n = length(xs)\n    if n == 1\n        return [0]\n    end\n    ys\
    \ = zeros(Int64, n-1)\n    for i in 1:n-1\n        ys[i] = xs[i+1] * i\n    end\n\
    \    return ys\nend", "    return [i * xs[i] for i in 2:length(xs)]\nend", " \
    \   return xs[2:end] .* collect(1:length(xs)-1)\nend", "    n = length(xs)\n \
    \   dxs = zeros(Int64, n-1)\n    for i in 1:n-1\n        dxs[i] = xs[i+1] * i\n\
    \    end\n    return dxs\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\n\
    end", "    return [i * xs[i] for i in 1:length(xs)-1]\nend", "    return [i *\
    \ xs[i] for i in 2:length(xs)]\nend", "    return xs[2:end] .* (1:length(xs[2:end]))\n\
    end", "    n = length(xs)\n    if n == 1\n        return [0]\n    end\n    return\
    \ [i * xs[i] for i in 1:n-1]\nend", "    return [i * xs[i] for i in 1:length(xs)\
    \ - 1]\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\nend", "    return\
    \ [i * xs[i] for i in 1:length(xs)-1]\nend", "    return [i * xs[i] for i in 1:length(xs)\
    \ - 1]\nend", "    return [i * xs[i] for i in 2:length(xs)]\nend", "    return\
    \ [i * xs[i] for i in 1:length(xs)-1]\nend", "    return xs[2:end] .* (1:length(xs)-1)\n\
    end", "    n = length(xs)\n    if n == 1\n        return [0]\n    end\n    return\
    \ [xs[i] * i for i in 2:n]\nend", "    return [i * xs[i] for i in 2:length(xs)]\n\
    end", "    return [i * xs[i] for i in 1:length(xs)-1]\nend", "    return [i *\
    \ xs[i] for i in 1:length(xs)-1]\nend", "    xs_derivative = zeros(Int64, length(xs)-1)\n\
    \    for i in 1:length(xs)-1\n        xs_derivative[i] = xs[i+1] * (i+1)\n   \
    \ end\n    return xs_derivative\nend", "    return [i * xs[i] for i in 1:length(xs)\
    \ - 1]\nend", "    n = length(xs)\n    return xs[2:n] .* (1:n-1)\nend", "    return\
    \ [i * xs[i] for i in 2:length(xs)]\nend", "    n = length(xs)\n    if n == 1\n\
    \        return [0]\n    end\n    ys = zeros(Int64, n-1)\n    for i in 1:n-1\n\
    \        ys[i] = xs[i+1] * i\n    end\n    return ys\nend", "    n = length(xs)\n\
    \    if n == 1\n        return [0]\n    end\n    ys = zeros(Int64, n-1)\n    for\
    \ i in 1:n-1\n        ys[i] = xs[i+1] * i\n    end\n    return ys\nend", "   \
    \ return [i * xs[i] for i in 2:length(xs)]\nend", "    xs_derivative = zeros(Int64,\
    \ length(xs) - 1)\n    for i in 1:length(xs_derivative)\n        xs_derivative[i]\
    \ = i * xs[i + 1]\n    end\n    return xs_derivative\nend", "    n = length(xs)\n\
    \    ys = zeros(Int64, n-1)\n    for i in 1:n-1\n        ys[i] = xs[i+1] * i\n\
    \    end\n    return ys\nend", "    return [i * xs[i] for i in 1:length(xs) -\
    \ 1]\nend", "    # YOUR CODE HERE\n    return xs[2:end] .* (1:length(xs[2:end]))\n\
    end", "    xs_derivative = zeros(Int64, length(xs)-1)\n    for i in 1:length(xs_derivative)\n\
    \        xs_derivative[i] = xs[i+1] * (i+1)\n    end\n    return xs_derivative\n\
    end", "    return [i * xs[i] for i in 1:length(xs) - 1]\nend", "    xs_new = []\n\
    \    for i in 1:length(xs)-1\n        push!(xs_new, i*xs[i+1])\n    end\n    return\
    \ xs_new\nend", "    return [i * xs[i] for i in 1:length(xs) - 1]\nend", "   \
    \ return [i * xs[i] for i in 1:length(xs)-1]\nend", "    xs_new = zeros(Int64,\
    \ length(xs)-1)\n    for i in 1:length(xs)-1\n        xs_new[i] = xs[i+1] * (i+1)\n\
    \    end\n    return xs_new\nend", "    n = length(xs)\n    ys = zeros(Int64,\
    \ n-1)\n    for i = 1:n-1\n        ys[i] = i * xs[i+1]\n    end\n    return ys\n\
    end", "    n = length(xs)\n    if n == 1\n        return [0]\n    end\n    ys\
    \ = zeros(Int64, n-1)\n    for i in 1:n-1\n        ys[i] = xs[i+1] * i\n    end\n\
    \    return ys\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\nend", " \
    \   return xs[2:end] .* (1:length(xs)-1)\nend", "    return [i * xs[i] for i in\
    \ 2:length(xs)]\nend", "    return [i * xs[i] for i in 1:length(xs) - 1]\nend",
  "    return [i * xs[i] for i in 1:length(xs)-1]\nend", "    return [i * xs[i] for\
    \ i in 1:length(xs) - 1]\nend", "    n = length(xs)\n    ys = zeros(Int64, n-1)\n\
    \    for i in 1:n-1\n        ys[i] = i * xs[i+1]\n    end\n    return ys\nend",
  "    xs_new = zeros(Int64, length(xs)-1)\n    for i in 1:length(xs_new)\n      \
    \  xs_new[i] = xs[i+1] * (i+1)\n    end\n    return xs_new\nend", "    return\
    \ [i * xs[i] for i in 2:length(xs)]\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\n\
    end", "    return [i * xs[i] for i in 1:length(xs) - 1]\nend", "    return [i\
    \ * xs[i + 1] for i in 1:length(xs) - 1]\nend", "    xs_new = zeros(Int64, length(xs)-1)\n\
    \    for i in 1:length(xs_new)\n        xs_new[i] = xs[i+1] * (i+1)\n    end\n\
    \    return xs_new\nend", "    n = length(xs)\n    if n == 1\n        return [0]\n\
    \    end\n    ys = zeros(Int64, n-1)\n    for i = 1:n-1\n        ys[i] = xs[i+1]\
    \ * i\n    end\n    return ys\nend", "    return xs[2:end] .* (1:length(xs)-1)\n\
    end", "    xs_new = zeros(Int64, length(xs)-1)\n    for i in 1:length(xs_new)\n\
    \        xs_new[i] = xs[i+1] * (i+1)\n    end\n    return xs_new\nend", "    n\
    \ = length(xs)\n    if n == 1\n        return [0]\n    end\n    return [i * xs[i]\
    \ for i in 1:n-1]\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\nend",
  "    n = length(xs)\n    if n == 1\n        return [0]\n    end\n    ys = zeros(Int64,\
    \ n-1)\n    for i in 1:n-1\n        ys[i] = xs[i+1] * i\n    end\n    return ys\n\
    end", "    return [i * xs[i] for i in 1:length(xs)-1]\nend", "    n = length(xs)\n\
    \    if n == 1\n        return [0]\n    end\n    ys = zeros(Int64, n-1)\n    for\
    \ i in 1:n-1\n        ys[i] = xs[i+1] * i\n    end\n    return ys\nend", "   \
    \ return [i * xs[i] for i in 1:length(xs) - 1]\nend", "    if length(xs) == 1\n\
    \        return [0]\n    else\n        return [i * xs[i] for i in 1:length(xs)\
    \ - 1]\n    end\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\nend",
  "    n = length(xs)\n    if n == 1\n        return [0]\n    end\n    ys = zeros(Int64,\
    \ n-1)\n    for i in 1:n-1\n        ys[i] = xs[i+1] * i\n    end\n    return ys\n\
    end", "    return xs[2:end] .* collect(1:length(xs)-1)\nend", "    return xs[2:end]\
    \ .* (1:length(xs)-1)\nend", "    return [i * xs[i] for i in 1:length(xs)-1]\n\
    end", "    # YOUR CODE HERE\n    return [xs[i]*i for i in 1:length(xs)-1]\nend",
  "    return [i * xs[i] for i in 1:length(xs)-1]\nend", "    return xs[2:end] .*\
    \ (1:length(xs)-1)\nend", "    return [i * xs[i] for i in 1:length(xs) - 1]\n\
    end", "    return [i * xs[i] for i in 1:length(xs)-1]\nend", "    return xs[2:end]\
    \ .* (1:length(xs[2:end]))\nend", "    n = length(xs)\n    return [xs[i] * i for\
    \ i in 2:n]\nend", "    return [i * xs[i] for i in 1:length(xs) - 1]\nend", " \
    \   return [i * xs[i] for i in 1:length(xs)-1]\nend", "    return [i * xs[i] for\
    \ i in 1:length(xs) - 1]\nend", "    xs_new = zeros(Int64, length(xs)-1)\n   \
    \ for i in 1:length(xs)-1\n        xs_new[i] = xs[i+1] * (i+1)\n    end\n    return\
    \ xs_new\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
