name: HumanEval_145_order_by_points
language: julia
prompt: "\"\"\"\n    Write a function which sorts the given list of integers\n   \
  \ in ascending order according to the sum of their digits.\n    Note: if there are\
  \ several items with similar sum of their digits,\n    order them based on their\
  \ index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1,\
  \ -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\
  \"\"\nfunction order_by_points(nums::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = order_by_points;\n\t@test(candidate([1,\
  \ 11, -1, -11, -12]) == [-1, -11, 1, -12, 11])\n\t@test(candidate([1234, 423, 463,\
  \ 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46]) == [0, 2, 3, 6, 53, 423, 423,\
  \ 423, 1234, 145, 37, 46, 56, 463, 3457])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([1, -11, -32, 43, 54, -98, 2, -3]) ==\
  \ [-3, -32, -98, -11, 1, 2, 43, 54])\n\t@test(candidate([1, 2, 3, 4, 5, 6, 7, 8,\
  \ 9, 10, 11]) == [1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n\t@test(candidate([0, 6,\
  \ 6, -76, -21, 23, 4]) == [-76, -21, 0, 4, 23, 6, 6])\nend\n"
completions: ["    if length(nums) == 0\n        return []\n    end\n    return sort(nums,\
    \ by = x -> (sum(digits(x)), x))\nend", "    nums_sum = [sum(digits(i)) for i\
    \ in nums]\n    return sortperm(nums_sum)[nums]\nend", "    nums_sorted = sort(nums,\
    \ by = x -> sum(digits(x)))\n    return nums_sorted\nend", "    return sort(nums,\
    \ by = x -> sum(digits(x)))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sortperm(nums, by=x->sum(digits(x)))\nend", "    sums\
    \ = [sum(digits(x)) for x in nums]\n    return [nums[i] for i in sortperm(sums)]\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    # your code here\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sortperm(sum.(digits.(nums)),\
    \ 1:length(nums))\nend", "    # your code here\nend", "    nums_sorted = sort(nums,\
    \ by = x -> sum(digits(x)))\n    return nums_sorted\nend", "    # your code here\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # sort by\
    \ sum of digits, then by index\n    return sortperm(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sortperm(sum.(digits.(nums)), by=nums)\nend", "    #\
    \ your code here\nend", "    # your code here\nend\n ", "    # your code here\n\
    end", "    return sort(nums, by=x->(sum(digits(x)),x))\nend", "    # your code\
    \ here\n    return nums\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    nums_with_sum\
    \ = [(sum(digits(x)), x) for x in nums]\n    sorted_nums = sort(nums_with_sum,\
    \ by=x->x[1])\n    return [x[2] for x in sorted_nums]\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    if length(nums) == 0\n        return\
    \ nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n    return nums[sortperm(sums)]\n\
    end", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    # your code\
    \ here\nend", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    if length(nums) == 0\n   \
    \     return []\n    end\n    sums = [sum(digits(x)) for x in nums]\n    return\
    \ [nums[i] for i in sortperm(sums)]\nend", "    return sortperm(sum.(digits.(nums)),\
    \ 1:length(nums))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend",
  "    # your code here\nend", "    # sort by sum of digits\n    # if there are several\
    \ items with similar sum of their digits,\n    # order them based on their index\
    \ in original list.\n    # return the sorted list\n    return sort(nums, by=x->(sum(digits(x)),\
    \ findall(x->x==x, nums)[1]))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    if length(nums) == 0\n        return nums\n    end\n    sums\
    \ = zeros(length(nums))\n    for i in 1:length(nums)\n        sums[i] = sum(digits(nums[i]))\n\
    \    end\n    return nums[sortperm(sums)]\nend", "    if length(nums) == 0\n \
    \       return nums\n    end\n    return sort(nums, by=x->(sum(digits(x)), x))\n\
    end", "    # your code here\nend", "    # your code here\n    return nums\nend",
  "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    if length(nums) ==\
    \ 0\n        return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n\
    \    return nums[sortperm(sums)]\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # your code here\n    return nums\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    # your code here\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    # your code here\nend", "    sorted_nums\
    \ = sort(nums, by=x->sum(digits(x)))\n    return sorted_nums\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    # your code here\nend", " \
    \   return sort(nums, by=x->(x, -x))\nend", "    if length(nums) == 0\n      \
    \  return nums\n    end\n    sums = [sum(digits(x)) for x in nums]\n    indices\
    \ = sortperm(sums)\n    return nums[indices]\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by = x ->\
    \ sum(digits(x)))\nend", "    sums = [sum(digits(x)) for x in nums]\n    return\
    \ sortperm(sums, 1)[1]\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\n\
    end", "    # your code here\nend", "    return sortperm(sum.(digits.(nums)), 1:length(nums))\n\
    end", "    if length(nums) == 0\n        return nums\n    end\n    # sort by sum\
    \ of digits\n    sort!(nums, by = x -> sum(digits(x)))\n    return nums\nend",
  "    return sortperm(sum.(abs.(digits.(nums))), collect(1:length(nums)))\nend",
  "    if length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(x))\
    \ for x in nums]\n    return sortperm(sums)[sortperm(nums)]\nend", "    # your\
    \ code here\nend", "    if length(nums) == 0\n        return []\n    end\n   \
    \ sums = zeros(length(nums))\n    for i in 1:length(nums)\n        sums[i] = sum(digits(nums[i]))\n\
    \    end\n    return nums[sortperm(sums)]\nend", "    # your code here\nend\n ",
  "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    nums_sorted = sort(nums,\
    \ by = x -> sum(digits(x)))\n    return nums_sorted\nend", "    return sortperm(sum.(digits.(nums)),\
    \ 1:length(nums))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend",
  "    # your code here\nend", "    if length(nums) == 0\n        return nums\n  \
    \  end\n    sums = [sum(digits(n)) for n in nums]\n    return sortperm(sums)\n\
    end", "    nums_with_points = [(n, sum(digits(n))) for n in nums]\n    sorted_nums_with_points\
    \ = sort(nums_with_points, by=x -> x[2])\n    return [n for (n, _) in sorted_nums_with_points]\n\
    end", "    # your code here\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ sort by sum of digits\n    # if sum of digits is equal, sort by index\n    #\
    \ sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n    # sort by index\n    # sort by sum of digits\n    # sort\
    \ by index\n    # sort by sum of digits\n    # sort by index\n    # sort by sum\
    \ of digits\n    # sort by index\n    # sort by sum of digits\n    # sort by index\n\
    \    # sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n\
    \    # sort by index\n    # sort by sum of digits\n    # sort by index\n    #\
    \ sort by sum of digits\n    # sort by index\n    # sort by sum of digits\n  \
    \  # sort by index\n    # sort by sum of digits\n    # sort by index\n    # sort\
    \ by sum of digits\n", "    return sort(nums, by=x->(sum(digits(x)), x))\nend",
  "    # your code here\nend", "    return sort(nums, by=x->(x, sum(digits(x))))\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by = x -> (sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return\
    \ sort(nums, by = x -> sum(digits(x)))\nend", "    # your code here\nend\n ",
  "    # your code here\nend", "    return sort(nums, by = x -> sum(digits(x)))\n\
    end", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    # your code\
    \ here\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your code here\nend", " \
    \   return sortperm(sum.(digits.(nums)), by=nums)\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    # your\
    \ code here\nend", "    # your code here\nend", "    # your code here\nend", " \
    \   # your code here\nend", "    return sort(nums, by = x -> sum(digits(x)))\n\
    end", "    # your code here\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    if length(nums) == 0\n        return nums\n    end\n    return\
    \ sort(nums, by = x -> sum(digits(x)))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # your code here\nend\n ", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your\
    \ code here\nend", "    return sort(nums, by = x -> sum(digits(x)))\nend", " \
    \   return sort(nums, by=x->(sum(digits(x)), x))\nend", "    if nums == []\n \
    \       return []\n    end\n    return sortperm(sum.(digits.(nums)), 1:length(nums))\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    # sort by sum of digits\n    # if sum\
    \ of digits is the same, sort by index\n    # sort by index is the default behavior\
    \ of sort\n    return sort(nums, by=x->sum(digits(x)))\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    if\
    \ length(nums) == 0\n        return nums\n    end\n    sums = [sum(digits(x))\
    \ for x in nums]\n    return nums[sortperm(sums)]\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    # your code here\nend", "    if length(nums)\
    \ == 0\n        return nums\n    end\n    sums = zeros(length(nums))\n    for\
    \ i in 1:length(nums)\n        sums[i] = sum(digits(nums[i]))\n    end\n    sortperm(sums)\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your code\
    \ here\nend", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # your code here\nend", "    # your code here\nend", "    #\
    \ your code here\nend", "    # your code here\nend", "    if length(nums) == 0\n\
    \        return nums\n    end\n    sums = [sum(digits(n)) for n in nums]\n   \
    \ return nums[sortperm(sums)]\nend", "    # your code here\nend", "    return\
    \ sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your code here\nend\n ",
  "    # your code here\nend", "    sums = [sum(digits(x)) for x in nums]\n    return\
    \ sortperm(sums)[nums]\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\n\
    end", "    # your code here\nend", "    return sort(nums, by = x -> sum(digits(x)))\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # your code here\nend", "    # sort by sum of digits\n    #\
    \ if sum of digits is equal, sort by index\n    # if index is equal, sort by value\n\
    \    # sort(nums, by=x->(sum(digits(x)), findall(nums .== x)[1], x))\n    sort(nums,\
    \ by=x->(sum(digits(x)), findall(nums .== x)[1], x))\nend", "    # your code here\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    # your code\
    \ here\nend", "    # your code here\nend\n ", "    if length(nums) == 0\n    \
    \    return []\n    end\n    sums = [sum(digits(x)) for x in nums]\n    return\
    \ sortperm(sums)\nend", "    # your code here\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    nums_with_points\
    \ = [(n, sum(digits(n))) for n in nums]\n    sorted_nums_with_points = sort(nums_with_points,\
    \ by=x -> x[2])\n    return [n for (n, _) in sorted_nums_with_points]\nend", " \
    \   if isempty(nums)\n        return nums\n    end\n    # sort by sum of digits\n\
    \    sorted_nums = sort(nums, by=x->sum(digits(x)))\n    # sort by index\n   \
    \ return sort(sorted_nums, by=x->findfirst(nums, x))\nend", "    if length(nums)\
    \ == 0\n        return []\n    end\n    nums_with_sum = [sum(digits(nums[i]))\
    \ for i in 1:length(nums)]\n    nums_with_sum_and_index = [(nums_with_sum[i],\
    \ i) for i in 1:length(nums)]\n    nums_with_sum_and_index_sorted = sort(nums_with_sum_and_index,\
    \ by = x -> x[1])\n    nums_sorted = [nums[nums_with_sum_and_index_sorted[i][2]]\
    \ for i in 1:length(nums)]\n    return nums_sorted\nend", "    # your code here\n\
    \    return nums\nend", "    # your code here\nend\n ", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    return sort(nums, by = x -> sum(digits(x)))\nend", "    return\
    \ sort(nums, by = x -> sum(digits(x)))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    if length(nums) == 0\n        return nums\n    end\n    sums\
    \ = [sum(digits(abs(i))) for i in nums]\n    return sortperm(sums)[nums]\nend",
  "    if length(nums) == 0\n        return nums\n    end\n    nums_with_points =\
    \ [(nums[i], sum(digits(nums[i])), i) for i in 1:length(nums)]\n    sorted_nums_with_points\
    \ = sort(nums_with_points, by = x -> (x[2], x[3]))\n    return [x[1] for x in\
    \ sorted_nums_with_points]\nend", "    return sort(nums, by = x -> sum(digits(x)))\n\
    end", "    # your code here\nend", "    # your code here\nend", "    # your code\
    \ here\nend", "    # your code here\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    if length(nums) == 0\n        return nums\n    end\n    nums_with_points\
    \ = [(nums[i], sum(digits(nums[i])), i) for i in 1:length(nums)]\n    sorted_nums_with_points\
    \ = sort(nums_with_points, by = x -> (x[2], x[3]))\n    return [x[1] for x in\
    \ sorted_nums_with_points]\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # your code here\nend", "    return sort(nums, by = x -> sum(digits(x)))\n\
    end", "    # your code here\nend\n ", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    # your code here\nend", "    return sort(nums, by = x -> sum(digits(x)))\n\
    end", "    return sort(nums, by=x->(sum(digits(x)), x))\nend", "    return sort(nums,\
    \ by=x->(sum(digits(x)), x))\nend", "    return sort(nums, by = x -> (sum(digits(x)),\
    \ x))\nend", "    # TODO: implement your solution here\n    return nums\nend",
  "    if length(nums) == 0\n        return nums\n    end\n    sums = zeros(Int64,\
    \ length(nums))\n    for i in 1:length(nums)\n        sums[i] = sum(digits(nums[i]))\n\
    \    end\n    return nums[sortperm(sums)]\nend", "    # your code here\nend\n ",
  "    return sort(nums, by=x->(sum(digits(x)), findall(nums .== x)[1]))\nend", " \
    \   # TODO: implement this function\n    return nums\nend", "    # your code here\n\
    end", "    if length(nums) == 0\n        return []\n    end\n    return sort(nums,\
    \ by=x->(x, sum(digits(x))))\nend", "    return sort(nums, by=x->(sum(digits(x)),\
    \ x))\nend", "    if length(nums) == 0\n        return nums\n    end\n    nums_with_points\
    \ = []\n    for i in 1:length(nums)\n        push!(nums_with_points, (nums[i],\
    \ sum(digits(nums[i]))))\n    end\n    sort!(nums_with_points, by = x -> x[2])\n\
    \    return [x[1] for x in nums_with_points]\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
