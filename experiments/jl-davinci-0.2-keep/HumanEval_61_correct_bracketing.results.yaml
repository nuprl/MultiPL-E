name: HumanEval_61_correct_bracketing
language: julia
results:
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif length(brackets) == 1\n        return\
    \ false\n    elseif brackets[1] == \")\"\n        return false\n    elseif brackets[end]\
    \ == \"(\"\n        return false\n    else\n        return correct_bracketing(brackets[2:end-1])\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7jlmq_qe.jl:36\n  Expression: candidate(\"\
    )(()\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp7jlmq_qe.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7jlmq_qe.jl:30\ntest set: Test Failed at /tmp/tmp7jlmq_qe.jl:38\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7jlmq_qe.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7jlmq_qe.jl:30\ntest set: Test Failed at /tmp/tmp7jlmq_qe.jl:41\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp7jlmq_qe.jl:41\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7jlmq_qe.jl:30\ntest set: Test Failed at /tmp/tmp7jlmq_qe.jl:42\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp7jlmq_qe.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7jlmq_qe.jl:30\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7jlmq_qe.jl:28\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    left_brackets =\
    \ 0\n    for i in brackets\n        if i == '('\n            left_brackets +=\
    \ 1\n        elseif i == ')'\n            left_brackets -= 1\n        end\n  \
    \      if left_brackets < 0\n            return false\n        end\n    end\n\
    \    return left_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprqtohl8c.jl:36\\n  Expression: candidate(\"\
    ((()())))\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmprqtohl8c.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprqtohl8c.jl:31\\ntest set: Test Failed at /tmp/tmprqtohl8c.jl:37\\\
    n  Expression: candidate(\")(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprqtohl8c.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprqtohl8c.jl:31\\ntest set: Test Failed at /tmp/tmprqtohl8c.jl:38\\\
    n  Expression: candidate(\"(\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprqtohl8c.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprqtohl8c.jl:31\\ntest set: Test Failed at /tmp/tmprqtohl8c.jl:39\\\
    n  Expression: candidate(\"((((\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprqtohl8c.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprqtohl8c.jl:31\\ntest set: Test Failed at /tmp/tmprqtohl8c.jl:40\\\
    n  Expression: candidate(\")\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprqtohl8c.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprqtohl8c.jl:31\\ntest set: Test Failed at /tmp/tmprqtohl8c.jl:41\\\
    n  Expression: candidate(\"(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprqtohl8c.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprqtohl8c.jl:31\\ntest set: Test Failed at /tmp/tmprqtohl8c.jl:42\\\
    n  Expression: candidate(\"()()(()())())(()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmprqtohl8c.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprqtohl8c.jl:31\\ntest set: Test Failed at /tmp/tmprqtohl8c.jl:43\\\
    n  Expression: candidate(\"()()(()())()))()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmprqtohl8c.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprqtohl8c.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     8     12\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzwb3_1ev.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpzwb3_1ev.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwb3_1ev.jl:31\ntest set: Test Failed at /tmp/tmpzwb3_1ev.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwb3_1ev.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwb3_1ev.jl:31\ntest set: Test Failed at /tmp/tmpzwb3_1ev.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwb3_1ev.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwb3_1ev.jl:31\ntest set: Test Failed at /tmp/tmpzwb3_1ev.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwb3_1ev.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwb3_1ev.jl:31\ntest set: Test Failed at /tmp/tmpzwb3_1ev.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwb3_1ev.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwb3_1ev.jl:31\ntest set: Test Failed at /tmp/tmpzwb3_1ev.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwb3_1ev.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwb3_1ev.jl:31\ntest set: Test Failed at /tmp/tmpzwb3_1ev.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpzwb3_1ev.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwb3_1ev.jl:31\ntest set: Test Failed at /tmp/tmpzwb3_1ev.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpzwb3_1ev.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwb3_1ev.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzwb3_1ev.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for c in brackets\n        if c == '('\n            open_count += 1\n   \
    \     elseif c == ')'\n            open_count -= 1\n        end\n        if open_count\
    \ < 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo0vxpecr.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpo0vxpecr.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo0vxpecr.jl:31\ntest set: Test Failed at /tmp/tmpo0vxpecr.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo0vxpecr.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo0vxpecr.jl:31\ntest set: Test Failed at /tmp/tmpo0vxpecr.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo0vxpecr.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo0vxpecr.jl:31\ntest set: Test Failed at /tmp/tmpo0vxpecr.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo0vxpecr.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo0vxpecr.jl:31\ntest set: Test Failed at /tmp/tmpo0vxpecr.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo0vxpecr.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo0vxpecr.jl:31\ntest set: Test Failed at /tmp/tmpo0vxpecr.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo0vxpecr.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo0vxpecr.jl:31\ntest set: Test Failed at /tmp/tmpo0vxpecr.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpo0vxpecr.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo0vxpecr.jl:31\ntest set: Test Failed at /tmp/tmpo0vxpecr.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpo0vxpecr.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo0vxpecr.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo0vxpecr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    if open_brackets == 0\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr6jhtdie.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpr6jhtdie.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6jhtdie.jl:31\ntest set: Test Failed at /tmp/tmpr6jhtdie.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr6jhtdie.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6jhtdie.jl:31\ntest set: Test Failed at /tmp/tmpr6jhtdie.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr6jhtdie.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6jhtdie.jl:31\ntest set: Test Failed at /tmp/tmpr6jhtdie.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr6jhtdie.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6jhtdie.jl:31\ntest set: Test Failed at /tmp/tmpr6jhtdie.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr6jhtdie.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6jhtdie.jl:31\ntest set: Test Failed at /tmp/tmpr6jhtdie.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr6jhtdie.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6jhtdie.jl:31\ntest set: Test Failed at /tmp/tmpr6jhtdie.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpr6jhtdie.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6jhtdie.jl:31\ntest set: Test Failed at /tmp/tmpr6jhtdie.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpr6jhtdie.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr6jhtdie.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr6jhtdie.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4f1lsg41.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp4f1lsg41.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4f1lsg41.jl:31\ntest set: Test Failed at /tmp/tmp4f1lsg41.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4f1lsg41.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4f1lsg41.jl:31\ntest set: Test Failed at /tmp/tmp4f1lsg41.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4f1lsg41.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4f1lsg41.jl:31\ntest set: Test Failed at /tmp/tmp4f1lsg41.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4f1lsg41.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4f1lsg41.jl:31\ntest set: Test Failed at /tmp/tmp4f1lsg41.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4f1lsg41.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4f1lsg41.jl:31\ntest set: Test Failed at /tmp/tmp4f1lsg41.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4f1lsg41.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4f1lsg41.jl:31\ntest set: Test Failed at /tmp/tmp4f1lsg41.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp4f1lsg41.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4f1lsg41.jl:31\ntest set: Test Failed at /tmp/tmp4f1lsg41.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp4f1lsg41.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4f1lsg41.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4f1lsg41.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '('\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == ')'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8etky0wc.jl:27\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp8etky0wc.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8etky0wc.jl:26\ntest set: Test Failed at /tmp/tmp8etky0wc.jl:28\n\
    \  Expression: candidate(\"(()())\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8etky0wc.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8etky0wc.jl:26\ntest set: Test Failed at /tmp/tmp8etky0wc.jl:29\n\
    \  Expression: candidate(\"()()(()())()\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8etky0wc.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8etky0wc.jl:26\ntest set: Test Failed at /tmp/tmp8etky0wc.jl:30\n\
    \  Expression: candidate(\"()()((()()())())(()()(()))\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp8etky0wc.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8etky0wc.jl:26\ntest set: Test Failed at /tmp/tmp8etky0wc.jl:33\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8etky0wc.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8etky0wc.jl:26\ntest set: Test Failed at /tmp/tmp8etky0wc.jl:34\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8etky0wc.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8etky0wc.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8etky0wc.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_bracket_count\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_bracket_count\
    \ += 1\n        elseif bracket == ')'\n            open_bracket_count -= 1\n \
    \       end\n        if open_bracket_count < 0\n            return false\n   \
    \     end\n    end\n    return open_bracket_count == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt5v8wcs2.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpt5v8wcs2.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt5v8wcs2.jl:31\ntest set: Test Failed at /tmp/tmpt5v8wcs2.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt5v8wcs2.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt5v8wcs2.jl:31\ntest set: Test Failed at /tmp/tmpt5v8wcs2.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt5v8wcs2.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt5v8wcs2.jl:31\ntest set: Test Failed at /tmp/tmpt5v8wcs2.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt5v8wcs2.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt5v8wcs2.jl:31\ntest set: Test Failed at /tmp/tmpt5v8wcs2.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt5v8wcs2.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt5v8wcs2.jl:31\ntest set: Test Failed at /tmp/tmpt5v8wcs2.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt5v8wcs2.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt5v8wcs2.jl:31\ntest set: Test Failed at /tmp/tmpt5v8wcs2.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpt5v8wcs2.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt5v8wcs2.jl:31\ntest set: Test Failed at /tmp/tmpt5v8wcs2.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpt5v8wcs2.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt5v8wcs2.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt5v8wcs2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4vy29cj0.jl:22\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp4vy29cj0.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4vy29cj0.jl:21\ntest set: Test Failed at /tmp/tmp4vy29cj0.jl:23\n\
    \  Expression: candidate(\"(()())\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4vy29cj0.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4vy29cj0.jl:21\ntest set: Test Failed at /tmp/tmp4vy29cj0.jl:24\n\
    \  Expression: candidate(\"()()(()())()\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4vy29cj0.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4vy29cj0.jl:21\ntest set: Test Failed at /tmp/tmp4vy29cj0.jl:25\n\
    \  Expression: candidate(\"()()((()()())())(()()(()))\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp4vy29cj0.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4vy29cj0.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4vy29cj0.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '('\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == ')'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxlsv96h7.jl:27\\n  Expression: candidate(\"\
    ()\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpxlsv96h7.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxlsv96h7.jl:26\\ntest set: Test Failed at /tmp/tmpxlsv96h7.jl:28\\\
    n  Expression: candidate(\"(()())\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxlsv96h7.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxlsv96h7.jl:26\\ntest set: Test Failed at /tmp/tmpxlsv96h7.jl:29\\\
    n  Expression: candidate(\"()()(()())()\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpxlsv96h7.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxlsv96h7.jl:26\\ntest set: Test Failed at /tmp/tmpxlsv96h7.jl:30\\\
    n  Expression: candidate(\"()()((()()())())(()()(()))\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmpxlsv96h7.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxlsv96h7.jl:26\\ntest set: Test Failed at /tmp/tmpxlsv96h7.jl:33\\\
    n  Expression: candidate(\"(\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxlsv96h7.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxlsv96h7.jl:26\\ntest set: Test Failed at /tmp/tmpxlsv96h7.jl:34\\\
    n  Expression: candidate(\"((((\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxlsv96h7.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxlsv96h7.jl:26\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    6     6     12\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '('\n            count +=\
    \ 1\n        elseif brackets[i] == ')'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmenrds7o.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpmenrds7o.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmenrds7o.jl:31\ntest set: Test Failed at /tmp/tmpmenrds7o.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmenrds7o.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmenrds7o.jl:31\ntest set: Test Failed at /tmp/tmpmenrds7o.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmenrds7o.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmenrds7o.jl:31\ntest set: Test Failed at /tmp/tmpmenrds7o.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmenrds7o.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmenrds7o.jl:31\ntest set: Test Failed at /tmp/tmpmenrds7o.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmenrds7o.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmenrds7o.jl:31\ntest set: Test Failed at /tmp/tmpmenrds7o.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmenrds7o.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmenrds7o.jl:31\ntest set: Test Failed at /tmp/tmpmenrds7o.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpmenrds7o.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmenrds7o.jl:31\ntest set: Test Failed at /tmp/tmpmenrds7o.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpmenrds7o.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmenrds7o.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmenrds7o.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpngg2hu6b.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpngg2hu6b.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpngg2hu6b.jl:31\ntest set: Test Failed at /tmp/tmpngg2hu6b.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpngg2hu6b.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpngg2hu6b.jl:31\ntest set: Test Failed at /tmp/tmpngg2hu6b.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpngg2hu6b.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpngg2hu6b.jl:31\ntest set: Test Failed at /tmp/tmpngg2hu6b.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpngg2hu6b.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpngg2hu6b.jl:31\ntest set: Test Failed at /tmp/tmpngg2hu6b.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpngg2hu6b.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpngg2hu6b.jl:31\ntest set: Test Failed at /tmp/tmpngg2hu6b.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpngg2hu6b.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpngg2hu6b.jl:31\ntest set: Test Failed at /tmp/tmpngg2hu6b.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpngg2hu6b.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpngg2hu6b.jl:31\ntest set: Test Failed at /tmp/tmpngg2hu6b.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpngg2hu6b.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpngg2hu6b.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpngg2hu6b.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1eyv5ptv.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1eyv5ptv.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1eyv5ptv.jl:31\ntest set: Test Failed at /tmp/tmp1eyv5ptv.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1eyv5ptv.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1eyv5ptv.jl:31\ntest set: Test Failed at /tmp/tmp1eyv5ptv.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1eyv5ptv.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1eyv5ptv.jl:31\ntest set: Test Failed at /tmp/tmp1eyv5ptv.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1eyv5ptv.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1eyv5ptv.jl:31\ntest set: Test Failed at /tmp/tmp1eyv5ptv.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1eyv5ptv.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1eyv5ptv.jl:31\ntest set: Test Failed at /tmp/tmp1eyv5ptv.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1eyv5ptv.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1eyv5ptv.jl:31\ntest set: Test Failed at /tmp/tmp1eyv5ptv.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp1eyv5ptv.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1eyv5ptv.jl:31\ntest set: Test Failed at /tmp/tmp1eyv5ptv.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp1eyv5ptv.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1eyv5ptv.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1eyv5ptv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '('\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == ')'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplnjii4_4.jl:27\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmplnjii4_4.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnjii4_4.jl:26\ntest set: Test Failed at /tmp/tmplnjii4_4.jl:28\n\
    \  Expression: candidate(\"(()())\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplnjii4_4.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnjii4_4.jl:26\ntest set: Test Failed at /tmp/tmplnjii4_4.jl:29\n\
    \  Expression: candidate(\"()()(()())()\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplnjii4_4.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnjii4_4.jl:26\ntest set: Test Failed at /tmp/tmplnjii4_4.jl:30\n\
    \  Expression: candidate(\"()()((()()())())(()()(()))\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmplnjii4_4.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnjii4_4.jl:26\ntest set: Test Failed at /tmp/tmplnjii4_4.jl:33\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplnjii4_4.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnjii4_4.jl:26\ntest set: Test Failed at /tmp/tmplnjii4_4.jl:34\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplnjii4_4.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnjii4_4.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplnjii4_4.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7pxsi02x.jl:36\\n  Expression: candidate(\"\
    ((()())))\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp7pxsi02x.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7pxsi02x.jl:31\\ntest set: Test Failed at /tmp/tmp7pxsi02x.jl:37\\\
    n  Expression: candidate(\")(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp7pxsi02x.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7pxsi02x.jl:31\\ntest set: Test Failed at /tmp/tmp7pxsi02x.jl:38\\\
    n  Expression: candidate(\"(\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp7pxsi02x.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7pxsi02x.jl:31\\ntest set: Test Failed at /tmp/tmp7pxsi02x.jl:39\\\
    n  Expression: candidate(\"((((\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp7pxsi02x.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7pxsi02x.jl:31\\ntest set: Test Failed at /tmp/tmp7pxsi02x.jl:40\\\
    n  Expression: candidate(\")\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp7pxsi02x.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7pxsi02x.jl:31\\ntest set: Test Failed at /tmp/tmp7pxsi02x.jl:41\\\
    n  Expression: candidate(\"(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp7pxsi02x.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7pxsi02x.jl:31\\ntest set: Test Failed at /tmp/tmp7pxsi02x.jl:42\\\
    n  Expression: candidate(\"()()(()())())(()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7pxsi02x.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7pxsi02x.jl:31\\ntest set: Test Failed at /tmp/tmp7pxsi02x.jl:43\\\
    n  Expression: candidate(\"()()(()())()))()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp7pxsi02x.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7pxsi02x.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     8     12\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in 1:length(brackets)\n        if brackets[i] == '('\n            n += 1\n \
    \       elseif brackets[i] == ')'\n            n -= 1\n        end\n        if\
    \ n < 0\n            return false\n        end\n    end\n    return n == 0\nend\n\
    using Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == \")\"\n        return false\n\
    \    elseif brackets[end] == \"(\"\n        return false\n    else\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgy894tlf.jl:33\\n  Expression: candidate(\"\
    ((()())))\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpgy894tlf.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgy894tlf.jl:28\\ntest set: Test Failed at /tmp/tmpgy894tlf.jl:34\\\
    n  Expression: candidate(\")(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgy894tlf.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgy894tlf.jl:28\\ntest set: Test Failed at /tmp/tmpgy894tlf.jl:35\\\
    n  Expression: candidate(\"(\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgy894tlf.jl:35\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgy894tlf.jl:28\\ntest set: Test Failed at /tmp/tmpgy894tlf.jl:36\\\
    n  Expression: candidate(\"((((\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgy894tlf.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgy894tlf.jl:28\\ntest set: Test Failed at /tmp/tmpgy894tlf.jl:37\\\
    n  Expression: candidate(\")\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgy894tlf.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgy894tlf.jl:28\\ntest set: Test Failed at /tmp/tmpgy894tlf.jl:38\\\
    n  Expression: candidate(\"(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgy894tlf.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgy894tlf.jl:28\\ntest set: Test Failed at /tmp/tmpgy894tlf.jl:39\\\
    n  Expression: candidate(\"()()(()())())(()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgy894tlf.jl:39\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgy894tlf.jl:28\\ntest set: Test Failed at /tmp/tmpgy894tlf.jl:40\\\
    n  Expression: candidate(\"()()(()())()))()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpgy894tlf.jl:40\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgy894tlf.jl:28\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     8     12\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for i in brackets\n        if i == '('\n            push!(stack, i)\n      \
    \  elseif i == ')'\n            if isempty(stack)\n                return false\n\
    \            else\n                pop!(stack)\n            end\n        end\n\
    \    end\n    return isempty(stack)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == \")\"\n        return false\n\
    \    elseif brackets[end] == \"(\"\n        return false\n    else\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy39r5qjb.jl:33\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpy39r5qjb.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy39r5qjb.jl:28\ntest set: Test Failed at /tmp/tmpy39r5qjb.jl:34\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy39r5qjb.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy39r5qjb.jl:28\ntest set: Test Failed at /tmp/tmpy39r5qjb.jl:35\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy39r5qjb.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy39r5qjb.jl:28\ntest set: Test Failed at /tmp/tmpy39r5qjb.jl:36\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy39r5qjb.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy39r5qjb.jl:28\ntest set: Test Failed at /tmp/tmpy39r5qjb.jl:37\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy39r5qjb.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy39r5qjb.jl:28\ntest set: Test Failed at /tmp/tmpy39r5qjb.jl:38\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy39r5qjb.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy39r5qjb.jl:28\ntest set: Test Failed at /tmp/tmpy39r5qjb.jl:39\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpy39r5qjb.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy39r5qjb.jl:28\ntest set: Test Failed at /tmp/tmpy39r5qjb.jl:40\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpy39r5qjb.jl:40\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy39r5qjb.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy39r5qjb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpt8poedt9.jl:36\\n  Expression: candidate(\"\
    ((()())))\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpt8poedt9.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt8poedt9.jl:31\\ntest set: Test Failed at /tmp/tmpt8poedt9.jl:37\\\
    n  Expression: candidate(\")(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpt8poedt9.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt8poedt9.jl:31\\ntest set: Test Failed at /tmp/tmpt8poedt9.jl:38\\\
    n  Expression: candidate(\"(\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpt8poedt9.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt8poedt9.jl:31\\ntest set: Test Failed at /tmp/tmpt8poedt9.jl:39\\\
    n  Expression: candidate(\"((((\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpt8poedt9.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt8poedt9.jl:31\\ntest set: Test Failed at /tmp/tmpt8poedt9.jl:40\\\
    n  Expression: candidate(\")\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpt8poedt9.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt8poedt9.jl:31\\ntest set: Test Failed at /tmp/tmpt8poedt9.jl:41\\\
    n  Expression: candidate(\"(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpt8poedt9.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt8poedt9.jl:31\\ntest set: Test Failed at /tmp/tmpt8poedt9.jl:42\\\
    n  Expression: candidate(\"()()(()())())(()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpt8poedt9.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt8poedt9.jl:31\\ntest set: Test Failed at /tmp/tmpt8poedt9.jl:43\\\
    n  Expression: candidate(\"()()(()())()))()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpt8poedt9.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpt8poedt9.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     8     12\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpt8poedt9.jl:29\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for i in 1:length(brackets)\n        if brackets[i] == '('\n            open_count\
    \ += 1\n        elseif brackets[i] == ')'\n            open_count -= 1\n     \
    \   end\n        if open_count < 0\n            return false\n        end\n  \
    \  end\n    return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    counter = 0\n  \
    \  for i in brackets\n        if i == \"(\"\n            counter += 1\n      \
    \  elseif i == \")\"\n            counter -= 1\n        end\n        if counter\
    \ < 0\n            return false\n        end\n    end\n    return counter == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpegp4z26o.jl:36\\n  Expression: candidate(\"\
    ((()())))\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpegp4z26o.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpegp4z26o.jl:31\\ntest set: Test Failed at /tmp/tmpegp4z26o.jl:37\\\
    n  Expression: candidate(\")(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpegp4z26o.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpegp4z26o.jl:31\\ntest set: Test Failed at /tmp/tmpegp4z26o.jl:38\\\
    n  Expression: candidate(\"(\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpegp4z26o.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpegp4z26o.jl:31\\ntest set: Test Failed at /tmp/tmpegp4z26o.jl:39\\\
    n  Expression: candidate(\"((((\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpegp4z26o.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpegp4z26o.jl:31\\ntest set: Test Failed at /tmp/tmpegp4z26o.jl:40\\\
    n  Expression: candidate(\")\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpegp4z26o.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpegp4z26o.jl:31\\ntest set: Test Failed at /tmp/tmpegp4z26o.jl:41\\\
    n  Expression: candidate(\"(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpegp4z26o.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpegp4z26o.jl:31\\ntest set: Test Failed at /tmp/tmpegp4z26o.jl:42\\\
    n  Expression: candidate(\"()()(()())())(()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpegp4z26o.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpegp4z26o.jl:31\\ntest set: Test Failed at /tmp/tmpegp4z26o.jl:43\\\
    n  Expression: candidate(\"()()(()())()))()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpegp4z26o.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpegp4z26o.jl:31\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgv5fmdf_.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgv5fmdf_.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgv5fmdf_.jl:31\ntest set: Test Failed at /tmp/tmpgv5fmdf_.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgv5fmdf_.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgv5fmdf_.jl:31\ntest set: Test Failed at /tmp/tmpgv5fmdf_.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgv5fmdf_.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgv5fmdf_.jl:31\ntest set: Test Failed at /tmp/tmpgv5fmdf_.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgv5fmdf_.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgv5fmdf_.jl:31\ntest set: Test Failed at /tmp/tmpgv5fmdf_.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgv5fmdf_.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgv5fmdf_.jl:31\ntest set: Test Failed at /tmp/tmpgv5fmdf_.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgv5fmdf_.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgv5fmdf_.jl:31\ntest set: Test Failed at /tmp/tmpgv5fmdf_.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpgv5fmdf_.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgv5fmdf_.jl:31\ntest set: Test Failed at /tmp/tmpgv5fmdf_.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpgv5fmdf_.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgv5fmdf_.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgv5fmdf_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            bracket_count\
    \ += 1\n        elseif bracket == ')'\n            bracket_count -= 1\n      \
    \  end\n        if bracket_count < 0\n            return false\n        end\n\
    \    end\n    return bracket_count == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzwqxghp9.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpzwqxghp9.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwqxghp9.jl:31\ntest set: Test Failed at /tmp/tmpzwqxghp9.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwqxghp9.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwqxghp9.jl:31\ntest set: Test Failed at /tmp/tmpzwqxghp9.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwqxghp9.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwqxghp9.jl:31\ntest set: Test Failed at /tmp/tmpzwqxghp9.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwqxghp9.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwqxghp9.jl:31\ntest set: Test Failed at /tmp/tmpzwqxghp9.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwqxghp9.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwqxghp9.jl:31\ntest set: Test Failed at /tmp/tmpzwqxghp9.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwqxghp9.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwqxghp9.jl:31\ntest set: Test Failed at /tmp/tmpzwqxghp9.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpzwqxghp9.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwqxghp9.jl:31\ntest set: Test Failed at /tmp/tmpzwqxghp9.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpzwqxghp9.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwqxghp9.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzwqxghp9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in brackets\n        if i == \"(\"\n            open_brackets +=\
    \ 1\n        elseif i == \")\"\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpolola7pk.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpolola7pk.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolola7pk.jl:31\ntest set: Test Failed at /tmp/tmpolola7pk.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpolola7pk.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolola7pk.jl:31\ntest set: Test Failed at /tmp/tmpolola7pk.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpolola7pk.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolola7pk.jl:31\ntest set: Test Failed at /tmp/tmpolola7pk.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpolola7pk.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolola7pk.jl:31\ntest set: Test Failed at /tmp/tmpolola7pk.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpolola7pk.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolola7pk.jl:31\ntest set: Test Failed at /tmp/tmpolola7pk.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpolola7pk.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolola7pk.jl:31\ntest set: Test Failed at /tmp/tmpolola7pk.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpolola7pk.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolola7pk.jl:31\ntest set: Test Failed at /tmp/tmpolola7pk.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpolola7pk.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolola7pk.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpolola7pk.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '('\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == ')'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpehqthdrs.jl:27\\n  Expression: candidate(\"\
    ()\") == true\\n   Evaluated: false == true\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpehqthdrs.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpehqthdrs.jl:26\\ntest set: Test Failed at /tmp/tmpehqthdrs.jl:28\\\
    n  Expression: candidate(\"(()())\") == true\\n   Evaluated: false == true\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpehqthdrs.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpehqthdrs.jl:26\\ntest set: Test Failed at /tmp/tmpehqthdrs.jl:29\\\
    n  Expression: candidate(\"()()(()())()\") == true\\n   Evaluated: false == true\\\
    nStacktrace:\\n [1] top-level scope at /tmp/tmpehqthdrs.jl:29\\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpehqthdrs.jl:26\\ntest set: Test Failed at /tmp/tmpehqthdrs.jl:30\\\
    n  Expression: candidate(\"()()((()()())())(()()(()))\") == true\\n   Evaluated:\
    \ false == true\\nStacktrace:\\n [1] top-level scope at /tmp/tmpehqthdrs.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpehqthdrs.jl:26\\ntest set: Test Failed at /tmp/tmpehqthdrs.jl:33\\\
    n  Expression: candidate(\"(\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpehqthdrs.jl:33\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpehqthdrs.jl:26\\ntest set: Test Failed at /tmp/tmpehqthdrs.jl:34\\\
    n  Expression: candidate(\"((((\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpehqthdrs.jl:34\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpehqthdrs.jl:26\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgffr48jg.jl:22\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpgffr48jg.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgffr48jg.jl:21\ntest set: Test Failed at /tmp/tmpgffr48jg.jl:23\n\
    \  Expression: candidate(\"(()())\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgffr48jg.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgffr48jg.jl:21\ntest set: Test Failed at /tmp/tmpgffr48jg.jl:24\n\
    \  Expression: candidate(\"()()(()())()\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgffr48jg.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgffr48jg.jl:21\ntest set: Test Failed at /tmp/tmpgffr48jg.jl:25\n\
    \  Expression: candidate(\"()()((()()())())(()()(()))\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpgffr48jg.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgffr48jg.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgffr48jg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjlsld1fq.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjlsld1fq.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjlsld1fq.jl:31\ntest set: Test Failed at /tmp/tmpjlsld1fq.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjlsld1fq.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjlsld1fq.jl:31\ntest set: Test Failed at /tmp/tmpjlsld1fq.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjlsld1fq.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjlsld1fq.jl:31\ntest set: Test Failed at /tmp/tmpjlsld1fq.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjlsld1fq.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjlsld1fq.jl:31\ntest set: Test Failed at /tmp/tmpjlsld1fq.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjlsld1fq.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjlsld1fq.jl:31\ntest set: Test Failed at /tmp/tmpjlsld1fq.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjlsld1fq.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjlsld1fq.jl:31\ntest set: Test Failed at /tmp/tmpjlsld1fq.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpjlsld1fq.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjlsld1fq.jl:31\ntest set: Test Failed at /tmp/tmpjlsld1fq.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpjlsld1fq.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjlsld1fq.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjlsld1fq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for bracket in brackets\n        if bracket == '('\n            open_count\
    \ += 1\n        elseif bracket == ')'\n            open_count -= 1\n        end\n\
    \        if open_count < 0\n            return false\n        end\n    end\n \
    \   return open_count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp8hqowqit.jl:36\\n  Expression: candidate(\"\
    ((()())))\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp8hqowqit.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8hqowqit.jl:31\\ntest set: Test Failed at /tmp/tmp8hqowqit.jl:37\\\
    n  Expression: candidate(\")(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp8hqowqit.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8hqowqit.jl:31\\ntest set: Test Failed at /tmp/tmp8hqowqit.jl:38\\\
    n  Expression: candidate(\"(\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp8hqowqit.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8hqowqit.jl:31\\ntest set: Test Failed at /tmp/tmp8hqowqit.jl:39\\\
    n  Expression: candidate(\"((((\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp8hqowqit.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8hqowqit.jl:31\\ntest set: Test Failed at /tmp/tmp8hqowqit.jl:40\\\
    n  Expression: candidate(\")\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp8hqowqit.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8hqowqit.jl:31\\ntest set: Test Failed at /tmp/tmp8hqowqit.jl:41\\\
    n  Expression: candidate(\"(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp8hqowqit.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8hqowqit.jl:31\\ntest set: Test Failed at /tmp/tmp8hqowqit.jl:42\\\
    n  Expression: candidate(\"()()(()())())(()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8hqowqit.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8hqowqit.jl:31\\ntest set: Test Failed at /tmp/tmp8hqowqit.jl:43\\\
    n  Expression: candidate(\"()()(()())()))()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp8hqowqit.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp8hqowqit.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     8     12\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '('\n            count +=\
    \ 1\n        elseif brackets[i] == ')'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '('\n            count +=\
    \ 1\n        elseif brackets[i] == ')'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5l5jakdi.jl:40\\n  Expression: candidate(\"\
    ((()())))\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp5l5jakdi.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5l5jakdi.jl:35\\ntest set: Test Failed at /tmp/tmp5l5jakdi.jl:41\\\
    n  Expression: candidate(\")(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5l5jakdi.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5l5jakdi.jl:35\\ntest set: Test Failed at /tmp/tmp5l5jakdi.jl:42\\\
    n  Expression: candidate(\"(\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5l5jakdi.jl:42\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5l5jakdi.jl:35\\ntest set: Test Failed at /tmp/tmp5l5jakdi.jl:43\\\
    n  Expression: candidate(\"((((\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5l5jakdi.jl:43\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5l5jakdi.jl:35\\ntest set: Test Failed at /tmp/tmp5l5jakdi.jl:44\\\
    n  Expression: candidate(\")\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5l5jakdi.jl:44\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5l5jakdi.jl:35\\ntest set: Test Failed at /tmp/tmp5l5jakdi.jl:45\\\
    n  Expression: candidate(\"(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5l5jakdi.jl:45\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5l5jakdi.jl:35\\ntest set: Test Failed at /tmp/tmp5l5jakdi.jl:46\\\
    n  Expression: candidate(\"()()(()())())(()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5l5jakdi.jl:46\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5l5jakdi.jl:35\\ntest set: Test Failed at /tmp/tmp5l5jakdi.jl:47\\\
    n  Expression: candidate(\"()()(()())()))()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5l5jakdi.jl:47\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5l5jakdi.jl:35\\nTest Summary: | Pass  Fail \
    \ Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp60dkpm6v.jl:22\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp60dkpm6v.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp60dkpm6v.jl:21\ntest set: Test Failed at /tmp/tmp60dkpm6v.jl:23\n\
    \  Expression: candidate(\"(()())\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp60dkpm6v.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp60dkpm6v.jl:21\ntest set: Test Failed at /tmp/tmp60dkpm6v.jl:24\n\
    \  Expression: candidate(\"()()(()())()\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp60dkpm6v.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp60dkpm6v.jl:21\ntest set: Test Failed at /tmp/tmp60dkpm6v.jl:25\n\
    \  Expression: candidate(\"()()((()()())())(()()(()))\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp60dkpm6v.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp60dkpm6v.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp60dkpm6v.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets::Int\
    \ = 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsdbhhix4.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpsdbhhix4.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsdbhhix4.jl:31\ntest set: Test Failed at /tmp/tmpsdbhhix4.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsdbhhix4.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsdbhhix4.jl:31\ntest set: Test Failed at /tmp/tmpsdbhhix4.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsdbhhix4.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsdbhhix4.jl:31\ntest set: Test Failed at /tmp/tmpsdbhhix4.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsdbhhix4.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsdbhhix4.jl:31\ntest set: Test Failed at /tmp/tmpsdbhhix4.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsdbhhix4.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsdbhhix4.jl:31\ntest set: Test Failed at /tmp/tmpsdbhhix4.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsdbhhix4.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsdbhhix4.jl:31\ntest set: Test Failed at /tmp/tmpsdbhhix4.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpsdbhhix4.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsdbhhix4.jl:31\ntest set: Test Failed at /tmp/tmpsdbhhix4.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpsdbhhix4.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsdbhhix4.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsdbhhix4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpboisii39.jl:36\\n  Expression: candidate(\"\
    ((()())))\") == false\\n   Evaluated: true == false\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpboisii39.jl:36\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpboisii39.jl:31\\ntest set: Test Failed at /tmp/tmpboisii39.jl:37\\\
    n  Expression: candidate(\")(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpboisii39.jl:37\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpboisii39.jl:31\\ntest set: Test Failed at /tmp/tmpboisii39.jl:38\\\
    n  Expression: candidate(\"(\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpboisii39.jl:38\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpboisii39.jl:31\\ntest set: Test Failed at /tmp/tmpboisii39.jl:39\\\
    n  Expression: candidate(\"((((\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpboisii39.jl:39\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpboisii39.jl:31\\ntest set: Test Failed at /tmp/tmpboisii39.jl:40\\\
    n  Expression: candidate(\")\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpboisii39.jl:40\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpboisii39.jl:31\\ntest set: Test Failed at /tmp/tmpboisii39.jl:41\\\
    n  Expression: candidate(\"(()\") == false\\n   Evaluated: true == false\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpboisii39.jl:41\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpboisii39.jl:31\\ntest set: Test Failed at /tmp/tmpboisii39.jl:42\\\
    n  Expression: candidate(\"()()(()())())(()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpboisii39.jl:42\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpboisii39.jl:31\\ntest set: Test Failed at /tmp/tmpboisii39.jl:43\\\
    n  Expression: candidate(\"()()(()())()))()\") == false\\n   Evaluated: true ==\
    \ false\\nStacktrace:\\n [1] top-level scope at /tmp/tmpboisii39.jl:43\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpboisii39.jl:31\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     8     12\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    (\"\n        return false\n    end\n    if brackets == \"()\"\n        return\
    \ true\n    end\n    if brackets == \"(()())\"\n        return true\n    end\n\
    \    if brackets == \")(()\"\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvkt8kfde.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"()()(()())()\") == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpvkt8kfde.jl:24\n   [2] top-level scope at /tmp/tmpvkt8kfde.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvkt8kfde.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpvkt8kfde.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    ()()((()()())())(()()(()))\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpvkt8kfde.jl:24\n   [2] top-level scope at /tmp/tmpvkt8kfde.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvkt8kfde.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpvkt8kfde.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    ((()())))\") == false\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpvkt8kfde.jl:24\n   [2] top-level scope at /tmp/tmpvkt8kfde.jl:36\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvkt8kfde.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpvkt8kfde.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    ((((\") == false\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpvkt8kfde.jl:24\n   [2] top-level scope at /tmp/tmpvkt8kfde.jl:39\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvkt8kfde.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpvkt8kfde.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    )\") == false\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpvkt8kfde.jl:24\n   [2] top-level scope at /tmp/tmpvkt8kfde.jl:40\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvkt8kfde.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpvkt8kfde.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    (()\") == false\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpvkt8kfde.jl:24\n   [2] top-level scope at /tmp/tmpvkt8kfde.jl:41\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvkt8kfde.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpvkt8kfde.jl:42\n  Test threw exception\n  Expression: candidate(\"\
    ()()(()())())(()\") == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpvkt8kfde.jl:24\n   [2] top-level scope at /tmp/tmpvkt8kfde.jl:42\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvkt8kfde.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpvkt8kfde.jl:43\n  Test threw exception\n  Expression: candidate(\"\
    ()()(()())()))()\") == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpvkt8kfde.jl:24\n   [2] top-level scope at /tmp/tmpvkt8kfde.jl:43\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvkt8kfde.jl:31\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    4      8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvkt8kfde.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    (\"\n        return false\n    end\n    if brackets == \"()\"\n        return\
    \ true\n    end\n    if brackets == \"(()())\"\n        return true\n    end\n\
    \    if brackets == \")(()\"\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuya6vgqg.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"()()(()())()\") == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpuya6vgqg.jl:24\n   [2] top-level scope at /tmp/tmpuya6vgqg.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuya6vgqg.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpuya6vgqg.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    ()()((()()())())(()()(()))\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpuya6vgqg.jl:24\n   [2] top-level scope at /tmp/tmpuya6vgqg.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuya6vgqg.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpuya6vgqg.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    ((()())))\") == false\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpuya6vgqg.jl:24\n   [2] top-level scope at /tmp/tmpuya6vgqg.jl:36\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuya6vgqg.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpuya6vgqg.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    ((((\") == false\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpuya6vgqg.jl:24\n   [2] top-level scope at /tmp/tmpuya6vgqg.jl:39\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuya6vgqg.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpuya6vgqg.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    )\") == false\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpuya6vgqg.jl:24\n   [2] top-level scope at /tmp/tmpuya6vgqg.jl:40\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuya6vgqg.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpuya6vgqg.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    (()\") == false\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpuya6vgqg.jl:24\n   [2] top-level scope at /tmp/tmpuya6vgqg.jl:41\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuya6vgqg.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpuya6vgqg.jl:42\n  Test threw exception\n  Expression: candidate(\"\
    ()()(()())())(()\") == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpuya6vgqg.jl:24\n   [2] top-level scope at /tmp/tmpuya6vgqg.jl:42\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuya6vgqg.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmpuya6vgqg.jl:43\n  Test threw exception\n  Expression: candidate(\"\
    ()()(()())()))()\") == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmpuya6vgqg.jl:24\n   [2] top-level scope at /tmp/tmpuya6vgqg.jl:43\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuya6vgqg.jl:31\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    4      8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuya6vgqg.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for c in brackets\n        if c == '('\n            open_count += 1\n   \
    \     elseif c == ')'\n            open_count -= 1\n        end\n        if open_count\
    \ < 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7vu8611w.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp7vu8611w.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7vu8611w.jl:31\ntest set: Test Failed at /tmp/tmp7vu8611w.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7vu8611w.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7vu8611w.jl:31\ntest set: Test Failed at /tmp/tmp7vu8611w.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7vu8611w.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7vu8611w.jl:31\ntest set: Test Failed at /tmp/tmp7vu8611w.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7vu8611w.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7vu8611w.jl:31\ntest set: Test Failed at /tmp/tmp7vu8611w.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7vu8611w.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7vu8611w.jl:31\ntest set: Test Failed at /tmp/tmp7vu8611w.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7vu8611w.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7vu8611w.jl:31\ntest set: Test Failed at /tmp/tmp7vu8611w.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp7vu8611w.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7vu8611w.jl:31\ntest set: Test Failed at /tmp/tmp7vu8611w.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp7vu8611w.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7vu8611w.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7vu8611w.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in 1:length(brackets)\n        if brackets[i] == '('\n            count +=\
    \ 1\n        elseif brackets[i] == ')'\n            count -= 1\n        end\n\
    \        if count < 0\n            return false\n        end\n    end\n    return\
    \ count == 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    # YOUR CODE HERE\n\
    \    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\
    \t@test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t\
    @test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\"\
    ) == true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5p27_jvc.jl:22\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp5p27_jvc.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5p27_jvc.jl:21\ntest set: Test Failed at /tmp/tmp5p27_jvc.jl:23\n\
    \  Expression: candidate(\"(()())\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5p27_jvc.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5p27_jvc.jl:21\ntest set: Test Failed at /tmp/tmp5p27_jvc.jl:24\n\
    \  Expression: candidate(\"()()(()())()\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5p27_jvc.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5p27_jvc.jl:21\ntest set: Test Failed at /tmp/tmp5p27_jvc.jl:25\n\
    \  Expression: candidate(\"()()((()()())())(()()(()))\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmp5p27_jvc.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5p27_jvc.jl:21\nTest Summary: | Pass  Fail  Total\n\
    test set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5p27_jvc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplmunqajj.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplmunqajj.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmunqajj.jl:31\ntest set: Test Failed at /tmp/tmplmunqajj.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplmunqajj.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmunqajj.jl:31\ntest set: Test Failed at /tmp/tmplmunqajj.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplmunqajj.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmunqajj.jl:31\ntest set: Test Failed at /tmp/tmplmunqajj.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplmunqajj.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmunqajj.jl:31\ntest set: Test Failed at /tmp/tmplmunqajj.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplmunqajj.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmunqajj.jl:31\ntest set: Test Failed at /tmp/tmplmunqajj.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplmunqajj.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmunqajj.jl:31\ntest set: Test Failed at /tmp/tmplmunqajj.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmplmunqajj.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmunqajj.jl:31\ntest set: Test Failed at /tmp/tmplmunqajj.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmplmunqajj.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplmunqajj.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplmunqajj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    open_brackets += 1\n        elseif brackets[i] == ')'\n            open_brackets\
    \ -= 1\n        end\n        if open_brackets < 0\n            return false\n\
    \        end\n    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    \"\n        return true\n    elseif brackets[1] == \")\"\n        return false\n\
    \    elseif brackets[end] == \"(\"\n        return false\n    else\n        return\
    \ correct_bracketing(brackets[2:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\
    \t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\") ==\
    \ true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwv8ja1ec.jl:33\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpwv8ja1ec.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwv8ja1ec.jl:28\ntest set: Test Failed at /tmp/tmpwv8ja1ec.jl:34\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwv8ja1ec.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwv8ja1ec.jl:28\ntest set: Test Failed at /tmp/tmpwv8ja1ec.jl:35\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwv8ja1ec.jl:35\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwv8ja1ec.jl:28\ntest set: Test Failed at /tmp/tmpwv8ja1ec.jl:36\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwv8ja1ec.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwv8ja1ec.jl:28\ntest set: Test Failed at /tmp/tmpwv8ja1ec.jl:37\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwv8ja1ec.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwv8ja1ec.jl:28\ntest set: Test Failed at /tmp/tmpwv8ja1ec.jl:38\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwv8ja1ec.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwv8ja1ec.jl:28\ntest set: Test Failed at /tmp/tmpwv8ja1ec.jl:39\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpwv8ja1ec.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwv8ja1ec.jl:28\ntest set: Test Failed at /tmp/tmpwv8ja1ec.jl:40\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpwv8ja1ec.jl:40\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwv8ja1ec.jl:28\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwv8ja1ec.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsqtdj7_5.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpsqtdj7_5.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsqtdj7_5.jl:31\ntest set: Test Failed at /tmp/tmpsqtdj7_5.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsqtdj7_5.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsqtdj7_5.jl:31\ntest set: Test Failed at /tmp/tmpsqtdj7_5.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsqtdj7_5.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsqtdj7_5.jl:31\ntest set: Test Failed at /tmp/tmpsqtdj7_5.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsqtdj7_5.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsqtdj7_5.jl:31\ntest set: Test Failed at /tmp/tmpsqtdj7_5.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsqtdj7_5.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsqtdj7_5.jl:31\ntest set: Test Failed at /tmp/tmpsqtdj7_5.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsqtdj7_5.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsqtdj7_5.jl:31\ntest set: Test Failed at /tmp/tmpsqtdj7_5.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpsqtdj7_5.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsqtdj7_5.jl:31\ntest set: Test Failed at /tmp/tmpsqtdj7_5.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpsqtdj7_5.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsqtdj7_5.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsqtdj7_5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ c in brackets\n        if c == '('\n            count += 1\n        elseif c\
    \ == ')'\n            count -= 1\n        end\n        if count < 0\n        \
    \    return false\n        end\n    end\n    return count == 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpghyax2nb.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpghyax2nb.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpghyax2nb.jl:31\ntest set: Test Failed at /tmp/tmpghyax2nb.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpghyax2nb.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpghyax2nb.jl:31\ntest set: Test Failed at /tmp/tmpghyax2nb.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpghyax2nb.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpghyax2nb.jl:31\ntest set: Test Failed at /tmp/tmpghyax2nb.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpghyax2nb.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpghyax2nb.jl:31\ntest set: Test Failed at /tmp/tmpghyax2nb.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpghyax2nb.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpghyax2nb.jl:31\ntest set: Test Failed at /tmp/tmpghyax2nb.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpghyax2nb.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpghyax2nb.jl:31\ntest set: Test Failed at /tmp/tmpghyax2nb.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpghyax2nb.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpghyax2nb.jl:31\ntest set: Test Failed at /tmp/tmpghyax2nb.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpghyax2nb.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpghyax2nb.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpghyax2nb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    stack = []\n   \
    \ for bracket in brackets\n        if bracket == '('\n            push!(stack,\
    \ bracket)\n        elseif bracket == ')'\n            if isempty(stack)\n   \
    \             return false\n            else\n                pop!(stack)\n  \
    \          end\n        end\n    end\n    return isempty(stack)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    n = 0\n    for i\
    \ in brackets\n        if i == '('\n            n += 1\n        elseif i == ')'\n\
    \            n -= 1\n        end\n        if n < 0\n            return false\n\
    \        end\n    end\n    return n == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2l8xw_w5.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp2l8xw_w5.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2l8xw_w5.jl:31\ntest set: Test Failed at /tmp/tmp2l8xw_w5.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2l8xw_w5.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2l8xw_w5.jl:31\ntest set: Test Failed at /tmp/tmp2l8xw_w5.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2l8xw_w5.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2l8xw_w5.jl:31\ntest set: Test Failed at /tmp/tmp2l8xw_w5.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2l8xw_w5.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2l8xw_w5.jl:31\ntest set: Test Failed at /tmp/tmp2l8xw_w5.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2l8xw_w5.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2l8xw_w5.jl:31\ntest set: Test Failed at /tmp/tmp2l8xw_w5.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2l8xw_w5.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2l8xw_w5.jl:31\ntest set: Test Failed at /tmp/tmp2l8xw_w5.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp2l8xw_w5.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2l8xw_w5.jl:31\ntest set: Test Failed at /tmp/tmp2l8xw_w5.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp2l8xw_w5.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2l8xw_w5.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2l8xw_w5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgxrsxi51.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgxrsxi51.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgxrsxi51.jl:31\ntest set: Test Failed at /tmp/tmpgxrsxi51.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgxrsxi51.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgxrsxi51.jl:31\ntest set: Test Failed at /tmp/tmpgxrsxi51.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgxrsxi51.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgxrsxi51.jl:31\ntest set: Test Failed at /tmp/tmpgxrsxi51.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgxrsxi51.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgxrsxi51.jl:31\ntest set: Test Failed at /tmp/tmpgxrsxi51.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgxrsxi51.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgxrsxi51.jl:31\ntest set: Test Failed at /tmp/tmpgxrsxi51.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgxrsxi51.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgxrsxi51.jl:31\ntest set: Test Failed at /tmp/tmpgxrsxi51.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpgxrsxi51.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgxrsxi51.jl:31\ntest set: Test Failed at /tmp/tmpgxrsxi51.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpgxrsxi51.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgxrsxi51.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgxrsxi51.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for i in brackets\n        if i == \"(\"\n            open_brackets +=\
    \ 1\n        elseif i == \")\"\n            open_brackets -= 1\n        end\n\
    \        if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphgyax3qn.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphgyax3qn.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphgyax3qn.jl:31\ntest set: Test Failed at /tmp/tmphgyax3qn.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphgyax3qn.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphgyax3qn.jl:31\ntest set: Test Failed at /tmp/tmphgyax3qn.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphgyax3qn.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphgyax3qn.jl:31\ntest set: Test Failed at /tmp/tmphgyax3qn.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphgyax3qn.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphgyax3qn.jl:31\ntest set: Test Failed at /tmp/tmphgyax3qn.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphgyax3qn.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphgyax3qn.jl:31\ntest set: Test Failed at /tmp/tmphgyax3qn.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphgyax3qn.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphgyax3qn.jl:31\ntest set: Test Failed at /tmp/tmphgyax3qn.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmphgyax3qn.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphgyax3qn.jl:31\ntest set: Test Failed at /tmp/tmphgyax3qn.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmphgyax3qn.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphgyax3qn.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphgyax3qn.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if length(brackets)\
    \ == 0\n        return true\n    elseif brackets[1] == '('\n        return correct_bracketing(brackets[2:end])\n\
    \    elseif brackets[1] == ')'\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm10qk3on.jl:27\n  Expression: candidate(\"\
    ()\") == true\n   Evaluated: false == true\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpm10qk3on.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm10qk3on.jl:26\ntest set: Test Failed at /tmp/tmpm10qk3on.jl:28\n\
    \  Expression: candidate(\"(()())\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm10qk3on.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm10qk3on.jl:26\ntest set: Test Failed at /tmp/tmpm10qk3on.jl:29\n\
    \  Expression: candidate(\"()()(()())()\") == true\n   Evaluated: false == true\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm10qk3on.jl:29\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm10qk3on.jl:26\ntest set: Test Failed at /tmp/tmpm10qk3on.jl:30\n\
    \  Expression: candidate(\"()()((()()())())(()()(()))\") == true\n   Evaluated:\
    \ false == true\nStacktrace:\n [1] top-level scope at /tmp/tmpm10qk3on.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm10qk3on.jl:26\ntest set: Test Failed at /tmp/tmpm10qk3on.jl:33\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm10qk3on.jl:33\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm10qk3on.jl:26\ntest set: Test Failed at /tmp/tmpm10qk3on.jl:34\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm10qk3on.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm10qk3on.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    6     6     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm10qk3on.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    bracket_count =\
    \ 0\n    for i in 1:length(brackets)\n        if brackets[i] == '('\n        \
    \    bracket_count += 1\n        elseif brackets[i] == ')'\n            bracket_count\
    \ -= 1\n        end\n        if bracket_count < 0\n            return false\n\
    \        end\n    end\n    if bracket_count == 0\n        return true\n    else\n\
    \        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnteutyrn.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpnteutyrn.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnteutyrn.jl:31\ntest set: Test Failed at /tmp/tmpnteutyrn.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnteutyrn.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnteutyrn.jl:31\ntest set: Test Failed at /tmp/tmpnteutyrn.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnteutyrn.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnteutyrn.jl:31\ntest set: Test Failed at /tmp/tmpnteutyrn.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnteutyrn.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnteutyrn.jl:31\ntest set: Test Failed at /tmp/tmpnteutyrn.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnteutyrn.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnteutyrn.jl:31\ntest set: Test Failed at /tmp/tmpnteutyrn.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnteutyrn.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnteutyrn.jl:31\ntest set: Test Failed at /tmp/tmpnteutyrn.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpnteutyrn.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnteutyrn.jl:31\ntest set: Test Failed at /tmp/tmpnteutyrn.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpnteutyrn.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnteutyrn.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnteutyrn.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for b in brackets\n        if b == '('\n            open_brackets +=\
    \ 1\n        elseif b == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ bracket in brackets\n        if bracket == '('\n            count += 1\n   \
    \     elseif bracket == ')'\n            count -= 1\n        end\n        if count\
    \ < 0\n            return false\n        end\n    end\n    return count == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpols6d0_q.jl:40\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpols6d0_q.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpols6d0_q.jl:35\ntest set: Test Failed at /tmp/tmpols6d0_q.jl:41\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpols6d0_q.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpols6d0_q.jl:35\ntest set: Test Failed at /tmp/tmpols6d0_q.jl:42\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpols6d0_q.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpols6d0_q.jl:35\ntest set: Test Failed at /tmp/tmpols6d0_q.jl:43\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpols6d0_q.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpols6d0_q.jl:35\ntest set: Test Failed at /tmp/tmpols6d0_q.jl:44\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpols6d0_q.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpols6d0_q.jl:35\ntest set: Test Failed at /tmp/tmpols6d0_q.jl:45\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpols6d0_q.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpols6d0_q.jl:35\ntest set: Test Failed at /tmp/tmpols6d0_q.jl:46\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpols6d0_q.jl:46\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpols6d0_q.jl:35\ntest set: Test Failed at /tmp/tmpols6d0_q.jl:47\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpols6d0_q.jl:47\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpols6d0_q.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpols6d0_q.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    (\"\n        return false\n    end\n    if brackets == \"()\"\n        return\
    \ true\n    end\n    if brackets == \"(()())\"\n        return true\n    end\n\
    \    if brackets == \")(()\"\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3jfyx0fo.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"()()(()())()\") == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp3jfyx0fo.jl:24\n   [2] top-level scope at /tmp/tmp3jfyx0fo.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3jfyx0fo.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp3jfyx0fo.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    ()()((()()())())(()()(()))\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp3jfyx0fo.jl:24\n   [2] top-level scope at /tmp/tmp3jfyx0fo.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3jfyx0fo.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp3jfyx0fo.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    ((()())))\") == false\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp3jfyx0fo.jl:24\n   [2] top-level scope at /tmp/tmp3jfyx0fo.jl:36\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3jfyx0fo.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp3jfyx0fo.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    ((((\") == false\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp3jfyx0fo.jl:24\n   [2] top-level scope at /tmp/tmp3jfyx0fo.jl:39\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3jfyx0fo.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp3jfyx0fo.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    )\") == false\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp3jfyx0fo.jl:24\n   [2] top-level scope at /tmp/tmp3jfyx0fo.jl:40\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3jfyx0fo.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp3jfyx0fo.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    (()\") == false\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp3jfyx0fo.jl:24\n   [2] top-level scope at /tmp/tmp3jfyx0fo.jl:41\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3jfyx0fo.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp3jfyx0fo.jl:42\n  Test threw exception\n  Expression: candidate(\"\
    ()()(()())())(()\") == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp3jfyx0fo.jl:24\n   [2] top-level scope at /tmp/tmp3jfyx0fo.jl:42\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3jfyx0fo.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp3jfyx0fo.jl:43\n  Test threw exception\n  Expression: candidate(\"\
    ()()(()())()))()\") == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp3jfyx0fo.jl:24\n   [2] top-level scope at /tmp/tmp3jfyx0fo.jl:43\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3jfyx0fo.jl:31\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    4      8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3jfyx0fo.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpja_h4u1v.jl:40\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpja_h4u1v.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpja_h4u1v.jl:35\ntest set: Test Failed at /tmp/tmpja_h4u1v.jl:41\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpja_h4u1v.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpja_h4u1v.jl:35\ntest set: Test Failed at /tmp/tmpja_h4u1v.jl:42\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpja_h4u1v.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpja_h4u1v.jl:35\ntest set: Test Failed at /tmp/tmpja_h4u1v.jl:43\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpja_h4u1v.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpja_h4u1v.jl:35\ntest set: Test Failed at /tmp/tmpja_h4u1v.jl:44\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpja_h4u1v.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpja_h4u1v.jl:35\ntest set: Test Failed at /tmp/tmpja_h4u1v.jl:45\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpja_h4u1v.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpja_h4u1v.jl:35\ntest set: Test Failed at /tmp/tmpja_h4u1v.jl:46\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpja_h4u1v.jl:46\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpja_h4u1v.jl:35\ntest set: Test Failed at /tmp/tmpja_h4u1v.jl:47\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpja_h4u1v.jl:47\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpja_h4u1v.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpja_h4u1v.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd5onwzbh.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpd5onwzbh.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd5onwzbh.jl:31\ntest set: Test Failed at /tmp/tmpd5onwzbh.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd5onwzbh.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd5onwzbh.jl:31\ntest set: Test Failed at /tmp/tmpd5onwzbh.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd5onwzbh.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd5onwzbh.jl:31\ntest set: Test Failed at /tmp/tmpd5onwzbh.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd5onwzbh.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd5onwzbh.jl:31\ntest set: Test Failed at /tmp/tmpd5onwzbh.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd5onwzbh.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd5onwzbh.jl:31\ntest set: Test Failed at /tmp/tmpd5onwzbh.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd5onwzbh.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd5onwzbh.jl:31\ntest set: Test Failed at /tmp/tmpd5onwzbh.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpd5onwzbh.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd5onwzbh.jl:31\ntest set: Test Failed at /tmp/tmpd5onwzbh.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmpd5onwzbh.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd5onwzbh.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd5onwzbh.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_count = 0\n\
    \    for c in brackets\n        if c == '('\n            open_count += 1\n   \
    \     elseif c == ')'\n            open_count -= 1\n        end\n        if open_count\
    \ < 0\n            return false\n        end\n    end\n    return open_count ==\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t\
    @test(candidate(\"()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"\
    ()()(()())()\") == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") ==\
    \ true)\n\t@test(candidate(\"((()())))\") == false)\n\t@test(candidate(\")(()\"\
    ) == false)\n\t@test(candidate(\"(\") == false)\n\t@test(candidate(\"((((\") ==\
    \ false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"(()\") == false)\n\
    \t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"()()(()())()))()\"\
    ) == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    return count == 0\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2lmmkzg6.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp2lmmkzg6.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2lmmkzg6.jl:31\ntest set: Test Failed at /tmp/tmp2lmmkzg6.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2lmmkzg6.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2lmmkzg6.jl:31\ntest set: Test Failed at /tmp/tmp2lmmkzg6.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2lmmkzg6.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2lmmkzg6.jl:31\ntest set: Test Failed at /tmp/tmp2lmmkzg6.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2lmmkzg6.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2lmmkzg6.jl:31\ntest set: Test Failed at /tmp/tmp2lmmkzg6.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2lmmkzg6.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2lmmkzg6.jl:31\ntest set: Test Failed at /tmp/tmp2lmmkzg6.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2lmmkzg6.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2lmmkzg6.jl:31\ntest set: Test Failed at /tmp/tmp2lmmkzg6.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp2lmmkzg6.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2lmmkzg6.jl:31\ntest set: Test Failed at /tmp/tmp2lmmkzg6.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp2lmmkzg6.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2lmmkzg6.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2lmmkzg6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    counter = 0\n  \
    \  for i in brackets\n        if i == \"(\"\n            counter += 1\n      \
    \  elseif i == \")\"\n            counter -= 1\n        end\n        if counter\
    \ < 0\n            return false\n        end\n    end\n    return counter == 0\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"\
    ()\") == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppzr49b47.jl:36\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmppzr49b47.jl:36\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzr49b47.jl:31\ntest set: Test Failed at /tmp/tmppzr49b47.jl:37\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppzr49b47.jl:37\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzr49b47.jl:31\ntest set: Test Failed at /tmp/tmppzr49b47.jl:38\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppzr49b47.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzr49b47.jl:31\ntest set: Test Failed at /tmp/tmppzr49b47.jl:39\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppzr49b47.jl:39\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzr49b47.jl:31\ntest set: Test Failed at /tmp/tmppzr49b47.jl:40\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppzr49b47.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzr49b47.jl:31\ntest set: Test Failed at /tmp/tmppzr49b47.jl:41\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppzr49b47.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzr49b47.jl:31\ntest set: Test Failed at /tmp/tmppzr49b47.jl:42\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmppzr49b47.jl:42\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzr49b47.jl:31\ntest set: Test Failed at /tmp/tmppzr49b47.jl:43\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmppzr49b47.jl:43\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppzr49b47.jl:31\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppzr49b47.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    if brackets == \"\
    (\"\n        return false\n    end\n    if brackets == \"()\"\n        return\
    \ true\n    end\n    if brackets == \"(()())\"\n        return true\n    end\n\
    \    if brackets == \")(()\"\n        return false\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = correct_bracketing;\n\t@test(candidate(\"()\"\
    ) == true)\n\t@test(candidate(\"(()())\") == true)\n\t@test(candidate(\"()()(()())()\"\
    ) == true)\n\t@test(candidate(\"()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"\
    ((()())))\") == false)\n\t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"\
    (\") == false)\n\t@test(candidate(\"((((\") == false)\n\t@test(candidate(\")\"\
    ) == false)\n\t@test(candidate(\"(()\") == false)\n\t@test(candidate(\"()()(()())())(()\"\
    ) == false)\n\t@test(candidate(\"()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6u_xad3w.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"()()(()())()\") == true\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr)\
    \ where T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp6u_xad3w.jl:24\n   [2] top-level scope at /tmp/tmp6u_xad3w.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6u_xad3w.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp6u_xad3w.jl:35\n  Test threw exception\n  Expression: candidate(\"\
    ()()((()()())())(()()(()))\") == true\n  MethodError: Cannot `convert` an object\
    \ of type Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp6u_xad3w.jl:24\n   [2] top-level scope at /tmp/tmp6u_xad3w.jl:35\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6u_xad3w.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp6u_xad3w.jl:36\n  Test threw exception\n  Expression: candidate(\"\
    ((()())))\") == false\n  MethodError: Cannot `convert` an object of type Nothing\
    \ to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp6u_xad3w.jl:24\n   [2] top-level scope at /tmp/tmp6u_xad3w.jl:36\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6u_xad3w.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp6u_xad3w.jl:39\n  Test threw exception\n  Expression: candidate(\"\
    ((((\") == false\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp6u_xad3w.jl:24\n   [2] top-level scope at /tmp/tmp6u_xad3w.jl:39\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6u_xad3w.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp6u_xad3w.jl:40\n  Test threw exception\n  Expression: candidate(\"\
    )\") == false\n  MethodError: Cannot `convert` an object of type Nothing to an\
    \ object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp6u_xad3w.jl:24\n   [2] top-level scope at /tmp/tmp6u_xad3w.jl:40\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6u_xad3w.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp6u_xad3w.jl:41\n  Test threw exception\n  Expression: candidate(\"\
    (()\") == false\n  MethodError: Cannot `convert` an object of type Nothing to\
    \ an object of type Bool\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where T<:Integer\
    \ at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp6u_xad3w.jl:24\n   [2] top-level scope at /tmp/tmp6u_xad3w.jl:41\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6u_xad3w.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp6u_xad3w.jl:42\n  Test threw exception\n  Expression: candidate(\"\
    ()()(()())())(()\") == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp6u_xad3w.jl:24\n   [2] top-level scope at /tmp/tmp6u_xad3w.jl:42\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6u_xad3w.jl:31\n  \ntest set: Error During\
    \ Test at /tmp/tmp6u_xad3w.jl:43\n  Test threw exception\n  Expression: candidate(\"\
    ()()(()())()))()\") == false\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Ptr) where\
    \ T<:Integer at pointer.jl:23\n    ...\n  Stacktrace:\n   [1] correct_bracketing(::String)\
    \ at /tmp/tmp6u_xad3w.jl:24\n   [2] top-level scope at /tmp/tmp6u_xad3w.jl:43\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp6u_xad3w.jl:31\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    4      8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6u_xad3w.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    count = 0\n    for\
    \ i in brackets\n        if i == \"(\"\n            count += 1\n        elseif\
    \ i == \")\"\n            count -= 1\n        end\n        if count < 0\n    \
    \        return false\n        end\n    end\n    if count == 0\n        return\
    \ true\n    else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8kfat_ds.jl:40\n  Expression: candidate(\"\
    ((()())))\") == false\n   Evaluated: true == false\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8kfat_ds.jl:40\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kfat_ds.jl:35\ntest set: Test Failed at /tmp/tmp8kfat_ds.jl:41\n\
    \  Expression: candidate(\")(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8kfat_ds.jl:41\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kfat_ds.jl:35\ntest set: Test Failed at /tmp/tmp8kfat_ds.jl:42\n\
    \  Expression: candidate(\"(\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8kfat_ds.jl:42\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kfat_ds.jl:35\ntest set: Test Failed at /tmp/tmp8kfat_ds.jl:43\n\
    \  Expression: candidate(\"((((\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8kfat_ds.jl:43\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kfat_ds.jl:35\ntest set: Test Failed at /tmp/tmp8kfat_ds.jl:44\n\
    \  Expression: candidate(\")\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8kfat_ds.jl:44\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kfat_ds.jl:35\ntest set: Test Failed at /tmp/tmp8kfat_ds.jl:45\n\
    \  Expression: candidate(\"(()\") == false\n   Evaluated: true == false\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8kfat_ds.jl:45\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kfat_ds.jl:35\ntest set: Test Failed at /tmp/tmp8kfat_ds.jl:46\n\
    \  Expression: candidate(\"()()(()())())(()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp8kfat_ds.jl:46\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kfat_ds.jl:35\ntest set: Test Failed at /tmp/tmp8kfat_ds.jl:47\n\
    \  Expression: candidate(\"()()(()())()))()\") == false\n   Evaluated: true ==\
    \ false\nStacktrace:\n [1] top-level scope at /tmp/tmp8kfat_ds.jl:47\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kfat_ds.jl:35\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     8     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 8 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8kfat_ds.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for c in brackets\n        if c == '('\n            open_brackets +=\
    \ 1\n        elseif c == ')'\n            open_brackets -= 1\n        end\n  \
    \      if open_brackets < 0\n            return false\n        end\n    end\n\
    \    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\" brackets is a string of \"(\" and \")\".\n    return True if every\
    \ opening bracket has a corresponding closing bracket.\n\n    >>> correct_bracketing(\"\
    (\")\n    False\n    >>> correct_bracketing(\"()\")\n    True\n    >>> correct_bracketing(\"\
    (()())\")\n    True\n    >>> correct_bracketing(\")(()\")\n    False\n    \"\"\
    \"\nfunction correct_bracketing(brackets::String)::Bool \n    open_brackets =\
    \ 0\n    for bracket in brackets\n        if bracket == '('\n            open_brackets\
    \ += 1\n        elseif bracket == ')'\n            open_brackets -= 1\n      \
    \  end\n        if open_brackets < 0\n            return false\n        end\n\
    \    end\n    return open_brackets == 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = correct_bracketing;\n\t@test(candidate(\"()\") == true)\n\t@test(candidate(\"\
    (()())\") == true)\n\t@test(candidate(\"()()(()())()\") == true)\n\t@test(candidate(\"\
    ()()((()()())())(()()(()))\") == true)\n\t@test(candidate(\"((()())))\") == false)\n\
    \t@test(candidate(\")(()\") == false)\n\t@test(candidate(\"(\") == false)\n\t\
    @test(candidate(\"((((\") == false)\n\t@test(candidate(\")\") == false)\n\t@test(candidate(\"\
    (()\") == false)\n\t@test(candidate(\"()()(()())())(()\") == false)\n\t@test(candidate(\"\
    ()()(()())()))()\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
