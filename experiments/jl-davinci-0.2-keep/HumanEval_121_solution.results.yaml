name: HumanEval_121_solution
language: julia
results:
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy7hosfcr.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy7hosfcr.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7hosfcr.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy7hosfcr.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7hosfcr.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7hosfcr.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy7hosfcr.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7hosfcr.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7hosfcr.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy7hosfcr.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7hosfcr.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7hosfcr.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy7hosfcr.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7hosfcr.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy7hosfcr.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy7hosfcr.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy7hosfcr.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy7hosfcr.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmy9pw_36.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmy9pw_36.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmy9pw_36.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmy9pw_36.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmy9pw_36.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmy9pw_36.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmy9pw_36.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmy9pw_36.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmy9pw_36.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmy9pw_36.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmy9pw_36.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmy9pw_36.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmy9pw_36.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmy9pw_36.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmy9pw_36.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmy9pw_36.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmy9pw_36.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmy9pw_36.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph3953y3s.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmph3953y3s.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3953y3s.jl:16\ntest set: Test\
    \ Failed at /tmp/tmph3953y3s.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3953y3s.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3953y3s.jl:16\ntest set: Test\
    \ Failed at /tmp/tmph3953y3s.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3953y3s.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3953y3s.jl:16\ntest set: Test\
    \ Failed at /tmp/tmph3953y3s.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3953y3s.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3953y3s.jl:16\ntest set: Test\
    \ Failed at /tmp/tmph3953y3s.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3953y3s.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph3953y3s.jl:16\ntest set: Test\
    \ Failed at /tmp/tmph3953y3s.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph3953y3s.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph3953y3s.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2_ce_c7m.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2_ce_c7m.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_ce_c7m.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2_ce_c7m.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2_ce_c7m.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_ce_c7m.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2_ce_c7m.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2_ce_c7m.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_ce_c7m.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2_ce_c7m.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2_ce_c7m.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_ce_c7m.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2_ce_c7m.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2_ce_c7m.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2_ce_c7m.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2_ce_c7m.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2_ce_c7m.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_ce_c7m.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 2:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppxtg6gyd.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppxtg6gyd.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppxtg6gyd.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppxtg6gyd.jl:24\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppxtg6gyd.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppxtg6gyd.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppxtg6gyd.jl:25\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppxtg6gyd.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppxtg6gyd.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppxtg6gyd.jl:26\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppxtg6gyd.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppxtg6gyd.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppxtg6gyd.jl:28\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppxtg6gyd.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppxtg6gyd.jl:22\ntest set: Test\
    \ Failed at /tmp/tmppxtg6gyd.jl:29\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppxtg6gyd.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppxtg6gyd.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptmz5s3mq.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptmz5s3mq.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmz5s3mq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptmz5s3mq.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmz5s3mq.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmz5s3mq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptmz5s3mq.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmz5s3mq.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmz5s3mq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptmz5s3mq.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmz5s3mq.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmz5s3mq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptmz5s3mq.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmz5s3mq.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmz5s3mq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptmz5s3mq.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmz5s3mq.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptmz5s3mq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz61302j7.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz61302j7.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz61302j7.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpz61302j7.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz61302j7.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz61302j7.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpz61302j7.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz61302j7.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz61302j7.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpz61302j7.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz61302j7.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz61302j7.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpz61302j7.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz61302j7.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz61302j7.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpz61302j7.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpz61302j7.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz61302j7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4eg6hnei.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4eg6hnei.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4eg6hnei.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4eg6hnei.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4eg6hnei.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4eg6hnei.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4eg6hnei.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4eg6hnei.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4eg6hnei.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4eg6hnei.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4eg6hnei.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4eg6hnei.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4eg6hnei.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4eg6hnei.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4eg6hnei.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4eg6hnei.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4eg6hnei.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4eg6hnei.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx96lveiw.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx96lveiw.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx96lveiw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx96lveiw.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx96lveiw.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx96lveiw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx96lveiw.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx96lveiw.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx96lveiw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx96lveiw.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx96lveiw.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx96lveiw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx96lveiw.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx96lveiw.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx96lveiw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx96lveiw.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx96lveiw.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx96lveiw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp45d_z_wk.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp45d_z_wk.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45d_z_wk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp45d_z_wk.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp45d_z_wk.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45d_z_wk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp45d_z_wk.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp45d_z_wk.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45d_z_wk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp45d_z_wk.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp45d_z_wk.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45d_z_wk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp45d_z_wk.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp45d_z_wk.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45d_z_wk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp45d_z_wk.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp45d_z_wk.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp45d_z_wk.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7klaj6to.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7klaj6to.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7klaj6to.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp7klaj6to.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7klaj6to.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7klaj6to.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp7klaj6to.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7klaj6to.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7klaj6to.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp7klaj6to.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7klaj6to.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7klaj6to.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp7klaj6to.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7klaj6to.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7klaj6to.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp7klaj6to.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7klaj6to.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7klaj6to.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp01y9_y3q.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp01y9_y3q.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01y9_y3q.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp01y9_y3q.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp01y9_y3q.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01y9_y3q.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp01y9_y3q.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp01y9_y3q.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01y9_y3q.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp01y9_y3q.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp01y9_y3q.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01y9_y3q.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp01y9_y3q.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp01y9_y3q.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp01y9_y3q.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp01y9_y3q.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp01y9_y3q.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp01y9_y3q.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_fafpl0o.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_fafpl0o.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fafpl0o.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_fafpl0o.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_fafpl0o.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fafpl0o.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_fafpl0o.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_fafpl0o.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fafpl0o.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_fafpl0o.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_fafpl0o.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fafpl0o.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_fafpl0o.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_fafpl0o.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fafpl0o.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_fafpl0o.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_fafpl0o.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_fafpl0o.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsh7x8akm.jl:17\\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\\n   Evaluated: 1 == 12\\nStacktrace:\\n [1] macro expansion\\\
    n   @ /tmp/tmpsh7x8akm.jl:17 [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsh7x8akm.jl:16\\ntest set: Test\
    \ Failed at /tmp/tmpsh7x8akm.jl:18\\n  Expression: candidate([3, 3, 3, 3, 3])\
    \ == 9\\n   Evaluated: 6 == 9\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpsh7x8akm.jl:18\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsh7x8akm.jl:16\\ntest set: Test\
    \ Failed at /tmp/tmpsh7x8akm.jl:19\\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\\n   Evaluated: 334 == 0\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpsh7x8akm.jl:19\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsh7x8akm.jl:16\\ntest set: Test\
    \ Failed at /tmp/tmpsh7x8akm.jl:20\\n  Expression: candidate([5, 9]) == 5\\n \
    \  Evaluated: 9 == 5\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpsh7x8akm.jl:20\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsh7x8akm.jl:16\\ntest set: Test\
    \ Failed at /tmp/tmpsh7x8akm.jl:22\\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\\n   Evaluated: 13 == 23\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpsh7x8akm.jl:22\
    \ [inlined]\\n [2] macro expansion\\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpsh7x8akm.jl:16\\ntest set: Test\
    \ Failed at /tmp/tmpsh7x8akm.jl:23\\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\\n   Evaluated: 22 == 3\\nStacktrace:\\n [1] macro expansion\\n   @ /tmp/tmpsh7x8akm.jl:23\
    \ [in"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpte6miyc8.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpte6miyc8.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpte6miyc8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpte6miyc8.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpte6miyc8.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpte6miyc8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpte6miyc8.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpte6miyc8.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpte6miyc8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpte6miyc8.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpte6miyc8.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpte6miyc8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpte6miyc8.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpte6miyc8.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpte6miyc8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpte6miyc8.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpte6miyc8.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpte6miyc8.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptqr2wwr6.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptqr2wwr6.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptqr2wwr6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptqr2wwr6.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptqr2wwr6.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptqr2wwr6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptqr2wwr6.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptqr2wwr6.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptqr2wwr6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptqr2wwr6.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptqr2wwr6.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptqr2wwr6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptqr2wwr6.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptqr2wwr6.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptqr2wwr6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptqr2wwr6.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptqr2wwr6.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptqr2wwr6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for (i, x) in enumerate(lst)\n        if i % 2 == 0 && x % 2\
    \ != 0\n            sum += x\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpof6ezebq.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpof6ezebq.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpof6ezebq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpof6ezebq.jl:24\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpof6ezebq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpof6ezebq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpof6ezebq.jl:25\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpof6ezebq.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpof6ezebq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpof6ezebq.jl:26\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpof6ezebq.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpof6ezebq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpof6ezebq.jl:28\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpof6ezebq.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpof6ezebq.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpof6ezebq.jl:29\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpof6ezebq.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpof6ezebq.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1dkc2xi3.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1dkc2xi3.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dkc2xi3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1dkc2xi3.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1dkc2xi3.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dkc2xi3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1dkc2xi3.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1dkc2xi3.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dkc2xi3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1dkc2xi3.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1dkc2xi3.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dkc2xi3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1dkc2xi3.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1dkc2xi3.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dkc2xi3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1dkc2xi3.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1dkc2xi3.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1dkc2xi3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphyc5pd6h.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphyc5pd6h.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphyc5pd6h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphyc5pd6h.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphyc5pd6h.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphyc5pd6h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphyc5pd6h.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphyc5pd6h.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphyc5pd6h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphyc5pd6h.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphyc5pd6h.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphyc5pd6h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphyc5pd6h.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphyc5pd6h.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphyc5pd6h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphyc5pd6h.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphyc5pd6h.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphyc5pd6h.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for (i,v) in enumerate(lst)\n        if (i % 2 == 0) && (v %\
    \ 2 != 0)\n            sum += v\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprhaeko9a.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprhaeko9a.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhaeko9a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprhaeko9a.jl:24\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhaeko9a.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhaeko9a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprhaeko9a.jl:25\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhaeko9a.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhaeko9a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprhaeko9a.jl:26\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhaeko9a.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhaeko9a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprhaeko9a.jl:28\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhaeko9a.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprhaeko9a.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprhaeko9a.jl:29\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprhaeko9a.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprhaeko9a.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_b_nqlqw.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_b_nqlqw.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_b_nqlqw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_b_nqlqw.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_b_nqlqw.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_b_nqlqw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_b_nqlqw.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_b_nqlqw.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_b_nqlqw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_b_nqlqw.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_b_nqlqw.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_b_nqlqw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_b_nqlqw.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_b_nqlqw.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_b_nqlqw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_b_nqlqw.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_b_nqlqw.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_b_nqlqw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpog4w1q3j.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpog4w1q3j.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpog4w1q3j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpog4w1q3j.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpog4w1q3j.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpog4w1q3j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpog4w1q3j.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpog4w1q3j.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpog4w1q3j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpog4w1q3j.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpog4w1q3j.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpog4w1q3j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpog4w1q3j.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpog4w1q3j.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpog4w1q3j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpog4w1q3j.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpog4w1q3j.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpog4w1q3j.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt1_tkwhh.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt1_tkwhh.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt1_tkwhh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpt1_tkwhh.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt1_tkwhh.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt1_tkwhh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpt1_tkwhh.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt1_tkwhh.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt1_tkwhh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpt1_tkwhh.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt1_tkwhh.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt1_tkwhh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpt1_tkwhh.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt1_tkwhh.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt1_tkwhh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpt1_tkwhh.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt1_tkwhh.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt1_tkwhh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy2khxead.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy2khxead.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2khxead.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy2khxead.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy2khxead.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2khxead.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy2khxead.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy2khxead.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2khxead.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy2khxead.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy2khxead.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2khxead.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy2khxead.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy2khxead.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy2khxead.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy2khxead.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy2khxead.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy2khxead.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbcg3_wq6.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbcg3_wq6.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbcg3_wq6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpbcg3_wq6.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbcg3_wq6.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbcg3_wq6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpbcg3_wq6.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbcg3_wq6.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbcg3_wq6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpbcg3_wq6.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbcg3_wq6.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbcg3_wq6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpbcg3_wq6.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbcg3_wq6.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbcg3_wq6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpbcg3_wq6.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbcg3_wq6.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbcg3_wq6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpki5a3oj3.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpki5a3oj3.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpki5a3oj3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpki5a3oj3.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpki5a3oj3.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpki5a3oj3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpki5a3oj3.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpki5a3oj3.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpki5a3oj3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpki5a3oj3.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpki5a3oj3.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpki5a3oj3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpki5a3oj3.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpki5a3oj3.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpki5a3oj3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpki5a3oj3.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpki5a3oj3.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpki5a3oj3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 2:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprtvy0uv3.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprtvy0uv3.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprtvy0uv3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprtvy0uv3.jl:24\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprtvy0uv3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprtvy0uv3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprtvy0uv3.jl:25\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprtvy0uv3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprtvy0uv3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprtvy0uv3.jl:26\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprtvy0uv3.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprtvy0uv3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprtvy0uv3.jl:28\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprtvy0uv3.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprtvy0uv3.jl:22\ntest set: Test\
    \ Failed at /tmp/tmprtvy0uv3.jl:29\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprtvy0uv3.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprtvy0uv3.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsrxaqp0g.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsrxaqp0g.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsrxaqp0g.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsrxaqp0g.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsrxaqp0g.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsrxaqp0g.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsrxaqp0g.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsrxaqp0g.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsrxaqp0g.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsrxaqp0g.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsrxaqp0g.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsrxaqp0g.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsrxaqp0g.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsrxaqp0g.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsrxaqp0g.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsrxaqp0g.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsrxaqp0g.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsrxaqp0g.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprdxjyy01.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprdxjyy01.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprdxjyy01.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprdxjyy01.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprdxjyy01.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprdxjyy01.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprdxjyy01.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprdxjyy01.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprdxjyy01.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprdxjyy01.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprdxjyy01.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprdxjyy01.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprdxjyy01.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprdxjyy01.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprdxjyy01.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprdxjyy01.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprdxjyy01.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprdxjyy01.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_bfv2sa4.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_bfv2sa4.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_bfv2sa4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_bfv2sa4.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_bfv2sa4.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_bfv2sa4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_bfv2sa4.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_bfv2sa4.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_bfv2sa4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_bfv2sa4.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_bfv2sa4.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_bfv2sa4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_bfv2sa4.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_bfv2sa4.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_bfv2sa4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_bfv2sa4.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_bfv2sa4.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_bfv2sa4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx9vtrjbx.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx9vtrjbx.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx9vtrjbx.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx9vtrjbx.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx9vtrjbx.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx9vtrjbx.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx9vtrjbx.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx9vtrjbx.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx9vtrjbx.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx9vtrjbx.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx9vtrjbx.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx9vtrjbx.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx9vtrjbx.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx9vtrjbx.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx9vtrjbx.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx9vtrjbx.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx9vtrjbx.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx9vtrjbx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp950tmlq5.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp950tmlq5.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp950tmlq5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp950tmlq5.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp950tmlq5.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp950tmlq5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp950tmlq5.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp950tmlq5.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp950tmlq5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp950tmlq5.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp950tmlq5.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp950tmlq5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp950tmlq5.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp950tmlq5.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp950tmlq5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp950tmlq5.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp950tmlq5.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp950tmlq5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxqxwkyv3.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxqxwkyv3.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxqxwkyv3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxqxwkyv3.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxqxwkyv3.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxqxwkyv3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxqxwkyv3.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxqxwkyv3.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxqxwkyv3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxqxwkyv3.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxqxwkyv3.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxqxwkyv3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxqxwkyv3.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxqxwkyv3.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxqxwkyv3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxqxwkyv3.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxqxwkyv3.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxqxwkyv3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 2:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwh_8x4iu.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwh_8x4iu.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwh_8x4iu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwh_8x4iu.jl:24\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwh_8x4iu.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwh_8x4iu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwh_8x4iu.jl:25\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwh_8x4iu.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwh_8x4iu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwh_8x4iu.jl:26\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwh_8x4iu.jl:26 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwh_8x4iu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwh_8x4iu.jl:28\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwh_8x4iu.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwh_8x4iu.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpwh_8x4iu.jl:29\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwh_8x4iu.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwh_8x4iu.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkcw0pwhz.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkcw0pwhz.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcw0pwhz.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkcw0pwhz.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcw0pwhz.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcw0pwhz.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkcw0pwhz.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcw0pwhz.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcw0pwhz.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkcw0pwhz.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcw0pwhz.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcw0pwhz.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkcw0pwhz.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcw0pwhz.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkcw0pwhz.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkcw0pwhz.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkcw0pwhz.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkcw0pwhz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2f6lrq7e.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2f6lrq7e.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2f6lrq7e.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2f6lrq7e.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2f6lrq7e.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2f6lrq7e.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2f6lrq7e.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2f6lrq7e.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2f6lrq7e.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2f6lrq7e.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2f6lrq7e.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2f6lrq7e.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2f6lrq7e.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2f6lrq7e.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2f6lrq7e.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2f6lrq7e.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2f6lrq7e.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2f6lrq7e.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i = 1:2:length(lst)\n        if lst[i] % 2 == 1\n      \
    \      sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkkuwzxu4.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkkuwzxu4.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkkuwzxu4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkkuwzxu4.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkkuwzxu4.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkkuwzxu4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkkuwzxu4.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkkuwzxu4.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkkuwzxu4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkkuwzxu4.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkkuwzxu4.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkkuwzxu4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkkuwzxu4.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkkuwzxu4.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkkuwzxu4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkkuwzxu4.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkkuwzxu4.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkkuwzxu4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp73_w5jy8.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp73_w5jy8.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp73_w5jy8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp73_w5jy8.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp73_w5jy8.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp73_w5jy8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp73_w5jy8.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp73_w5jy8.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp73_w5jy8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp73_w5jy8.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp73_w5jy8.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp73_w5jy8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp73_w5jy8.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp73_w5jy8.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp73_w5jy8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp73_w5jy8.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp73_w5jy8.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp73_w5jy8.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgwx2k6az.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgwx2k6az.jl:17 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgwx2k6az.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpgwx2k6az.jl:18\n  Expression: candidate([3, 3, 3, 3, 3]) ==\
    \ 9\n   Evaluated: 6 == 9\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgwx2k6az.jl:18\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgwx2k6az.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpgwx2k6az.jl:19\n  Expression: candidate([30, 13, 24, 321])\
    \ == 0\n   Evaluated: 334 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgwx2k6az.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgwx2k6az.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpgwx2k6az.jl:20\n  Expression: candidate([5, 9]) == 5\n   Evaluated:\
    \ 9 == 5\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgwx2k6az.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgwx2k6az.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpgwx2k6az.jl:22\n  Expression: candidate([30, 13, 23, 32])\
    \ == 23\n   Evaluated: 13 == 23\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgwx2k6az.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgwx2k6az.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpgwx2k6az.jl:23\n  Expression: candidate([3, 13, 2, 9]) ==\
    \ 3\n   Evaluated: 22 == 3\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgwx2k6az.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgwx2k6az.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
