name: HumanEval_121_solution
language: julia
results:
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbmwn6bb5.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpbmwn6bb5.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbmwn6bb5.jl:16\ntest set: Test Failed at /tmp/tmpbmwn6bb5.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbmwn6bb5.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbmwn6bb5.jl:16\ntest set: Test Failed at /tmp/tmpbmwn6bb5.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbmwn6bb5.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbmwn6bb5.jl:16\ntest set: Test Failed at /tmp/tmpbmwn6bb5.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpbmwn6bb5.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbmwn6bb5.jl:16\ntest set: Test Failed at /tmp/tmpbmwn6bb5.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbmwn6bb5.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbmwn6bb5.jl:16\ntest set: Test Failed at /tmp/tmpbmwn6bb5.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbmwn6bb5.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbmwn6bb5.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbmwn6bb5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpv8qv3a67.jl:17\\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\\n   Evaluated: 1 == 12\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpv8qv3a67.jl:17\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv8qv3a67.jl:16\\ntest set: Test Failed at /tmp/tmpv8qv3a67.jl:18\\\
    n  Expression: candidate([3, 3, 3, 3, 3]) == 9\\n   Evaluated: 6 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpv8qv3a67.jl:18\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv8qv3a67.jl:16\\ntest set: Test Failed at /tmp/tmpv8qv3a67.jl:19\\\
    n  Expression: candidate([30, 13, 24, 321]) == 0\\n   Evaluated: 334 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpv8qv3a67.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv8qv3a67.jl:16\\ntest set: Test Failed at /tmp/tmpv8qv3a67.jl:20\\\
    n  Expression: candidate([5, 9]) == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmpv8qv3a67.jl:20\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv8qv3a67.jl:16\\ntest set: Test Failed at /tmp/tmpv8qv3a67.jl:22\\\
    n  Expression: candidate([30, 13, 23, 32]) == 23\\n   Evaluated: 13 == 23\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpv8qv3a67.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv8qv3a67.jl:16\\ntest set: Test Failed at /tmp/tmpv8qv3a67.jl:23\\\
    n  Expression: candidate([3, 13, 2, 9]) == 3\\n   Evaluated: 22 == 3\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpv8qv3a67.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv8qv3a67.jl:16\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxdjd3ucy.jl:17\\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\\n   Evaluated: 1 == 12\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpxdjd3ucy.jl:17\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxdjd3ucy.jl:16\\ntest set: Test Failed at /tmp/tmpxdjd3ucy.jl:18\\\
    n  Expression: candidate([3, 3, 3, 3, 3]) == 9\\n   Evaluated: 6 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxdjd3ucy.jl:18\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxdjd3ucy.jl:16\\ntest set: Test Failed at /tmp/tmpxdjd3ucy.jl:19\\\
    n  Expression: candidate([30, 13, 24, 321]) == 0\\n   Evaluated: 334 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxdjd3ucy.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxdjd3ucy.jl:16\\ntest set: Test Failed at /tmp/tmpxdjd3ucy.jl:20\\\
    n  Expression: candidate([5, 9]) == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmpxdjd3ucy.jl:20\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxdjd3ucy.jl:16\\ntest set: Test Failed at /tmp/tmpxdjd3ucy.jl:22\\\
    n  Expression: candidate([30, 13, 23, 32]) == 23\\n   Evaluated: 13 == 23\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxdjd3ucy.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxdjd3ucy.jl:16\\ntest set: Test Failed at /tmp/tmpxdjd3ucy.jl:23\\\
    n  Expression: candidate([3, 13, 2, 9]) == 3\\n   Evaluated: 22 == 3\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxdjd3ucy.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxdjd3ucy.jl:16\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmz51aw9f.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpmz51aw9f.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmz51aw9f.jl:16\ntest set: Test Failed at /tmp/tmpmz51aw9f.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmz51aw9f.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmz51aw9f.jl:16\ntest set: Test Failed at /tmp/tmpmz51aw9f.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmz51aw9f.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmz51aw9f.jl:16\ntest set: Test Failed at /tmp/tmpmz51aw9f.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmz51aw9f.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmz51aw9f.jl:16\ntest set: Test Failed at /tmp/tmpmz51aw9f.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmz51aw9f.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmz51aw9f.jl:16\ntest set: Test Failed at /tmp/tmpmz51aw9f.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmz51aw9f.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmz51aw9f.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmz51aw9f.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 2:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppsuf__sh.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmppsuf__sh.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppsuf__sh.jl:22\ntest set: Test Failed at /tmp/tmppsuf__sh.jl:24\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppsuf__sh.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppsuf__sh.jl:22\ntest set: Test Failed at /tmp/tmppsuf__sh.jl:25\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppsuf__sh.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppsuf__sh.jl:22\ntest set: Test Failed at /tmp/tmppsuf__sh.jl:26\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppsuf__sh.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppsuf__sh.jl:22\ntest set: Test Failed at /tmp/tmppsuf__sh.jl:28\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppsuf__sh.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppsuf__sh.jl:22\ntest set: Test Failed at /tmp/tmppsuf__sh.jl:29\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppsuf__sh.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppsuf__sh.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppsuf__sh.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmper8zgzla.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmper8zgzla.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmper8zgzla.jl:16\ntest set: Test Failed at /tmp/tmper8zgzla.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmper8zgzla.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmper8zgzla.jl:16\ntest set: Test Failed at /tmp/tmper8zgzla.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmper8zgzla.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmper8zgzla.jl:16\ntest set: Test Failed at /tmp/tmper8zgzla.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmper8zgzla.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmper8zgzla.jl:16\ntest set: Test Failed at /tmp/tmper8zgzla.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmper8zgzla.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmper8zgzla.jl:16\ntest set: Test Failed at /tmp/tmper8zgzla.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmper8zgzla.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmper8zgzla.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmper8zgzla.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyw1khnjq.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpyw1khnjq.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyw1khnjq.jl:16\ntest set: Test Failed at /tmp/tmpyw1khnjq.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyw1khnjq.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyw1khnjq.jl:16\ntest set: Test Failed at /tmp/tmpyw1khnjq.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyw1khnjq.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyw1khnjq.jl:16\ntest set: Test Failed at /tmp/tmpyw1khnjq.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpyw1khnjq.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyw1khnjq.jl:16\ntest set: Test Failed at /tmp/tmpyw1khnjq.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyw1khnjq.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyw1khnjq.jl:16\ntest set: Test Failed at /tmp/tmpyw1khnjq.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyw1khnjq.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyw1khnjq.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyw1khnjq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp25ykccb6.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp25ykccb6.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp25ykccb6.jl:16\ntest set: Test Failed at /tmp/tmp25ykccb6.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp25ykccb6.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp25ykccb6.jl:16\ntest set: Test Failed at /tmp/tmp25ykccb6.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp25ykccb6.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp25ykccb6.jl:16\ntest set: Test Failed at /tmp/tmp25ykccb6.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp25ykccb6.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp25ykccb6.jl:16\ntest set: Test Failed at /tmp/tmp25ykccb6.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp25ykccb6.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp25ykccb6.jl:16\ntest set: Test Failed at /tmp/tmp25ykccb6.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp25ykccb6.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp25ykccb6.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp25ykccb6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf9yfyv2e.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpf9yfyv2e.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf9yfyv2e.jl:16\ntest set: Test Failed at /tmp/tmpf9yfyv2e.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf9yfyv2e.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf9yfyv2e.jl:16\ntest set: Test Failed at /tmp/tmpf9yfyv2e.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf9yfyv2e.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf9yfyv2e.jl:16\ntest set: Test Failed at /tmp/tmpf9yfyv2e.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpf9yfyv2e.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf9yfyv2e.jl:16\ntest set: Test Failed at /tmp/tmpf9yfyv2e.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf9yfyv2e.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf9yfyv2e.jl:16\ntest set: Test Failed at /tmp/tmpf9yfyv2e.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf9yfyv2e.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpf9yfyv2e.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf9yfyv2e.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzxxgm_4p.jl:17\\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\\n   Evaluated: 1 == 12\\nStacktrace:'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzgrb58nz.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpzgrb58nz.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzgrb58nz.jl:16\ntest set: Test Failed at /tmp/tmpzgrb58nz.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzgrb58nz.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzgrb58nz.jl:16\ntest set: Test Failed at /tmp/tmpzgrb58nz.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzgrb58nz.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzgrb58nz.jl:16\ntest set: Test Failed at /tmp/tmpzgrb58nz.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzgrb58nz.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzgrb58nz.jl:16\ntest set: Test Failed at /tmp/tmpzgrb58nz.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzgrb58nz.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzgrb58nz.jl:16\ntest set: Test Failed at /tmp/tmpzgrb58nz.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzgrb58nz.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzgrb58nz.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzgrb58nz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnoaiu889.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpnoaiu889.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnoaiu889.jl:16\ntest set: Test Failed at /tmp/tmpnoaiu889.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnoaiu889.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnoaiu889.jl:16\ntest set: Test Failed at /tmp/tmpnoaiu889.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnoaiu889.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnoaiu889.jl:16\ntest set: Test Failed at /tmp/tmpnoaiu889.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpnoaiu889.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnoaiu889.jl:16\ntest set: Test Failed at /tmp/tmpnoaiu889.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnoaiu889.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnoaiu889.jl:16\ntest set: Test Failed at /tmp/tmpnoaiu889.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnoaiu889.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnoaiu889.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnoaiu889.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpfwm2wowc.jl:17\\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\\n   Evaluated: 1 == 12\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpfwm2wowc.jl:17\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfwm2wowc.jl:16\\ntest set: Test Failed at /tmp/tmpfwm2wowc.jl:18\\\
    n  Expression: candidate([3, 3, 3, 3, 3]) == 9\\n   Evaluated: 6 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpfwm2wowc.jl:18\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfwm2wowc.jl:16\\ntest set: Test Failed at /tmp/tmpfwm2wowc.jl:19\\\
    n  Expression: candidate([30, 13, 24, 321]) == 0\\n   Evaluated: 334 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpfwm2wowc.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfwm2wowc.jl:16\\ntest set: Test Failed at /tmp/tmpfwm2wowc.jl:20\\\
    n  Expression: candidate([5, 9]) == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmpfwm2wowc.jl:20\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfwm2wowc.jl:16\\ntest set: Test Failed at /tmp/tmpfwm2wowc.jl:22\\\
    n  Expression: candidate([30, 13, 23, 32]) == 23\\n   Evaluated: 13 == 23\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpfwm2wowc.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfwm2wowc.jl:16\\ntest set: Test Failed at /tmp/tmpfwm2wowc.jl:23\\\
    n  Expression: candidate([3, 13, 2, 9]) == 3\\n   Evaluated: 22 == 3\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpfwm2wowc.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfwm2wowc.jl:16\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3xxjexrw.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp3xxjexrw.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3xxjexrw.jl:16\ntest set: Test Failed at /tmp/tmp3xxjexrw.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3xxjexrw.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3xxjexrw.jl:16\ntest set: Test Failed at /tmp/tmp3xxjexrw.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3xxjexrw.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3xxjexrw.jl:16\ntest set: Test Failed at /tmp/tmp3xxjexrw.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp3xxjexrw.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3xxjexrw.jl:16\ntest set: Test Failed at /tmp/tmp3xxjexrw.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3xxjexrw.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3xxjexrw.jl:16\ntest set: Test Failed at /tmp/tmp3xxjexrw.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3xxjexrw.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3xxjexrw.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3xxjexrw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwb_xcipg.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpwb_xcipg.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwb_xcipg.jl:16\ntest set: Test Failed at /tmp/tmpwb_xcipg.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwb_xcipg.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwb_xcipg.jl:16\ntest set: Test Failed at /tmp/tmpwb_xcipg.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwb_xcipg.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwb_xcipg.jl:16\ntest set: Test Failed at /tmp/tmpwb_xcipg.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwb_xcipg.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwb_xcipg.jl:16\ntest set: Test Failed at /tmp/tmpwb_xcipg.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwb_xcipg.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwb_xcipg.jl:16\ntest set: Test Failed at /tmp/tmpwb_xcipg.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwb_xcipg.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwb_xcipg.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwb_xcipg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpid8i2mms.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpid8i2mms.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpid8i2mms.jl:16\ntest set: Test Failed at /tmp/tmpid8i2mms.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpid8i2mms.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpid8i2mms.jl:16\ntest set: Test Failed at /tmp/tmpid8i2mms.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpid8i2mms.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpid8i2mms.jl:16\ntest set: Test Failed at /tmp/tmpid8i2mms.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpid8i2mms.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpid8i2mms.jl:16\ntest set: Test Failed at /tmp/tmpid8i2mms.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpid8i2mms.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpid8i2mms.jl:16\ntest set: Test Failed at /tmp/tmpid8i2mms.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpid8i2mms.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpid8i2mms.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpid8i2mms.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for (i, x) in enumerate(lst)\n        if i % 2 == 0 && x % 2\
    \ != 0\n            sum += x\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmphhewjr0h.jl:23\\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\\n   Evaluated: 1 == 12\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmphhewjr0h.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphhewjr0h.jl:22\\ntest set: Test Failed at /tmp/tmphhewjr0h.jl:24\\\
    n  Expression: candidate([3, 3, 3, 3, 3]) == 9\\n   Evaluated: 6 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphhewjr0h.jl:24\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphhewjr0h.jl:22\\ntest set: Test Failed at /tmp/tmphhewjr0h.jl:25\\\
    n  Expression: candidate([30, 13, 24, 321]) == 0\\n   Evaluated: 334 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphhewjr0h.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphhewjr0h.jl:22\\ntest set: Test Failed at /tmp/tmphhewjr0h.jl:26\\\
    n  Expression: candidate([5, 9]) == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmphhewjr0h.jl:26\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphhewjr0h.jl:22\\ntest set: Test Failed at /tmp/tmphhewjr0h.jl:28\\\
    n  Expression: candidate([30, 13, 23, 32]) == 23\\n   Evaluated: 13 == 23\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphhewjr0h.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphhewjr0h.jl:22\\ntest set: Test Failed at /tmp/tmphhewjr0h.jl:29\\\
    n  Expression: candidate([3, 13, 2, 9]) == 3\\n   Evaluated: 22 == 3\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmphhewjr0h.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmphhewjr0h.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi58ufd9l.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpi58ufd9l.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi58ufd9l.jl:16\ntest set: Test Failed at /tmp/tmpi58ufd9l.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi58ufd9l.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi58ufd9l.jl:16\ntest set: Test Failed at /tmp/tmpi58ufd9l.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi58ufd9l.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi58ufd9l.jl:16\ntest set: Test Failed at /tmp/tmpi58ufd9l.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpi58ufd9l.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi58ufd9l.jl:16\ntest set: Test Failed at /tmp/tmpi58ufd9l.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi58ufd9l.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi58ufd9l.jl:16\ntest set: Test Failed at /tmp/tmpi58ufd9l.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi58ufd9l.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi58ufd9l.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi58ufd9l.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4uv3tv5y.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp4uv3tv5y.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4uv3tv5y.jl:16\ntest set: Test Failed at /tmp/tmp4uv3tv5y.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4uv3tv5y.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4uv3tv5y.jl:16\ntest set: Test Failed at /tmp/tmp4uv3tv5y.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4uv3tv5y.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4uv3tv5y.jl:16\ntest set: Test Failed at /tmp/tmp4uv3tv5y.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4uv3tv5y.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4uv3tv5y.jl:16\ntest set: Test Failed at /tmp/tmp4uv3tv5y.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4uv3tv5y.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4uv3tv5y.jl:16\ntest set: Test Failed at /tmp/tmp4uv3tv5y.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4uv3tv5y.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4uv3tv5y.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4uv3tv5y.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for (i,v) in enumerate(lst)\n        if (i % 2 == 0) && (v %\
    \ 2 != 0)\n            sum += v\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7,\
    \ 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5b3a7l9g.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp5b3a7l9g.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5b3a7l9g.jl:22\ntest set: Test Failed at /tmp/tmp5b3a7l9g.jl:24\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5b3a7l9g.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5b3a7l9g.jl:22\ntest set: Test Failed at /tmp/tmp5b3a7l9g.jl:25\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5b3a7l9g.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5b3a7l9g.jl:22\ntest set: Test Failed at /tmp/tmp5b3a7l9g.jl:26\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp5b3a7l9g.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5b3a7l9g.jl:22\ntest set: Test Failed at /tmp/tmp5b3a7l9g.jl:28\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5b3a7l9g.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5b3a7l9g.jl:22\ntest set: Test Failed at /tmp/tmp5b3a7l9g.jl:29\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5b3a7l9g.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5b3a7l9g.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5b3a7l9g.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiegsqw1a.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpiegsqw1a.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiegsqw1a.jl:16\ntest set: Test Failed at /tmp/tmpiegsqw1a.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiegsqw1a.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiegsqw1a.jl:16\ntest set: Test Failed at /tmp/tmpiegsqw1a.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiegsqw1a.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiegsqw1a.jl:16\ntest set: Test Failed at /tmp/tmpiegsqw1a.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpiegsqw1a.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiegsqw1a.jl:16\ntest set: Test Failed at /tmp/tmpiegsqw1a.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiegsqw1a.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiegsqw1a.jl:16\ntest set: Test Failed at /tmp/tmpiegsqw1a.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiegsqw1a.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiegsqw1a.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiegsqw1a.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpuq08ykmp.jl:17\\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\\n   Evaluated: 1 == 12\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpuq08ykmp.jl:17\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuq08ykmp.jl:16\\ntest set: Test Failed at /tmp/tmpuq08ykmp.jl:18\\\
    n  Expression: candidate([3, 3, 3, 3, 3]) == 9\\n   Evaluated: 6 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpuq08ykmp.jl:18\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuq08ykmp.jl:16\\ntest set: Test Failed at /tmp/tmpuq08ykmp.jl:19\\\
    n  Expression: candidate([30, 13, 24, 321]) == 0\\n   Evaluated: 334 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpuq08ykmp.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuq08ykmp.jl:16\\ntest set: Test Failed at /tmp/tmpuq08ykmp.jl:20\\\
    n  Expression: candidate([5, 9]) == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmpuq08ykmp.jl:20\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuq08ykmp.jl:16\\ntest set: Test Failed at /tmp/tmpuq08ykmp.jl:22\\\
    n  Expression: candidate([30, 13, 23, 32]) == 23\\n   Evaluated: 13 == 23\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpuq08ykmp.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuq08ykmp.jl:16\\ntest set: Test Failed at /tmp/tmpuq08ykmp.jl:23\\\
    n  Expression: candidate([3, 13, 2, 9]) == 3\\n   Evaluated: 22 == 3\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpuq08ykmp.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpuq08ykmp.jl:16\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpx4djbner.jl:17\\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\\n   Evaluated: 1 == 12\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpx4djbner.jl:17\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx4djbner.jl:16\\ntest set: Test Failed at /tmp/tmpx4djbner.jl:18\\\
    n  Expression: candidate([3, 3, 3, 3, 3]) == 9\\n   Evaluated: 6 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpx4djbner.jl:18\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx4djbner.jl:16\\ntest set: Test Failed at /tmp/tmpx4djbner.jl:19\\\
    n  Expression: candidate([30, 13, 24, 321]) == 0\\n   Evaluated: 334 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpx4djbner.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx4djbner.jl:16\\ntest set: Test Failed at /tmp/tmpx4djbner.jl:20\\\
    n  Expression: candidate([5, 9]) == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmpx4djbner.jl:20\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx4djbner.jl:16\\ntest set: Test Failed at /tmp/tmpx4djbner.jl:22\\\
    n  Expression: candidate([30, 13, 23, 32]) == 23\\n   Evaluated: 13 == 23\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpx4djbner.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx4djbner.jl:16\\ntest set: Test Failed at /tmp/tmpx4djbner.jl:23\\\
    n  Expression: candidate([3, 13, 2, 9]) == 3\\n   Evaluated: 22 == 3\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpx4djbner.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpx4djbner.jl:16\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm5jb6nln.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpm5jb6nln.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5jb6nln.jl:16\ntest set: Test Failed at /tmp/tmpm5jb6nln.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm5jb6nln.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5jb6nln.jl:16\ntest set: Test Failed at /tmp/tmpm5jb6nln.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm5jb6nln.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5jb6nln.jl:16\ntest set: Test Failed at /tmp/tmpm5jb6nln.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpm5jb6nln.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5jb6nln.jl:16\ntest set: Test Failed at /tmp/tmpm5jb6nln.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm5jb6nln.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5jb6nln.jl:16\ntest set: Test Failed at /tmp/tmpm5jb6nln.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm5jb6nln.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5jb6nln.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm5jb6nln.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz5k79_ql.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpz5k79_ql.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz5k79_ql.jl:16\ntest set: Test Failed at /tmp/tmpz5k79_ql.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz5k79_ql.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz5k79_ql.jl:16\ntest set: Test Failed at /tmp/tmpz5k79_ql.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz5k79_ql.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz5k79_ql.jl:16\ntest set: Test Failed at /tmp/tmpz5k79_ql.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpz5k79_ql.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz5k79_ql.jl:16\ntest set: Test Failed at /tmp/tmpz5k79_ql.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz5k79_ql.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz5k79_ql.jl:16\ntest set: Test Failed at /tmp/tmpz5k79_ql.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz5k79_ql.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz5k79_ql.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz5k79_ql.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5udij6o2.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp5udij6o2.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5udij6o2.jl:16\ntest set: Test Failed at /tmp/tmp5udij6o2.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5udij6o2.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5udij6o2.jl:16\ntest set: Test Failed at /tmp/tmp5udij6o2.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5udij6o2.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5udij6o2.jl:16\ntest set: Test Failed at /tmp/tmp5udij6o2.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp5udij6o2.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5udij6o2.jl:16\ntest set: Test Failed at /tmp/tmp5udij6o2.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5udij6o2.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5udij6o2.jl:16\ntest set: Test Failed at /tmp/tmp5udij6o2.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5udij6o2.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5udij6o2.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5udij6o2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 2:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxdxuo1kl.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpxdxuo1kl.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxdxuo1kl.jl:22\ntest set: Test Failed at /tmp/tmpxdxuo1kl.jl:24\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxdxuo1kl.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxdxuo1kl.jl:22\ntest set: Test Failed at /tmp/tmpxdxuo1kl.jl:25\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxdxuo1kl.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxdxuo1kl.jl:22\ntest set: Test Failed at /tmp/tmpxdxuo1kl.jl:26\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpxdxuo1kl.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxdxuo1kl.jl:22\ntest set: Test Failed at /tmp/tmpxdxuo1kl.jl:28\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxdxuo1kl.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxdxuo1kl.jl:22\ntest set: Test Failed at /tmp/tmpxdxuo1kl.jl:29\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxdxuo1kl.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxdxuo1kl.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxdxuo1kl.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp817lusv.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpp817lusv.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp817lusv.jl:16\ntest set: Test Failed at /tmp/tmpp817lusv.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp817lusv.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp817lusv.jl:16\ntest set: Test Failed at /tmp/tmpp817lusv.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp817lusv.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp817lusv.jl:16\ntest set: Test Failed at /tmp/tmpp817lusv.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpp817lusv.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp817lusv.jl:16\ntest set: Test Failed at /tmp/tmpp817lusv.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp817lusv.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp817lusv.jl:16\ntest set: Test Failed at /tmp/tmpp817lusv.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp817lusv.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp817lusv.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp817lusv.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxsx5oqsz.jl:17\\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\\n   Evaluated: 1 == 12\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpxsx5oqsz.jl:17\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxsx5oqsz.jl:16\\ntest set: Test Failed at /tmp/tmpxsx5oqsz.jl:18\\\
    n  Expression: candidate([3, 3, 3, 3, 3]) == 9\\n   Evaluated: 6 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxsx5oqsz.jl:18\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxsx5oqsz.jl:16\\ntest set: Test Failed at /tmp/tmpxsx5oqsz.jl:19\\\
    n  Expression: candidate([30, 13, 24, 321]) == 0\\n   Evaluated: 334 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxsx5oqsz.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxsx5oqsz.jl:16\\ntest set: Test Failed at /tmp/tmpxsx5oqsz.jl:20\\\
    n  Expression: candidate([5, 9]) == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmpxsx5oqsz.jl:20\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxsx5oqsz.jl:16\\ntest set: Test Failed at /tmp/tmpxsx5oqsz.jl:22\\\
    n  Expression: candidate([30, 13, 23, 32]) == 23\\n   Evaluated: 13 == 23\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxsx5oqsz.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxsx5oqsz.jl:16\\ntest set: Test Failed at /tmp/tmpxsx5oqsz.jl:23\\\
    n  Expression: candidate([3, 13, 2, 9]) == 3\\n   Evaluated: 22 == 3\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxsx5oqsz.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxsx5oqsz.jl:16\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     6      7\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp982vt6qb.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp982vt6qb.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp982vt6qb.jl:16\ntest set: Test Failed at /tmp/tmp982vt6qb.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp982vt6qb.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp982vt6qb.jl:16\ntest set: Test Failed at /tmp/tmp982vt6qb.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp982vt6qb.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp982vt6qb.jl:16\ntest set: Test Failed at /tmp/tmp982vt6qb.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp982vt6qb.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp982vt6qb.jl:16\ntest set: Test Failed at /tmp/tmp982vt6qb.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp982vt6qb.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp982vt6qb.jl:16\ntest set: Test Failed at /tmp/tmp982vt6qb.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp982vt6qb.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp982vt6qb.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp982vt6qb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6fenziv9.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp6fenziv9.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6fenziv9.jl:16\ntest set: Test Failed at /tmp/tmp6fenziv9.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6fenziv9.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6fenziv9.jl:16\ntest set: Test Failed at /tmp/tmp6fenziv9.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6fenziv9.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6fenziv9.jl:16\ntest set: Test Failed at /tmp/tmp6fenziv9.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6fenziv9.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6fenziv9.jl:16\ntest set: Test Failed at /tmp/tmp6fenziv9.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6fenziv9.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6fenziv9.jl:16\ntest set: Test Failed at /tmp/tmp6fenziv9.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6fenziv9.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6fenziv9.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6fenziv9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqlh5fpl1.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpqlh5fpl1.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlh5fpl1.jl:16\ntest set: Test Failed at /tmp/tmpqlh5fpl1.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqlh5fpl1.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlh5fpl1.jl:16\ntest set: Test Failed at /tmp/tmpqlh5fpl1.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqlh5fpl1.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlh5fpl1.jl:16\ntest set: Test Failed at /tmp/tmpqlh5fpl1.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpqlh5fpl1.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlh5fpl1.jl:16\ntest set: Test Failed at /tmp/tmpqlh5fpl1.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqlh5fpl1.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlh5fpl1.jl:16\ntest set: Test Failed at /tmp/tmpqlh5fpl1.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqlh5fpl1.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqlh5fpl1.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqlh5fpl1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp12w5s7jj.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp12w5s7jj.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12w5s7jj.jl:16\ntest set: Test Failed at /tmp/tmp12w5s7jj.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp12w5s7jj.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12w5s7jj.jl:16\ntest set: Test Failed at /tmp/tmp12w5s7jj.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp12w5s7jj.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12w5s7jj.jl:16\ntest set: Test Failed at /tmp/tmp12w5s7jj.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp12w5s7jj.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12w5s7jj.jl:16\ntest set: Test Failed at /tmp/tmp12w5s7jj.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp12w5s7jj.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12w5s7jj.jl:16\ntest set: Test Failed at /tmp/tmp12w5s7jj.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp12w5s7jj.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12w5s7jj.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12w5s7jj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 2:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsbwbgnz8.jl:23\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpsbwbgnz8.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsbwbgnz8.jl:22\ntest set: Test Failed at /tmp/tmpsbwbgnz8.jl:24\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsbwbgnz8.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsbwbgnz8.jl:22\ntest set: Test Failed at /tmp/tmpsbwbgnz8.jl:25\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsbwbgnz8.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsbwbgnz8.jl:22\ntest set: Test Failed at /tmp/tmpsbwbgnz8.jl:26\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpsbwbgnz8.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsbwbgnz8.jl:22\ntest set: Test Failed at /tmp/tmpsbwbgnz8.jl:28\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsbwbgnz8.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsbwbgnz8.jl:22\ntest set: Test Failed at /tmp/tmpsbwbgnz8.jl:29\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsbwbgnz8.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsbwbgnz8.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsbwbgnz8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpw6_wmpo6.jl:17\\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\\n   Evaluated: 1 == 12\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpw6_wmpo6.jl:17\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6_wmpo6.jl:16\\ntest set: Test Failed at /tmp/tmpw6_wmpo6.jl:18\\\
    n  Expression: candidate([3, 3, 3, 3, 3]) == 9\\n   Evaluated: 6 == 9\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw6_wmpo6.jl:18\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6_wmpo6.jl:16\\ntest set: Test Failed at /tmp/tmpw6_wmpo6.jl:19\\\
    n  Expression: candidate([30, 13, 24, 321]) == 0\\n   Evaluated: 334 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw6_wmpo6.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6_wmpo6.jl:16\\ntest set: Test Failed at /tmp/tmpw6_wmpo6.jl:20\\\
    n  Expression: candidate([5, 9]) == 5\\n   Evaluated: 9 == 5\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmpw6_wmpo6.jl:20\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6_wmpo6.jl:16\\ntest set: Test Failed at /tmp/tmpw6_wmpo6.jl:22\\\
    n  Expression: candidate([30, 13, 23, 32]) == 23\\n   Evaluated: 13 == 23\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw6_wmpo6.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6_wmpo6.jl:16\\ntest set: Test Failed at /tmp/tmpw6_wmpo6.jl:23\\\
    n  Expression: candidate([3, 13, 2, 9]) == 3\\n   Evaluated: 22 == 3\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpw6_wmpo6.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpw6_wmpo6.jl:16\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgj71iy2m.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpgj71iy2m.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgj71iy2m.jl:16\ntest set: Test Failed at /tmp/tmpgj71iy2m.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgj71iy2m.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgj71iy2m.jl:16\ntest set: Test Failed at /tmp/tmpgj71iy2m.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgj71iy2m.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgj71iy2m.jl:16\ntest set: Test Failed at /tmp/tmpgj71iy2m.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgj71iy2m.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgj71iy2m.jl:16\ntest set: Test Failed at /tmp/tmpgj71iy2m.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgj71iy2m.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgj71iy2m.jl:16\ntest set: Test Failed at /tmp/tmpgj71iy2m.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgj71iy2m.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgj71iy2m.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgj71iy2m.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i = 1:2:length(lst)\n        if lst[i] % 2 == 1\n      \
    \      sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\
    \t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321])\
    \ == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\
    \t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) ==\
    \ 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    return sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp788xrtfb.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp788xrtfb.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp788xrtfb.jl:16\ntest set: Test Failed at /tmp/tmp788xrtfb.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp788xrtfb.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp788xrtfb.jl:16\ntest set: Test Failed at /tmp/tmp788xrtfb.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp788xrtfb.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp788xrtfb.jl:16\ntest set: Test Failed at /tmp/tmp788xrtfb.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp788xrtfb.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp788xrtfb.jl:16\ntest set: Test Failed at /tmp/tmp788xrtfb.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp788xrtfb.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp788xrtfb.jl:16\ntest set: Test Failed at /tmp/tmp788xrtfb.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp788xrtfb.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp788xrtfb.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp788xrtfb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpigfb_6xa.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpigfb_6xa.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpigfb_6xa.jl:16\ntest set: Test Failed at /tmp/tmpigfb_6xa.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpigfb_6xa.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpigfb_6xa.jl:16\ntest set: Test Failed at /tmp/tmpigfb_6xa.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpigfb_6xa.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpigfb_6xa.jl:16\ntest set: Test Failed at /tmp/tmpigfb_6xa.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpigfb_6xa.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpigfb_6xa.jl:16\ntest set: Test Failed at /tmp/tmpigfb_6xa.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpigfb_6xa.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpigfb_6xa.jl:16\ntest set: Test Failed at /tmp/tmpigfb_6xa.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpigfb_6xa.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpigfb_6xa.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpigfb_6xa.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum(lst[2:2:end][lst[2:2:end] .% 2 .!= 0])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) == 12)\n\t@test(candidate([3,\
    \ 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24, 321]) == 0)\n\t@test(candidate([5,\
    \ 9]) == 5)\n\t@test(candidate([2, 4, 8]) == 0)\n\t@test(candidate([30, 13, 23,\
    \ 32]) == 23)\n\t@test(candidate([3, 13, 2, 9]) == 3)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkf7svyz9.jl:17\n  Expression: candidate([5,\
    \ 8, 7, 1]) == 12\n   Evaluated: 1 == 12\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpkf7svyz9.jl:17\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkf7svyz9.jl:16\ntest set: Test Failed at /tmp/tmpkf7svyz9.jl:18\n\
    \  Expression: candidate([3, 3, 3, 3, 3]) == 9\n   Evaluated: 6 == 9\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkf7svyz9.jl:18\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkf7svyz9.jl:16\ntest set: Test Failed at /tmp/tmpkf7svyz9.jl:19\n\
    \  Expression: candidate([30, 13, 24, 321]) == 0\n   Evaluated: 334 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkf7svyz9.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkf7svyz9.jl:16\ntest set: Test Failed at /tmp/tmpkf7svyz9.jl:20\n\
    \  Expression: candidate([5, 9]) == 5\n   Evaluated: 9 == 5\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpkf7svyz9.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkf7svyz9.jl:16\ntest set: Test Failed at /tmp/tmpkf7svyz9.jl:22\n\
    \  Expression: candidate([30, 13, 23, 32]) == 23\n   Evaluated: 13 == 23\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkf7svyz9.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkf7svyz9.jl:16\ntest set: Test Failed at /tmp/tmpkf7svyz9.jl:23\n\
    \  Expression: candidate([3, 13, 2, 9]) == 3\n   Evaluated: 22 == 3\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkf7svyz9.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkf7svyz9.jl:16\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     6      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkf7svyz9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    # Your code here\n    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i]\
    \ % 2 != 0\n            sum += lst[i]\n        end\n    end\n    return sum\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5,\
    \ 8, 7, 1]) == 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30,\
    \ 13, 24, 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2,\
    \ 4, 8]) == 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3,\
    \ 13, 2, 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Given a non-empty list of integers, return the sum of all of the\
    \ odd elements that are in even positions.\n    \n\n    Examples\n    solution([5,\
    \ 8, 7, 1]) ==> 12\n    solution([3, 3, 3, 3, 3]) ==> 9\n    solution([30, 13,\
    \ 24, 321]) ==>0\n    \"\"\"\nfunction solution(lst::Vector{Int64})::Int64 \n\
    \    sum = 0\n    for i in 1:2:length(lst)\n        if lst[i] % 2 != 0\n     \
    \       sum += lst[i]\n        end\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = solution;\n\t@test(candidate([5, 8, 7, 1]) ==\
    \ 12)\n\t@test(candidate([3, 3, 3, 3, 3]) == 9)\n\t@test(candidate([30, 13, 24,\
    \ 321]) == 0)\n\t@test(candidate([5, 9]) == 5)\n\t@test(candidate([2, 4, 8]) ==\
    \ 0)\n\t@test(candidate([30, 13, 23, 32]) == 23)\n\t@test(candidate([3, 13, 2,\
    \ 9]) == 3)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
