name: HumanEval_133_sum_squares
language: julia
results:
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(round.(Int64, lst).^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl7i60uf6.jl:24\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl7i60uf6.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl7i60uf6.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpl7i60uf6.jl:28\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl7i60uf6.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl7i60uf6.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl7i60uf6.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum([ceil(i)^2 for i in\
    \ lst])\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # Your code here\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp98b6jbwq.jl:22\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp98b6jbwq.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp98b6jbwq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp98b6jbwq.jl:23\n  Expression: candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp98b6jbwq.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp98b6jbwq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp98b6jbwq.jl:24\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 0 == 84\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp98b6jbwq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp98b6jbwq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp98b6jbwq.jl:25\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 0 == 29\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp98b6jbwq.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp98b6jbwq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp98b6jbwq.jl:26\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp98b6jbwq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp98b6jbwq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp98b6jbwq.jl:27\n  Expression: candidate([100.0, 1.0, 15.0,\
    \ 2.0]) == 10230\n   Evaluated: 0 == 10230\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp98b6jbwq.jl:27 [inlined]\n [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 11 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp98b6jbwq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # your code here\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpry3807t2.jl:22\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpry3807t2.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpry3807t2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpry3807t2.jl:23\n  Expression: candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpry3807t2.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpry3807t2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpry3807t2.jl:24\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 0 == 84\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpry3807t2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpry3807t2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpry3807t2.jl:25\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 0 == 29\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpry3807t2.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpry3807t2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpry3807t2.jl:26\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpry3807t2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpry3807t2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpry3807t2.jl:27\n  Expression: candidate([100.0, 1.0, 15.0,\
    \ 2.0]) == 10230\n   Evaluated: 0 == 10230\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpry3807t2.jl:27 [inlined]\n [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 11 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpry3807t2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # your code here\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_12gwt4q.jl:22\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_12gwt4q.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_12gwt4q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_12gwt4q.jl:23\n  Expression: candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_12gwt4q.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_12gwt4q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_12gwt4q.jl:24\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 0 == 84\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_12gwt4q.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_12gwt4q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_12gwt4q.jl:25\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 0 == 29\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_12gwt4q.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_12gwt4q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_12gwt4q.jl:26\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_12gwt4q.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_12gwt4q.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_12gwt4q.jl:27\n  Expression: candidate([100.0, 1.0, 15.0,\
    \ 2.0]) == 10230\n   Evaluated: 0 == 10230\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_12gwt4q.jl:27 [inlined]\n [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 11 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_12gwt4q.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    lst = ceil.(lst)\n    sum = 0\n\
    \    for i in lst\n        sum += i^2\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(round.(Int64, lst).^2)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfkki6gtb.jl:24\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 17 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfkki6gtb.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfkki6gtb.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpfkki6gtb.jl:28\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 62 == 75\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfkki6gtb.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfkki6gtb.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |   10     2     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 10 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfkki6gtb.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # your code here\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnomks4k3.jl:22\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnomks4k3.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnomks4k3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnomks4k3.jl:23\n  Expression: candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnomks4k3.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnomks4k3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnomks4k3.jl:24\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 0 == 84\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnomks4k3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnomks4k3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnomks4k3.jl:25\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 0 == 29\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnomks4k3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnomks4k3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnomks4k3.jl:26\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnomks4k3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnomks4k3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnomks4k3.jl:27\n  Expression: candidate([100.0, 1.0, 15.0,\
    \ 2.0]) == 10230\n   Evaluated: 0 == 10230\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnomks4k3.jl:27 [inlined]\n [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 11 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnomks4k3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for x in lst\n \
    \       sum += ceil(x)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    # your code here\n    return\
    \ 0\nend\nusing Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvjez1ns2.jl:22\n  Expression: candidate([1.0,\
    \ 2.0, 3.0]) == 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvjez1ns2.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjez1ns2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvjez1ns2.jl:23\n  Expression: candidate([1.0, 2.0, 3.0]) ==\
    \ 14\n   Evaluated: 0 == 14\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvjez1ns2.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjez1ns2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvjez1ns2.jl:24\n  Expression: candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84\n   Evaluated: 0 == 84\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvjez1ns2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjez1ns2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvjez1ns2.jl:25\n  Expression: candidate([1.4, 4.2, 0.0]) ==\
    \ 29\n   Evaluated: 0 == 29\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvjez1ns2.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjez1ns2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvjez1ns2.jl:26\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 0 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvjez1ns2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvjez1ns2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvjez1ns2.jl:27\n  Expression: candidate([100.0, 1.0, 15.0,\
    \ 2.0]) == 10230\n   Evaluated: 0 == 10230\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvjez1ns2.jl:27 [inlined]\n [2] macro expans"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 11 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvjez1ns2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += round(Int64, i^2)\n    end\n    return sum\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0])\
    \ == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0,\
    \ 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqj1p058h.jl:28\n  Expression: candidate([1.4,\
    \ 4.2, 0.0]) == 29\n   Evaluated: 20 == 29\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqj1p058h.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqj1p058h.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqj1p058h.jl:29\n  Expression: candidate([-2.4, 1.0, 1.0])\
    \ == 6\n   Evaluated: 8 == 6\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqj1p058h.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqj1p058h.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqj1p058h.jl:32\n  Expression: candidate([-1.4, 4.6, 6.3])\
    \ == 75\n   Evaluated: 63 == 75\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqj1p058h.jl:32\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqj1p058h.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpqj1p058h.jl:33\n  Expression: candidate([-1.4, 17.9, 18.9,\
    \ 19.9]) == 1086\n   Evaluated: 1075 == 1086\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqj1p058h.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqj1p058h.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     4     12\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqj1p058h.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in 1:length(lst)\n\
    \        sum += ceil(lst[i])^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    sum = 0\n    for i in lst\n \
    \       sum += ceil(i)^2\n    end\n    return sum\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\
    \t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 3.0, 5.0, 7.0])\
    \ == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
- program: "\"\"\"You are given a list of numbers.\n    You need to return the sum\
    \ of squared numbers in the given list,\n    round each element in the list to\
    \ the upper int(Ceiling) first.\n    Examples:\n    For lst = [1,2,3] the output\
    \ should be 14\n    For lst = [1,4,9] the output should be 98\n    For lst = [1,3,5,7]\
    \ the output should be 84\n    For lst = [1.4,4.2,0] the output should be 29\n\
    \    For lst = [-2.4,1,1] the output should be 6\n    \n\n    \"\"\"\nfunction\
    \ sum_squares(lst::Vector{Float64})::Int64 \n    return sum(ceil.(lst).^2)\nend\n\
    using Test\n\n@testset begin\n\ncandidate = sum_squares;\n\t@test(candidate([1.0,\
    \ 2.0, 3.0]) == 14)\n\t@test(candidate([1.0, 2.0, 3.0]) == 14)\n\t@test(candidate([1.0,\
    \ 3.0, 5.0, 7.0]) == 84)\n\t@test(candidate([1.4, 4.2, 0.0]) == 29)\n\t@test(candidate([-2.4,\
    \ 1.0, 1.0]) == 6)\n\t@test(candidate([100.0, 1.0, 15.0, 2.0]) == 10230)\n\t@test(candidate([10000.0,\
    \ 10000.0]) == 200000000)\n\t@test(candidate([-1.4, 4.6, 6.3]) == 75)\n\t@test(candidate([-1.4,\
    \ 17.9, 18.9, 19.9]) == 1086)\n\t@test(candidate([0.0]) == 0)\n\t@test(candidate([-1.0])\
    \ == 1)\n\t@test(candidate([-1.0, 1.0, 0.0]) == 2)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   12     12\n"
  exit_code: 0
  status: OK
