name: HumanEval_111_histogram
language: julia
results:
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm79sfg1a.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpm79sfg1a.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm79sfg1a.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpm79sfg1a.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm79sfg1a.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm79sfg1a.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm79sfg1a.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ letter in keys(hist)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpahkeekwq.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpahkeekwq.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpahkeekwq.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpahkeekwq.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpahkeekwq.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpahkeekwq.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpahkeekwq.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n       \
    \     hist[c] += 1\n        else\n            hist[c] = 1\n        end\n    end\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb4yekirf.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\\n     @ Base ./dict.jl:104\\\
    n   [3] convert\\n     @ ./abstractdict.jl:526 [inlined]\\n   [4] histogram(test::String)\\\
    n     @ Main /tmp/tmpb4yekirf.jl:22\\n   [5] macro expansion\\n     @ /tmp/tmpb4yekirf.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpb4yekirf.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpb4yekirf.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] Dict{String, Int64}(kv::Dict{Any,\
    \ Any})\\n     @ Base ./dict.jl:104\\n   [3] convert\\n     @ ./abstractdict.jl:526\
    \ [inlined]\\n   [4] histogram(test::String)\\n     @ Main /tmp/tmpb4yekirf.jl:22\\\
    n   [5] macro expansion\\n     @ /tmp/tmpb4yekirf.jl:30 [inlined]\\n   [6] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/ju"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfgbwf70x.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmpfgbwf70x.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpfgbwf70x.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfgbwf70x.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfgbwf70x.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmpfgbwf70x.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpfgbwf70x.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfgbwf70x.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfgbwf70x.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        hist[letter]\
    \ = get(hist, letter, 0) + 1\n    end\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt855p5ef.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpt855p5ef.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt855p5ef.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt855p5ef.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt855p5ef.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt855p5ef.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt855p5ef.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\n    return Dict{String, Int64}()\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb68z_nhl.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb68z_nhl.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb68z_nhl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb68z_nhl.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb68z_nhl.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb68z_nhl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb68z_nhl.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb68z_nhl.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb68z_nhl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb68z_nhl.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb68z_nhl.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb68z_nhl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb68z_nhl.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpb68z_nhl.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb68z_nhl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in test\n        if letter\
    \ in keys(hist)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqo0kp258.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpqo0kp258.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpqo0kp258.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqo0kp258.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpqo0kp258.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpqo0kp258.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmpqo0kp258.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqo0kp258.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpqo0kp258.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in test\n        if letter in keys(hist)\n\
    \            hist[letter] += 1\n        else\n            hist[letter] = 1\n \
    \       end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq5bx7p2a.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\\n     @ Base ./dict.jl:104\\\
    n   [3] convert\\n     @ ./abstractdict.jl:526 [inlined]\\n   [4] histogram(test::String)\\\
    n     @ Main /tmp/tmpq5bx7p2a.jl:22\\n   [5] macro expansion\\n     @ /tmp/tmpq5bx7p2a.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpq5bx7p2a.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpq5bx7p2a.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] Dict{String, Int64}(kv::Dict{Any,\
    \ Any})\\n     @ Base ./dict.jl:104\\n   [3] convert\\n     @ ./abstractdict.jl:526\
    \ [inlined]\\n   [4] histogram(test::String)\\n     @ Main /tmp/tmpq5bx7p2a.jl:22\\\
    n   [5] macro expansion\\n     @ /tmp/tmpq5bx7p2a.jl:30 [inlined]\\n   [6] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/ju"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create a dictionary to store the letters and their counts\n    hist\
    \ = Dict{String, Int64}()\n    # Loop through the string\n    for letter in test\n\
    \        # If the letter is already in the dictionary, increment the count\n \
    \       if letter in keys(hist)\n            hist[letter] += 1\n        # If the\
    \ letter is not in the dictionary, add it with a count of 1\n        else\n  \
    \          hist[letter] = 1\n        end\n    end\n    # Return the dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxhjeo2i1.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpxhjeo2i1.jl:23\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpxhjeo2i1.jl:34 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxhjeo2i1.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpxhjeo2i1.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpxhjeo2i1.jl:23\\n   [3] macro expansion\\n     @ /tmp/tmpxhjeo2i1.jl:35\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxhjeo2i1.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpxhjeo2i1.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb0bywtip.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpb0bywtip.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb0bywtip.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpb0bywtip.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb0bywtip.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb0bywtip.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb0bywtip.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\n    return Dict()\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7pcpuykg.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7pcpuykg.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7pcpuykg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7pcpuykg.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7pcpuykg.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7pcpuykg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7pcpuykg.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7pcpuykg.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7pcpuykg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7pcpuykg.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7pcpuykg.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7pcpuykg.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7pcpuykg.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7pcpuykg.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7pcpuykg.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdtdpyps5.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdtdpyps5.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdtdpyps5.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpdtdpyps5.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdtdpyps5.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdtdpyps5.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdtdpyps5.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Initialize dictionary\n    hist = Dict{String, Int64}()\n    # Split\
    \ string into array of letters\n    letters = split(test)\n    # Iterate through\
    \ array of letters\n    for letter in letters\n        # If letter is not in dictionary,\
    \ add it with value 1\n        if !haskey(hist, letter)\n            hist[letter]\
    \ = 1\n        # If letter is in dictionary, increment value by 1\n        else\n\
    \            hist[letter] += 1\n        end\n    end\n    # Return dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3m3nmf7b.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3m3nmf7b.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3m3nmf7b.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3m3nmf7b.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3m3nmf7b.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3m3nmf7b.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3m3nmf7b.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxacqdcfj.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxacqdcfj.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxacqdcfj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpxacqdcfj.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxacqdcfj.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxacqdcfj.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxacqdcfj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwnwelavi.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwnwelavi.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnwelavi.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwnwelavi.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwnwelavi.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwnwelavi.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwnwelavi.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create an empty dictionary\n    hist = Dict{String, Int64}()\n    #\
    \ Split the string into a vector of strings\n    words = split(test)\n    # Iterate\
    \ over the vector of strings\n    for word in words\n        # If the word is\
    \ not in the dictionary, add it with a count of 1\n        if !haskey(hist, word)\n\
    \            hist[word] = 1\n        # If the word is in the dictionary, increment\
    \ the count\n        else\n            hist[word] += 1\n        end\n    end\n\
    \    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpun3apfp6.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpun3apfp6.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpun3apfp6.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpun3apfp6.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpun3apfp6.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpun3apfp6.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpun3apfp6.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    return Dict(test[i] => count(test, test[i]) for i in 1:length(test))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp11tyt3pg.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: objects of type String are not callable\\n  Stacktrace:\\\
    n    [1] _simple_count(pred::String, itr::Char, init::Int64)\\n      @ Base ./reduce.jl:970\\\
    n    [2] count(f::String, itr::Char; init::Int64)\\n      @ Base ./reduce.jl:965\\\
    n    [3] count(f::String, itr::Char)\\n      @ Base ./reduce.jl:965\\n    [4]\
    \ (::var\"#1#2\"{String})(i::Int64)\\n      @ Main ./none:0\\n    [5] iterate\\\
    n      @ ./generator.jl:47 [inlined]\\n    [6] _all\\n      @ ./reduce.jl:922\
    \ [inlined]\\n    [7] all\\n      @ ./reduce.jl:918 [inlined]\\n    [8] Dict(kv::Base.Generator{UnitRange{Int64},\
    \ var\"#1#2\"{String}})\\n      @ Base ./dict.jl:131\\n    [9] histogram(test::String)\\\
    n      @ Main /tmp/tmp11tyt3pg.jl:14\\n   [10] macro expansion\\n      @ /tmp/tmp11tyt3pg.jl:21\
    \ [inlined]\\n   [11] macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [12] top-level scope\\n      @ /tmp/tmp11tyt3pg.jl:20\\n  \\\
    n  caused by: MethodError: objects of type String are not callable\\n  Stacktrace:\\\
    n    [1] _simple_count(pred::String, itr::Char, init::Int64)\\n      @ Base ./reduce.jl:970\\\
    n    [2] count(f::String, itr::Char; init::Int64)\\n      @ Base ./reduce.jl:965\\\
    n    [3] count(f::String, itr::Char)\\n      @ Base ./reduce.jl:965\\n    [4]\
    \ (::var\"#1#2\"{String})(i::Int64)\\n      @ Main ./none:0\\n    [5] iterate\\\
    n      @ ./generator.jl:47 [inlined]\\n    [6] grow_to!\\n      @ ./dict.jl:140\
    \ [inlined]\\n    [7] dict_with_eltype\\n      @ ./abstractdict.jl:548 [inlined]\\\
    n    [8] Dict(kv::Base.Generator{UnitRange{Int64}, var\"#1#2\"{String}})\\n  \
    \    @ Base ./dict.jl:129\\n    [9] histogram(test::String)\\n      @ Main /tmp/tmp11tyt3pg.jl:14\\\
    n   [10] macro expansion\\n      @ /tmp/tmp11tyt3pg.jl:21 [inlined]\\n   [11]\
    \ macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [12] top-level "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create an empty dictionary\n    hist = Dict{String, Int64}()\n    #\
    \ Split the string into a vector of strings\n    words = split(test)\n    # Iterate\
    \ over the vector of strings\n    for word in words\n        # If the word is\
    \ not in the dictionary, add it with a count of 1\n        if !haskey(hist, word)\n\
    \            hist[word] = 1\n        # If the word is in the dictionary, increment\
    \ the count\n        else\n            hist[word] += 1\n        end\n    end\n\
    \    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx1eop0vq.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpx1eop0vq.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1eop0vq.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpx1eop0vq.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx1eop0vq.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1eop0vq.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx1eop0vq.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if c != ' '\n\
    \            if haskey(hist, c)\n                hist[c] += 1\n            else\n\
    \                hist[c] = 1\n            end\n        end\n    end\n    return\
    \ hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp98hz43nk.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmp98hz43nk.jl:20\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp98hz43nk.jl:31 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp98hz43nk.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp98hz43nk.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp98hz43nk.jl:20\\n   [3] macro expansion\\n     @ /tmp/tmp98hz43nk.jl:32\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp98hz43nk.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmp98hz43nk.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmkqz4h0w.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmkqz4h0w.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmkqz4h0w.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmkqz4h0w.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmkqz4h0w.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmkqz4h0w.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmkqz4h0w.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjv12ai4r.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjv12ai4r.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjv12ai4r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpjv12ai4r.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjv12ai4r.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjv12ai4r.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjv12ai4r.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm31poug1.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmpm31poug1.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpm31poug1.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm31poug1.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpm31poug1.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmpm31poug1.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpm31poug1.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm31poug1.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpm31poug1.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Split the string into an array of characters\n    letters = split(test,\
    \ \" \")\n    # Create a dictionary of the characters and their counts\n    counts\
    \ = Dict{String, Int64}()\n    for letter in letters\n        counts[letter] =\
    \ get(counts, letter, 0) + 1\n    end\n    # Create a dictionary of the maximum\
    \ counts and their corresponding characters\n    max_counts = Dict{Int64, Array{String,\
    \ 1}}()\n    for (letter, count) in counts\n        max_counts[count] = get(max_counts,\
    \ count, [])\n        push!(max_counts[count], letter)\n    end\n    # Return\
    \ the dictionary of the maximum counts and their corresponding characters\n  \
    \  return max_counts[maximum(keys(max_counts))]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp17v85t8j.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Vector{String} to an\
    \ object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmp17v85t8j.jl:28\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp17v85t8j.jl:35 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp17v85t8j.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp17v85t8j.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Vector{String} to an object of type Dict{String,\
    \ Int64}\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict)\
    \ where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmp17v85t8j.jl:28\\n   [2] macro expansion\\n     @ /tmp/tmp17v85t8j.jl:36\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp17v85t8j.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp17v85t8j.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type Vector{String}\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    con"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create an empty dictionary\n    hist = Dict{String, Int64}()\n    #\
    \ iterate through the string\n    for letter in test\n        # if the letter\
    \ is already in the dictionary, increment the count\n        if letter in keys(hist)\n\
    \            hist[letter] += 1\n        # if the letter is not in the dictionary,\
    \ add it and set the count to 1\n        else\n            hist[letter] = 1\n\
    \        end\n    end\n    # return the dictionary\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1l4q1f6a.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmp1l4q1f6a.jl:23\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp1l4q1f6a.jl:34 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1l4q1f6a.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp1l4q1f6a.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp1l4q1f6a.jl:23\\n   [3] macro expansion\\n     @ /tmp/tmp1l4q1f6a.jl:35\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1l4q1f6a.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp1l4q1f6a.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    test = split(test)\n    hist = Dict{String, Int64}()\n    for i in test\n\
    \        if i in keys(hist)\n            hist[i] += 1\n        else\n        \
    \    hist[i] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3ww8kw7h.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3ww8kw7h.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3ww8kw7h.jl:29\ntest set: Test\
    \ Failed at /tmp/tmp3ww8kw7h.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3ww8kw7h.jl:34 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3ww8kw7h.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3ww8kw7h.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if c in keys(hist)\n\
    \            hist[c] += 1\n        else\n            hist[c] = 1\n        end\n\
    \    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2bafjemb.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmp2bafjemb.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp2bafjemb.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2bafjemb.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp2bafjemb.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp2bafjemb.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmp2bafjemb.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp2bafjemb.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp2bafjemb.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   if letter in keys(letters)\n            letters[letter] += 1\n        else\n\
    \            letters[letter] = 1\n        end\n    end\n    return letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfa5oeakw.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfa5oeakw.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfa5oeakw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfa5oeakw.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfa5oeakw.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfa5oeakw.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfa5oeakw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create an empty dictionary\n    hist = Dict{String, Int64}()\n    #\
    \ Split the string into a vector of words\n    words = split(test)\n    # Iterate\
    \ over the vector of words\n    for word in words\n        # If the word is not\
    \ in the dictionary, add it\n        if !haskey(hist, word)\n            hist[word]\
    \ = 1\n        # If the word is in the dictionary, increment the count\n     \
    \   else\n            hist[word] += 1\n        end\n    end\n    # Return the\
    \ dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8d4a664j.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8d4a664j.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8d4a664j.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8d4a664j.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8d4a664j.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8d4a664j.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8d4a664j.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_xn46usw.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_xn46usw.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_xn46usw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_xn46usw.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_xn46usw.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_xn46usw.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_xn46usw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    if test == \"\"\n        return Dict{String, Int64}()\n    end\n    hist\
    \ = Dict{String, Int64}()\n    for c in test\n        if haskey(hist, c)\n   \
    \         hist[c] += 1\n        else\n            hist[c] = 1\n        end\n \
    \   end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppkf321bh.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmppkf321bh.jl:22\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmppkf321bh.jl:32 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppkf321bh.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmppkf321bh.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmppkf321bh.jl:22\\n   [3] macro expansion\\n     @ /tmp/tmppkf321bh.jl:33\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmppkf321bh.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmppkf321bh.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for c in test\n        if c in keys(hist)\n       \
    \     hist[c] += 1\n        else\n            hist[c] = 1\n        end\n    end\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptgy6l0dl.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\\n     @ Base ./dict.jl:104\\\
    n   [3] convert\\n     @ ./abstractdict.jl:526 [inlined]\\n   [4] histogram(test::String)\\\
    n     @ Main /tmp/tmptgy6l0dl.jl:22\\n   [5] macro expansion\\n     @ /tmp/tmptgy6l0dl.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmptgy6l0dl.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmptgy6l0dl.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] Dict{String, Int64}(kv::Dict{Any,\
    \ Any})\\n     @ Base ./dict.jl:104\\n   [3] convert\\n     @ ./abstractdict.jl:526\
    \ [inlined]\\n   [4] histogram(test::String)\\n     @ Main /tmp/tmptgy6l0dl.jl:22\\\
    n   [5] macro expansion\\n     @ /tmp/tmptgy6l0dl.jl:30 [inlined]\\n   [6] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/ju"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram = Dict()\n    for letter in split(test)\n        if haskey(histogram,\
    \ letter)\n            histogram[letter] += 1\n        else\n            histogram[letter]\
    \ = 1\n        end\n    end\n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpghebf_pt.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpghebf_pt.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpghebf_pt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpghebf_pt.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpghebf_pt.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpghebf_pt.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpghebf_pt.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmk0kzzol.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmk0kzzol.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmk0kzzol.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmk0kzzol.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmk0kzzol.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmk0kzzol.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmk0kzzol.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8qity784.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8qity784.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qity784.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8qity784.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8qity784.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qity784.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8qity784.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # initialize an empty dictionary\n    hist = Dict{String, Int64}()\n \
    \   # split the string into a vector of characters\n    chars = split(test)\n\
    \    # loop over the characters\n    for c in chars\n        # if the character\
    \ is not in the dictionary, add it\n        if !haskey(hist, c)\n            hist[c]\
    \ = 1\n        # otherwise, increment the count\n        else\n            hist[c]\
    \ += 1\n        end\n    end\n    # return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoi1hmp0q.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpoi1hmp0q.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoi1hmp0q.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpoi1hmp0q.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoi1hmp0q.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoi1hmp0q.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoi1hmp0q.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n       \
    \     hist[c] += 1\n        else\n            hist[c] = 1\n        end\n    end\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqatxeq1z.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\\n     @ Base ./dict.jl:104\\\
    n   [3] convert\\n     @ ./abstractdict.jl:526 [inlined]\\n   [4] histogram(test::String)\\\
    n     @ Main /tmp/tmpqatxeq1z.jl:22\\n   [5] macro expansion\\n     @ /tmp/tmpqatxeq1z.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpqatxeq1z.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpqatxeq1z.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] Dict{String, Int64}(kv::Dict{Any,\
    \ Any})\\n     @ Base ./dict.jl:104\\n   [3] convert\\n     @ ./abstractdict.jl:526\
    \ [inlined]\\n   [4] histogram(test::String)\\n     @ Main /tmp/tmpqatxeq1z.jl:22\\\
    n   [5] macro expansion\\n     @ /tmp/tmpqatxeq1z.jl:30 [inlined]\\n   [6] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/ju"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in test\n        if letter in keys(hist)\n\
    \            hist[letter] += 1\n        else\n            hist[letter] = 1\n \
    \       end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqi09kzu7.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\\n     @ Base ./dict.jl:104\\\
    n   [3] convert\\n     @ ./abstractdict.jl:526 [inlined]\\n   [4] histogram(test::String)\\\
    n     @ Main /tmp/tmpqi09kzu7.jl:22\\n   [5] macro expansion\\n     @ /tmp/tmpqi09kzu7.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpqi09kzu7.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpqi09kzu7.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] Dict{String, Int64}(kv::Dict{Any,\
    \ Any})\\n     @ Base ./dict.jl:104\\n   [3] convert\\n     @ ./abstractdict.jl:526\
    \ [inlined]\\n   [4] histogram(test::String)\\n     @ Main /tmp/tmpqi09kzu7.jl:22\\\
    n   [5] macro expansion\\n     @ /tmp/tmpqi09kzu7.jl:30 [inlined]\\n   [6] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/ju"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplnjgehng.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmplnjgehng.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplnjgehng.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplnjgehng.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplnjgehng.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplnjgehng.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplnjgehng.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary\n    hist = Dict{String, Int64}()\n    # split the\
    \ string into a vector of strings\n    words = split(test)\n    # loop over the\
    \ vector\n    for word in words\n        # if the word is not in the dictionary,\
    \ add it\n        if !haskey(hist, word)\n            hist[word] = 1\n       \
    \ # if the word is in the dictionary, increment the count\n        else\n    \
    \        hist[word] += 1\n        end\n    end\n    # return the dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmes5a2lu.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmes5a2lu.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmes5a2lu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpmes5a2lu.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmes5a2lu.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmes5a2lu.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmes5a2lu.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   if haskey(letters, letter)\n            letters[letter] += 1\n        else\n\
    \            letters[letter] = 1\n        end\n    end\n    return letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoi9tr6w8.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpoi9tr6w8.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoi9tr6w8.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpoi9tr6w8.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoi9tr6w8.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoi9tr6w8.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoi9tr6w8.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptz_k02m1.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmptz_k02m1.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmptz_k02m1.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptz_k02m1.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmptz_k02m1.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmptz_k02m1.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmptz_k02m1.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptz_k02m1.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmptz_k02m1.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx1zx58cj.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpx1zx58cj.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1zx58cj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpx1zx58cj.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx1zx58cj.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx1zx58cj.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx1zx58cj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwp2n20q_.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwp2n20q_.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwp2n20q_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwp2n20q_.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwp2n20q_.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwp2n20q_.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwp2n20q_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8sxbc5d0.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8sxbc5d0.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8sxbc5d0.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp8sxbc5d0.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8sxbc5d0.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8sxbc5d0.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8sxbc5d0.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n       \
    \     hist[c] += 1\n        else\n            hist[c] = 1\n        end\n    end\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw2b3de0w.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\\n     @ Base ./dict.jl:104\\\
    n   [3] convert\\n     @ ./abstractdict.jl:526 [inlined]\\n   [4] histogram(test::String)\\\
    n     @ Main /tmp/tmpw2b3de0w.jl:22\\n   [5] macro expansion\\n     @ /tmp/tmpw2b3de0w.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpw2b3de0w.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpw2b3de0w.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] Dict{String, Int64}(kv::Dict{Any,\
    \ Any})\\n     @ Base ./dict.jl:104\\n   [3] convert\\n     @ ./abstractdict.jl:526\
    \ [inlined]\\n   [4] histogram(test::String)\\n     @ Main /tmp/tmpw2b3de0w.jl:22\\\
    n   [5] macro expansion\\n     @ /tmp/tmpw2b3de0w.jl:30 [inlined]\\n   [6] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/ju"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary with the letters as keys and the count as values\n\
    \    hist = Dict()\n    for letter in test\n        if letter in keys(hist)\n\
    \            hist[letter] += 1\n        else\n            hist[letter] = 1\n \
    \       end\n    end\n    # find the maximum value\n    max_value = maximum(values(hist))\n\
    \    # create a dictionary with the letters that have the maximum value as keys\
    \ and the maximum value as values\n    hist_max = Dict()\n    for key in keys(hist)\n\
    \        if hist[key] == max_value\n            hist_max[key] = max_value\n  \
    \      end\n    end\n    return hist_max\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnjzn41ak.jl:39\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:374\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:526 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpnjzn41ak.jl:32\n   [5] macro\
    \ expansion\n     @ /tmp/tmpnjzn41ak.jl:39 [inlined]\n   [6] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmpnjzn41ak.jl:38\ntest set:\
    \ Error During Test at /tmp/tmpnjzn41ak.jl:40\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:374\n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\n \
    \    @ Base ./dict.jl:104\n   [3] convert\n     @ ./abstractdict.jl:526 [inlined]\n\
    \   [4] histogram(test::String)\n     @ Main /tmp/tmpnjzn41ak.jl:32\n   [5] macro\
    \ expansion\n     @ /tmp/tmpnjzn41ak.jl:40 [inlined]\n   [6] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnjzn41ak.jl:36\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create a dictionary\n    hist = Dict{String, Int64}()\n    # Split the\
    \ string into an array of words\n    words = split(test)\n    # For each word\
    \ in the array\n    for word in words\n        # If the word is already in the\
    \ dictionary\n        if haskey(hist, word)\n            # Increment the count\n\
    \            hist[word] += 1\n        else\n            # Add the word to the\
    \ dictionary with a count of 1\n            hist[word] = 1\n        end\n    end\n\
    \    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8jv2kcax.jl:38\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8jv2kcax.jl:38 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8jv2kcax.jl:36\ntest set: Test\
    \ Failed at /tmp/tmp8jv2kcax.jl:41\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8jv2kcax.jl:41 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8jv2kcax.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8jv2kcax.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   if haskey(letters, letter)\n            letters[letter] += 1\n        else\n\
    \            letters[letter] = 1\n        end\n    end\n    return letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwfp2sciw.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwfp2sciw.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfp2sciw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwfp2sciw.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwfp2sciw.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfp2sciw.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwfp2sciw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # initialize dictionary\n    hist = Dict{String, Int64}()\n    # iterate\
    \ through each letter\n    for letter in test\n        # if the letter is not\
    \ in the dictionary, add it\n        if !haskey(hist, letter)\n            hist[letter]\
    \ = 1\n        # if the letter is in the dictionary, increment the count\n   \
    \     else\n            hist[letter] += 1\n        end\n    end\n    # return\
    \ the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphilnow94.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type Char to an object of type String\n  Closest\
    \ candidates are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:374\n   [2] histogram(test::String)\n     @ Main /tmp/tmphilnow94.jl:20\n\
    \   [3] macro expansion\n     @ /tmp/tmphilnow94.jl:34 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphilnow94.jl:33\ntest set:\
    \ Error During Test at /tmp/tmphilnow94.jl:35\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\n  Closest candidates\
    \ are:\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\n \
    \   convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\n\
    \    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\n\
    \    ...\n  Stacktrace:\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\n\
    \     @ Base ./dict.jl:374\n   [2] histogram(test::String)\n     @ Main /tmp/tmphilnow94.jl:20\n\
    \   [3] macro expansion\n     @ /tmp/tmphilnow94.jl:35 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphilnow94.jl:33\ntest set:\
    \ Error During Test at /tmp/tmphilnow94.jl:36\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  MethodError: Cannot `conve"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphilnow94.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in test\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp286h7q1w.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmp286h7q1w.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp286h7q1w.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp286h7q1w.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp286h7q1w.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp286h7q1w.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmp286h7q1w.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp286h7q1w.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp286h7q1w.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5yxohpsb.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5yxohpsb.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5yxohpsb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp5yxohpsb.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5yxohpsb.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5yxohpsb.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5yxohpsb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create a dictionary with the letters as keys and the number of occurrences\
    \ as values\n    hist = Dict{String, Int64}()\n    for letter in split(test)\n\
    \        hist[letter] = get(hist, letter, 0) + 1\n    end\n    \n    # Find the\
    \ maximum value in the dictionary\n    max_value = maximum(values(hist))\n   \
    \ \n    # Create a dictionary with the letters as keys and the number of occurrences\
    \ as values\n    hist_max = Dict{String, Int64}()\n    for (key, value) in hist\n\
    \        if value == max_value\n            hist_max[key] = value\n        end\n\
    \    end\n    \n    return hist_max\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp42zv77s3.jl:44\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:309\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:328\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:355 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:354\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#214\n      @ ./reduce.jl:160\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:160 [inlined]\n   [10] #mapreduce#218\n\
    \      @ ./reduce.jl:287 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:287\
    \ [inlined]\n   [12] #maximum#228\n      @ ./reduce.jl:731 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:731 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmp42zv77s3.jl:21\n   [15] macro expansion\n      @ /tmp/tmp42zv77s3.jl:44\
    \ [inlined]\n   [16] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [17] top-level scope\n      @ /tmp/tmp42zv77s3.jl:37\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp42zv77s3.jl:35\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6upwv3nw.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6upwv3nw.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6upwv3nw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6upwv3nw.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6upwv3nw.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6upwv3nw.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6upwv3nw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbf0ie_39.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbf0ie_39.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbf0ie_39.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpbf0ie_39.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbf0ie_39.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbf0ie_39.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbf0ie_39.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuk8hlt7k.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpuk8hlt7k.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuk8hlt7k.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuk8hlt7k.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuk8hlt7k.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuk8hlt7k.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuk8hlt7k.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyszx_evt.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyszx_evt.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyszx_evt.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyszx_evt.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyszx_evt.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyszx_evt.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyszx_evt.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create a dictionary to store the letters and their counts\n    histogram\
    \ = Dict{String, Int64}()\n    # Split the string into a vector of letters\n \
    \   letters = split(test)\n    # Loop through the letters\n    for letter in letters\n\
    \        # If the letter is already in the dictionary, increment the count\n \
    \       if haskey(histogram, letter)\n            histogram[letter] += 1\n   \
    \     # If the letter is not in the dictionary, add it with a count of 1\n   \
    \     else\n            histogram[letter] = 1\n        end\n    end\n    # Return\
    \ the dictionary\n    return histogram\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjyogkehu.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjyogkehu.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjyogkehu.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpjyogkehu.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjyogkehu.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjyogkehu.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjyogkehu.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    #initialize empty dictionary\n    hist = Dict()\n    #split string into\
    \ array of characters\n    test = split(test)\n    #iterate through array\n  \
    \  for i in test\n        #if character is not in dictionary, add it with value\
    \ 1\n        if !haskey(hist, i)\n            hist[i] = 1\n        #if character\
    \ is in dictionary, increment value by 1\n        else\n            hist[i] +=\
    \ 1\n        end\n    end\n    #return dictionary\n    return hist\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpewb5uoz1.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpewb5uoz1.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewb5uoz1.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpewb5uoz1.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpewb5uoz1.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewb5uoz1.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewb5uoz1.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        hist[letter]\
    \ = get(hist, letter, 0) + 1\n    end\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_3xlg595.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_3xlg595.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_3xlg595.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_3xlg595.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_3xlg595.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_3xlg595.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_3xlg595.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary with the letters as keys and the count as values\n\
    \    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    # create a dictionary with the count as keys\
    \ and the letters as values\n    hist_count = Dict{Int64, String}()\n    for (letter,\
    \ count) in hist\n        if haskey(hist_count, count)\n            hist_count[count]\
    \ = \"$(hist_count[count]) $letter\"\n        else\n            hist_count[count]\
    \ = \"$letter\"\n        end\n    end\n    # find the maximum count\n    max_count\
    \ = maximum(collect(keys(hist_count)))\n    # create a dictionary with the letters\
    \ as keys and the count as values\n    hist_max = Dict{String, Int64}()\n    for\
    \ letter in split(hist_count[max_count])\n        hist_max[letter] = max_count\n\
    \    end\n    return hist_max\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpaxmw5ad2.jl:52\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:309\n    [3] mapreduce_empty(#unused#::typeof(identity),\
    \ op::Function, T::Type)\n      @ Base ./reduce.jl:343\n    [4] reduce_empty(op::Base.MappingRF{typeof(identity),\
    \ typeof(max)}, #unused#::Type{Int64})\n      @ Base ./reduce.jl:329\n    [5]\
    \ reduce_empty_iter\n      @ ./reduce.jl:355 [inlined]\n    [6] mapreduce_empty_iter(f::Function,\
    \ op::Function, itr::Vector{Int64}, ItrEltype::Base.HasEltype)\n      @ Base ./reduce.jl:351\n\
    \    [7] _mapreduce\n      @ ./reduce.jl:400 [inlined]\n    [8] _mapreduce_dim\n\
    \      @ ./reducedim.jl:318 [inlined]\n    [9] #mapreduce#678\n      @ ./reducedim.jl:310\
    \ [inlined]\n   [10] mapreduce\n      @ ./reducedim.jl:310 [inlined]\n   [11]\
    \ #_maximum#696\n      @ ./reducedim.jl:878 [inlined]\n   [12] _maximum\n    \
    \  @ ./reducedim.jl:878 [inlined]\n   [13] #_maximum#695\n      @ ./reducedim.jl:877\
    \ [inlined]\n   [14] _maximum\n      @ ./reducedim.jl:877 [inlined]\n   [15] #maximum#693\n\
    \      @ ./reducedim.jl:873 [inlined]\n   [16] maximum\n      @ ./reducedim.jl:873\
    \ [inlined]\n   [17] histogram(test::String)\n      @ Main /tmp/tmpaxmw5ad2.jl:33\n\
    \   [18] macro expansion\n      @ /tmp/tmpaxmw5ad2.jl:52 [inlined]\n   [19] macro\
    \ expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [20] top-level scope\n      @ /tmp/tmpaxmw5ad2.jl:45\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaxmw5ad2.jl:43\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4g1vxqx9.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4g1vxqx9.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g1vxqx9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp4g1vxqx9.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4g1vxqx9.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g1vxqx9.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4g1vxqx9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   if haskey(letters, letter)\n            letters[letter] += 1\n        else\n\
    \            letters[letter] = 1\n        end\n    end\n    return letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmponvvqklc.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmponvvqklc.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmponvvqklc.jl:28\ntest set: Test\
    \ Failed at /tmp/tmponvvqklc.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmponvvqklc.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmponvvqklc.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmponvvqklc.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3cc0ncoo.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmp3cc0ncoo.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp3cc0ncoo.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3cc0ncoo.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp3cc0ncoo.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp3cc0ncoo.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmp3cc0ncoo.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp3cc0ncoo.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp3cc0ncoo.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Initialize the dictionary\n    hist = Dict{String, Int64}()\n    # Split\
    \ the string into a vector of strings\n    test_vec = split(test)\n    # Iterate\
    \ over the vector\n    for i in test_vec\n        # If the letter is already in\
    \ the dictionary, increment the count\n        if haskey(hist, i)\n          \
    \  hist[i] += 1\n        # If the letter is not in the dictionary, add it with\
    \ a count of 1\n        else\n            hist[i] = 1\n        end\n    end\n\
    \    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1dq4ff8y.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1dq4ff8y.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dq4ff8y.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp1dq4ff8y.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1dq4ff8y.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1dq4ff8y.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1dq4ff8y.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6w4e228z.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6w4e228z.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6w4e228z.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6w4e228z.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6w4e228z.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6w4e228z.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6w4e228z.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp74h_bzrt.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmp74h_bzrt.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp74h_bzrt.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp74h_bzrt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp74h_bzrt.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp74h_bzrt.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmp74h_bzrt.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp74h_bzrt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp74h_bzrt.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk3_bk5tx.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmpk3_bk5tx.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpk3_bk5tx.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk3_bk5tx.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpk3_bk5tx.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmpk3_bk5tx.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpk3_bk5tx.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk3_bk5tx.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpk3_bk5tx.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary to store the letters and their counts\n    hist\
    \ = Dict{String, Int64}()\n    # iterate over the letters in the string\n    for\
    \ letter in split(test)\n        # if the letter is not in the dictionary, add\
    \ it with a count of 1\n        if !haskey(hist, letter)\n            hist[letter]\
    \ = 1\n        # if the letter is in the dictionary, increment the count\n   \
    \     else\n            hist[letter] += 1\n        end\n    end\n    # return\
    \ the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb1104_z3.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpb1104_z3.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb1104_z3.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpb1104_z3.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb1104_z3.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb1104_z3.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb1104_z3.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = split(test)\n    hist = Dict{String, Int64}()\n    for letter\
    \ in letters\n        if haskey(hist, letter)\n            hist[letter] += 1\n\
    \        else\n            hist[letter] = 1\n        end\n    end\n    return\
    \ hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplnta6pwz.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmplnta6pwz.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplnta6pwz.jl:29\ntest set: Test\
    \ Failed at /tmp/tmplnta6pwz.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplnta6pwz.jl:34 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplnta6pwz.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplnta6pwz.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Initialize the dictionary\n    hist = Dict{String, Int64}()\n    # Split\
    \ the string into an array of letters\n    letters = split(test)\n    # Iterate\
    \ over the array\n    for letter in letters\n        # If the letter is not in\
    \ the dictionary, initialize it with a count of 1\n        if !haskey(hist, letter)\n\
    \            hist[letter] = 1\n        # Otherwise, increment the count\n    \
    \    else\n            hist[letter] += 1\n        end\n    end\n    # Return the\
    \ dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpulbxwz2e.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpulbxwz2e.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpulbxwz2e.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpulbxwz2e.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpulbxwz2e.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpulbxwz2e.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpulbxwz2e.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6ba1m_6f.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmp6ba1m_6f.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp6ba1m_6f.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6ba1m_6f.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp6ba1m_6f.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmp6ba1m_6f.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp6ba1m_6f.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6ba1m_6f.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp6ba1m_6f.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # split the string into a vector of characters\n    letters = split(test)\n\
    \    # create a dictionary of the letters\n    letter_dict = Dict{String, Int64}()\n\
    \    for letter in letters\n        if letter in keys(letter_dict)\n         \
    \   letter_dict[letter] += 1\n        else\n            letter_dict[letter] =\
    \ 1\n        end\n    end\n    # find the maximum value in the dictionary\n  \
    \  max_value = maximum(values(letter_dict))\n    # create a new dictionary with\
    \ the letters that have the maximum value\n    max_dict = Dict{String, Int64}()\n\
    \    for (key, value) in letter_dict\n        if value == max_value\n        \
    \    max_dict[key] = value\n        end\n    end\n    return max_dict\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b\
    \ a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppctg9zqu.jl:47\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:309\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:328\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:355 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:354\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#214\n      @ ./reduce.jl:160\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:160 [inlined]\n   [10] #mapreduce#218\n\
    \      @ ./reduce.jl:287 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:287\
    \ [inlined]\n   [12] #maximum#228\n      @ ./reduce.jl:731 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:731 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmppctg9zqu.jl:26\n   [15] macro expansion\n      @ /tmp/tmppctg9zqu.jl:47\
    \ [inlined]\n   [16] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [17] top-level scope\n      @ /tmp/tmppctg9zqu.jl:40\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppctg9zqu.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Split the string into an array of characters\n    letters = split(test)\n\
    \    # Initialize the dictionary\n    hist = Dict{String, Int64}()\n    # Iterate\
    \ over the array of characters\n    for letter in letters\n        # If the letter\
    \ is not in the dictionary, add it with a count of 1\n        if !haskey(hist,\
    \ letter)\n            hist[letter] = 1\n        # If the letter is in the dictionary,\
    \ increment the count\n        else\n            hist[letter] += 1\n        end\n\
    \    end\n    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpir6tfzj0.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpir6tfzj0.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpir6tfzj0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpir6tfzj0.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpir6tfzj0.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpir6tfzj0.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpir6tfzj0.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Your code here\n    return Dict{String, Int64}()\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd6adha6n.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd6adha6n.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd6adha6n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd6adha6n.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd6adha6n.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd6adha6n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd6adha6n.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd6adha6n.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd6adha6n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd6adha6n.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd6adha6n.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd6adha6n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd6adha6n.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpd6adha6n.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd6adha6n.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   if haskey(letters, letter)\n            letters[letter] += 1\n        else\n\
    \            letters[letter] = 1\n        end\n    end\n    return letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9m56q949.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9m56q949.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9m56q949.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9m56q949.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9m56q949.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9m56q949.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9m56q949.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpekwq084g.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmpekwq084g.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpekwq084g.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpekwq084g.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpekwq084g.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmpekwq084g.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpekwq084g.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpekwq084g.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpekwq084g.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary\n    hist = Dict{String, Int64}()\n    # split the\
    \ string into a vector of strings\n    words = split(test)\n    # iterate over\
    \ the vector\n    for word in words\n        # if the word is not in the dictionary,\
    \ add it with a count of 1\n        if !haskey(hist, word)\n            hist[word]\
    \ = 1\n        # otherwise, increment the count\n        else\n            hist[word]\
    \ += 1\n        end\n    end\n    # return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp06hh6vlw.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp06hh6vlw.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp06hh6vlw.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp06hh6vlw.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp06hh6vlw.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp06hh6vlw.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp06hh6vlw.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create an empty dictionary\n    hist = Dict{String, Int64}()\n    #\
    \ Split the string into an array of characters\n    test_array = split(test)\n\
    \    # Iterate through the array\n    for i in test_array\n        # If the character\
    \ is not in the dictionary, add it with a count of 1\n        if !haskey(hist,\
    \ i)\n            hist[i] = 1\n        # If the character is in the dictionary,\
    \ increment the count by 1\n        else\n            hist[i] += 1\n        end\n\
    \    end\n    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp58swceu2.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp58swceu2.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58swceu2.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp58swceu2.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp58swceu2.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58swceu2.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp58swceu2.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqppwjiab.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmpqppwjiab.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpqppwjiab.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqppwjiab.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqppwjiab.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmpqppwjiab.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpqppwjiab.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqppwjiab.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqppwjiab.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmvgtvvj2.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmvgtvvj2.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvgtvvj2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmvgtvvj2.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmvgtvvj2.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvgtvvj2.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmvgtvvj2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfhgkpd59.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfhgkpd59.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfhgkpd59.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpfhgkpd59.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfhgkpd59.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfhgkpd59.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfhgkpd59.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   if haskey(letters, letter)\n            letters[letter] += 1\n        else\n\
    \            letters[letter] = 1\n        end\n    end\n    return letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl25__3ll.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpl25__3ll.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl25__3ll.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpl25__3ll.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl25__3ll.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl25__3ll.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl25__3ll.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdoegdz8h.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpdoegdz8h.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpdoegdz8h.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdoegdz8h.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpdoegdz8h.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpdoegdz8h.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmpdoegdz8h.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdoegdz8h.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpdoegdz8h.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Initialize dictionary\n    hist = Dict{String, Int64}()\n    # Split\
    \ string into array of letters\n    letters = split(test)\n    # Loop through\
    \ letters\n    for letter in letters\n        # If letter is not in dictionary,\
    \ add it\n        if !haskey(hist, letter)\n            hist[letter] = 1\n   \
    \     # If letter is in dictionary, increment count\n        else\n          \
    \  hist[letter] += 1\n        end\n    end\n    # Return dictionary\n    return\
    \ hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbzldi9oi.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbzldi9oi.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbzldi9oi.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbzldi9oi.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbzldi9oi.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbzldi9oi.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbzldi9oi.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n       \
    \     hist[c] += 1\n        else\n            hist[c] = 1\n        end\n    end\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqjxsoa5v.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\\n     @ Base ./dict.jl:104\\\
    n   [3] convert\\n     @ ./abstractdict.jl:526 [inlined]\\n   [4] histogram(test::String)\\\
    n     @ Main /tmp/tmpqjxsoa5v.jl:22\\n   [5] macro expansion\\n     @ /tmp/tmpqjxsoa5v.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpqjxsoa5v.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpqjxsoa5v.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] Dict{String, Int64}(kv::Dict{Any,\
    \ Any})\\n     @ Base ./dict.jl:104\\n   [3] convert\\n     @ ./abstractdict.jl:526\
    \ [inlined]\\n   [4] histogram(test::String)\\n     @ Main /tmp/tmpqjxsoa5v.jl:22\\\
    n   [5] macro expansion\\n     @ /tmp/tmpqjxsoa5v.jl:30 [inlined]\\n   [6] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/ju"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_0pz7tpv.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_0pz7tpv.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0pz7tpv.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_0pz7tpv.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_0pz7tpv.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_0pz7tpv.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_0pz7tpv.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create an empty dictionary\n    hist = Dict{String, Int64}()\n    #\
    \ split the string into an array of words\n    words = split(test)\n    # loop\
    \ through the words\n    for word in words\n        # if the word is not in the\
    \ dictionary, add it\n        if !haskey(hist, word)\n            hist[word] =\
    \ 1\n        # otherwise, increment the count\n        else\n            hist[word]\
    \ += 1\n        end\n    end\n    # return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf6m92tjr.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpf6m92tjr.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf6m92tjr.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpf6m92tjr.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf6m92tjr.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf6m92tjr.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf6m92tjr.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram = Dict()\n    for letter in split(test)\n        if haskey(histogram,\
    \ letter)\n            histogram[letter] += 1\n        else\n            histogram[letter]\
    \ = 1\n        end\n    end\n    return histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkxsikq2d.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkxsikq2d.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkxsikq2d.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpkxsikq2d.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkxsikq2d.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkxsikq2d.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkxsikq2d.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary to store the letters and their count\n    hist =\
    \ Dict{String, Int64}()\n    # iterate over the string\n    for letter in test\n\
    \        # if the letter is not in the dictionary, add it\n        if !haskey(hist,\
    \ letter)\n            hist[letter] = 1\n        # if the letter is in the dictionary,\
    \ increment the count\n        else\n            hist[letter] += 1\n        end\n\
    \    end\n    # return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo4ay9agf.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpo4ay9agf.jl:20\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpo4ay9agf.jl:34 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo4ay9agf.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpo4ay9agf.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpo4ay9agf.jl:20\\n   [3] macro expansion\\n     @ /tmp/tmpo4ay9agf.jl:35\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo4ay9agf.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpo4ay9agf.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\n    return Dict()\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3qy4ze9z.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3qy4ze9z.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qy4ze9z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3qy4ze9z.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3qy4ze9z.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qy4ze9z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3qy4ze9z.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3qy4ze9z.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qy4ze9z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3qy4ze9z.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3qy4ze9z.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3qy4ze9z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3qy4ze9z.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3qy4ze9z.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3qy4ze9z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n   \
    \     if haskey(histogram, letter)\n            histogram[letter] += 1\n     \
    \   else\n            histogram[letter] = 1\n        end\n    end\n    return\
    \ histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp423rke82.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp423rke82.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp423rke82.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp423rke82.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp423rke82.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp423rke82.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp423rke82.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in split(test)\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt8keenvy.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpt8keenvy.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt8keenvy.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpt8keenvy.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt8keenvy.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt8keenvy.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt8keenvy.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\n    return Dict()\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7irvdph6.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7irvdph6.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7irvdph6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7irvdph6.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7irvdph6.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7irvdph6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7irvdph6.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7irvdph6.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7irvdph6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7irvdph6.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7irvdph6.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7irvdph6.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp7irvdph6.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp7irvdph6.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7irvdph6.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmcrglp2_.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmpmcrglp2_.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpmcrglp2_.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmcrglp2_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpmcrglp2_.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmpmcrglp2_.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpmcrglp2_.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmcrglp2_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpmcrglp2_.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqxaqkfv_.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqxaqkfv_.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqxaqkfv_.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpqxaqkfv_.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqxaqkfv_.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqxaqkfv_.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqxaqkfv_.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt2ljj73e.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpt2ljj73e.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt2ljj73e.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpt2ljj73e.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt2ljj73e.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt2ljj73e.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt2ljj73e.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7i39w0o6.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp7i39w0o6.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7i39w0o6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp7i39w0o6.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7i39w0o6.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7i39w0o6.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7i39w0o6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        hist[letter]\
    \ = get(hist, letter, 0) + 1\n    end\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_rtrvnc6.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_rtrvnc6.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_rtrvnc6.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp_rtrvnc6.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_rtrvnc6.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_rtrvnc6.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_rtrvnc6.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   if haskey(letters, letter)\n            letters[letter] += 1\n        else\n\
    \            letters[letter] = 1\n        end\n    end\n    return letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuq3fqdb2.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpuq3fqdb2.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuq3fqdb2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpuq3fqdb2.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuq3fqdb2.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuq3fqdb2.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuq3fqdb2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary\n    hist = Dict{String, Int64}()\n    # split the\
    \ string into a vector of strings\n    split_test = split(test)\n    # iterate\
    \ through the vector of strings\n    for i in split_test\n        # if the key\
    \ is not in the dictionary, add it\n        if !haskey(hist, i)\n            hist[i]\
    \ = 1\n        # if the key is in the dictionary, increment the value\n      \
    \  else\n            hist[i] += 1\n        end\n    end\n    # return the dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp08u8jqy5.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp08u8jqy5.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp08u8jqy5.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp08u8jqy5.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp08u8jqy5.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp08u8jqy5.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp08u8jqy5.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ letter in keys(hist)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp67an_s8g.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp67an_s8g.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp67an_s8g.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp67an_s8g.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp67an_s8g.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp67an_s8g.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp67an_s8g.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Split the string into a vector of characters\n    letters = split(test)\n\
    \    # Create a dictionary to store the results\n    hist = Dict{String, Int64}()\n\
    \    # Loop over the vector of characters\n    for letter in letters\n       \
    \ # If the letter is already in the dictionary, increment the count\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        # Otherwise, initialize\
    \ the count to 1\n        else\n            hist[letter] = 1\n        end\n  \
    \  end\n    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4xmst7o0.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp4xmst7o0.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4xmst7o0.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp4xmst7o0.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4xmst7o0.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4xmst7o0.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xmst7o0.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Initialize dictionary\n    hist = Dict{String, Int64}()\n    # Split\
    \ string into array of characters\n    test_array = split(test)\n    # Loop through\
    \ array of characters\n    for letter in test_array\n        # If letter is not\
    \ in dictionary, add it\n        if !haskey(hist, letter)\n            hist[letter]\
    \ = 1\n        # If letter is in dictionary, increment count\n        else\n \
    \           hist[letter] += 1\n        end\n    end\n    # Return dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpho_8rebc.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpho_8rebc.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpho_8rebc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpho_8rebc.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpho_8rebc.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpho_8rebc.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpho_8rebc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Initialize a dictionary\n    hist = Dict{String, Int64}()\n    # Split\
    \ the string into a vector of strings\n    test_vec = split(test)\n    # Iterate\
    \ through the vector\n    for i in test_vec\n        # If the letter is not in\
    \ the dictionary, add it\n        if !haskey(hist, i)\n            hist[i] = 1\n\
    \        # If the letter is in the dictionary, increment the count\n        else\n\
    \            hist[i] += 1\n        end\n    end\n    # Return the dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzopy9hpn.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzopy9hpn.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzopy9hpn.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpzopy9hpn.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzopy9hpn.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzopy9hpn.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzopy9hpn.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf3r1dlts.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpf3r1dlts.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3r1dlts.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpf3r1dlts.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf3r1dlts.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3r1dlts.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf3r1dlts.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary with all letters and their count\n    hist = Dict{String,\
    \ Int64}()\n    for letter in test\n        if letter in keys(hist)\n        \
    \    hist[letter] += 1\n        else\n            hist[letter] = 1\n        end\n\
    \    end\n    \n    # find the maximum count\n    max_count = 0\n    for count\
    \ in values(hist)\n        if count > max_count\n            max_count = count\n\
    \        end\n    end\n    \n    # create a dictionary with the letters that have\
    \ the maximum count\n    max_hist = Dict{String, Int64}()\n    for (letter, count)\
    \ in hist\n        if count == max_count\n            max_hist[letter] = count\n\
    \        end\n    end\n    \n    return max_hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpddb79u23.jl:47\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpddb79u23.jl:20\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpddb79u23.jl:47 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpddb79u23.jl:46\\ntest set:\
    \ Error During Test at /tmp/tmpddb79u23.jl:48\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpddb79u23.jl:20\\n   [3] macro expansion\\n     @ /tmp/tmpddb79u23.jl:48\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpddb79u23.jl:46\\ntest set:\
    \ Error During Test at /tmp/tmpddb79u23.jl:49\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsk43k0ro.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpsk43k0ro.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsk43k0ro.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpsk43k0ro.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsk43k0ro.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsk43k0ro.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsk43k0ro.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # TODO: implement the function\n    return Dict{String, Int64}()\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3l1lkz2k.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3l1lkz2k.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3l1lkz2k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3l1lkz2k.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3l1lkz2k.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3l1lkz2k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3l1lkz2k.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3l1lkz2k.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3l1lkz2k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3l1lkz2k.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3l1lkz2k.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3l1lkz2k.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3l1lkz2k.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp3l1lkz2k.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3l1lkz2k.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3j3d1shj.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3j3d1shj.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3j3d1shj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp3j3d1shj.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3j3d1shj.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3j3d1shj.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3j3d1shj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n       \
    \     hist[c] += 1\n        else\n            hist[c] = 1\n        end\n    end\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp14zli7_a.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\\n     @ Base ./dict.jl:104\\\
    n   [3] convert\\n     @ ./abstractdict.jl:526 [inlined]\\n   [4] histogram(test::String)\\\
    n     @ Main /tmp/tmp14zli7_a.jl:22\\n   [5] macro expansion\\n     @ /tmp/tmp14zli7_a.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp14zli7_a.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp14zli7_a.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] Dict{String, Int64}(kv::Dict{Any,\
    \ Any})\\n     @ Base ./dict.jl:104\\n   [3] convert\\n     @ ./abstractdict.jl:526\
    \ [inlined]\\n   [4] histogram(test::String)\\n     @ Main /tmp/tmp14zli7_a.jl:22\\\
    n   [5] macro expansion\\n     @ /tmp/tmp14zli7_a.jl:30 [inlined]\\n   [6] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/ju"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzwbb47in.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzwbb47in.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzwbb47in.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpzwbb47in.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzwbb47in.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzwbb47in.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzwbb47in.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6usdgb32.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6usdgb32.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6usdgb32.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp6usdgb32.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6usdgb32.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6usdgb32.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6usdgb32.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpawafxcff.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpawafxcff.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpawafxcff.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpawafxcff.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpawafxcff.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpawafxcff.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmpawafxcff.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpawafxcff.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpawafxcff.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Initialize dictionary\n    hist = Dict{String, Int64}()\n    # Split\
    \ string into array of letters\n    letters = split(test)\n    # Loop over letters\n\
    \    for letter in letters\n        # If letter is not in dictionary, add it with\
    \ value 1\n        if !haskey(hist, letter)\n            hist[letter] = 1\n  \
    \      # If letter is in dictionary, increment value by 1\n        else\n    \
    \        hist[letter] += 1\n        end\n    end\n    # Return dictionary\n  \
    \  return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpai96_661.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpai96_661.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpai96_661.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpai96_661.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpai96_661.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpai96_661.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpai96_661.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2n2v_d6v.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2n2v_d6v.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2n2v_d6v.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2n2v_d6v.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2n2v_d6v.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2n2v_d6v.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2n2v_d6v.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   if haskey(letters, letter)\n            letters[letter] += 1\n        else\n\
    \            letters[letter] = 1\n        end\n    end\n    return letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppf77wfjr.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppf77wfjr.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppf77wfjr.jl:28\ntest set: Test\
    \ Failed at /tmp/tmppf77wfjr.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppf77wfjr.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppf77wfjr.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppf77wfjr.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Initialize dictionary\n    hist = Dict{String, Int64}()\n    # Split\
    \ string into array of characters\n    test_array = split(test)\n    # Loop through\
    \ array\n    for i in test_array\n        # If character is not in dictionary,\
    \ add it with value 1\n        if !haskey(hist, i)\n            hist[i] = 1\n\
    \        # If character is in dictionary, increment value by 1\n        else\n\
    \            hist[i] += 1\n        end\n    end\n    # Return dictionary\n   \
    \ return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t\
    @test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3u9ljrp3.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3u9ljrp3.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3u9ljrp3.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp3u9ljrp3.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3u9ljrp3.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3u9ljrp3.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3u9ljrp3.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppo36p0mx.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError:\
    \ Cannot `convert` an object of type typeof(>) to an object of type Dict{String,\
    \ Int64}\n  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where\
    \ T<:AbstractDict at abstractdict.jl:523\n    convert(::Type{T}, !Matched::AbstractDict)\
    \ where T<:AbstractDict at abstractdict.jl:525\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\n    ...\n  Stacktrace:\n   [1] histogram(test::String)\n\
    \     @ Main /tmp/tmppo36p0mx.jl:13\n   [2] macro expansion\n     @ /tmp/tmppo36p0mx.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppo36p0mx.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppo36p0mx.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\n\
    \  Closest candidates are:\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\n    ...\n  Stacktrace:\n   [1] histogram(test::String)\n\
    \     @ Main /tmp/tmppo36p0mx.jl:13\n   [2] macro expansion\n     @ /tmp/tmppo36p0mx.jl:22\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmppo36p0mx.jl:20\ntest set:\
    \ Error During Test at /tmp/tmppo36p0mx.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abst"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppo36p0mx.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\n    return Dict()\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpixwuq6sv.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpixwuq6sv.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpixwuq6sv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpixwuq6sv.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpixwuq6sv.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpixwuq6sv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpixwuq6sv.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpixwuq6sv.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpixwuq6sv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpixwuq6sv.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpixwuq6sv.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpixwuq6sv.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpixwuq6sv.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpixwuq6sv.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpixwuq6sv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1ck4jtia.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmp1ck4jtia.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp1ck4jtia.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1ck4jtia.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1ck4jtia.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp1ck4jtia.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmp1ck4jtia.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1ck4jtia.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1ck4jtia.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_bb0g4vs.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmp_bb0g4vs.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp_bb0g4vs.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_bb0g4vs.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_bb0g4vs.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmp_bb0g4vs.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp_bb0g4vs.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_bb0g4vs.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_bb0g4vs.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary\n    hist = Dict{String, Int64}()\n    # split the\
    \ string into an array of words\n    words = split(test)\n    # loop over the\
    \ words\n    for word in words\n        # if the word is not in the dictionary,\
    \ add it with a count of 1\n        if !haskey(hist, word)\n            hist[word]\
    \ = 1\n        # otherwise, increment the count\n        else\n            hist[word]\
    \ += 1\n        end\n    end\n    # return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo86dwr4v.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpo86dwr4v.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo86dwr4v.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpo86dwr4v.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo86dwr4v.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo86dwr4v.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo86dwr4v.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # split string into array of characters\n    test_array = split(test,\
    \ \" \")\n    # create empty dictionary\n    hist = Dict{String, Int64}()\n  \
    \  # loop through array of characters\n    for i in test_array\n        # if character\
    \ is in dictionary, increment count by 1\n        if haskey(hist, i)\n       \
    \     hist[i] += 1\n        # if character is not in dictionary, add it with count\
    \ of 1\n        else\n            hist[i] = 1\n        end\n    end\n    # return\
    \ dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2k227dr5.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2k227dr5.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2k227dr5.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp2k227dr5.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2k227dr5.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2k227dr5.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp2k227dr5.jl:42\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2k227dr5.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2k227dr5.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2k227dr5.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxdx9zqoa.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpxdx9zqoa.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdx9zqoa.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpxdx9zqoa.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdx9zqoa.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdx9zqoa.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxdx9zqoa.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaxpzvv7r.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpaxpzvv7r.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaxpzvv7r.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpaxpzvv7r.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaxpzvv7r.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaxpzvv7r.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaxpzvv7r.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Your code here\n    return Dict()\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgicwmjje.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgicwmjje.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgicwmjje.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgicwmjje.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgicwmjje.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgicwmjje.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgicwmjje.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgicwmjje.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgicwmjje.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgicwmjje.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgicwmjje.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgicwmjje.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgicwmjje.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpgicwmjje.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgicwmjje.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw0en2o74.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpw0en2o74.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw0en2o74.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpw0en2o74.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw0en2o74.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw0en2o74.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw0en2o74.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Initialize dictionary\n    d = Dict{String, Int64}()\n    # Split string\
    \ into array of letters\n    letters = split(test, \" \")\n    # Iterate through\
    \ each letter\n    for letter in letters\n        # If letter is already in dictionary,\
    \ increment count\n        if haskey(d, letter)\n            d[letter] += 1\n\
    \        # If letter is not in dictionary, add it with count of 1\n        else\n\
    \            d[letter] = 1\n        end\n    end\n    # Return dictionary\n  \
    \  return d\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbl6ktj1n.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbl6ktj1n.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbl6ktj1n.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbl6ktj1n.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbl6ktj1n.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbl6ktj1n.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpbl6ktj1n.jl:42\n  Expression: candidate(\"\") == Dict()\n\
    \   Evaluated: Dict(\"\" => 1) == Dict{Any, Any}()\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbl6ktj1n.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbl6ktj1n.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     3      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbl6ktj1n.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuyy35ftk.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpuyy35ftk.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpuyy35ftk.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuyy35ftk.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpuyy35ftk.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpuyy35ftk.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmpuyy35ftk.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpuyy35ftk.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpuyy35ftk.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0iari52g.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0iari52g.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0iari52g.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp0iari52g.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0iari52g.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0iari52g.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0iari52g.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1aywbkmt.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmp1aywbkmt.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp1aywbkmt.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1aywbkmt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1aywbkmt.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp1aywbkmt.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmp1aywbkmt.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1aywbkmt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1aywbkmt.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # split the string into a vector of words\n    words = split(test)\n \
    \   # create a dictionary of words and their counts\n    word_counts = Dict{String,\
    \ Int64}()\n    for word in words\n        word_counts[word] = get(word_counts,\
    \ word, 0) + 1\n    end\n    # create a dictionary of words with the highest count\n\
    \    max_count = maximum(values(word_counts))\n    max_words = Dict{String, Int64}()\n\
    \    for (word, count) in word_counts\n        if count == max_count\n       \
    \     max_words[word] = count\n        end\n    end\n    return max_words\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwgaiu1hb.jl:42\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:309\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:328\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:355 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:354\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#214\n      @ ./reduce.jl:160\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:160 [inlined]\n   [10] #mapreduce#218\n\
    \      @ ./reduce.jl:287 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:287\
    \ [inlined]\n   [12] #maximum#228\n      @ ./reduce.jl:731 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:731 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpwgaiu1hb.jl:22\n   [15] macro expansion\n      @ /tmp/tmpwgaiu1hb.jl:42\
    \ [inlined]\n   [16] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [17] top-level scope\n      @ /tmp/tmpwgaiu1hb.jl:35\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwgaiu1hb.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   if haskey(letters, letter)\n            letters[letter] += 1\n        else\n\
    \            letters[letter] = 1\n        end\n    end\n    return letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp62uvjxnd.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp62uvjxnd.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp62uvjxnd.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp62uvjxnd.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp62uvjxnd.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp62uvjxnd.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp62uvjxnd.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   if haskey(letters, letter)\n            letters[letter] += 1\n        else\n\
    \            letters[letter] = 1\n        end\n    end\n    return letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphmyqpq53.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphmyqpq53.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphmyqpq53.jl:28\ntest set: Test\
    \ Failed at /tmp/tmphmyqpq53.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphmyqpq53.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphmyqpq53.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphmyqpq53.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2fivjcot.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2fivjcot.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2fivjcot.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2fivjcot.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2fivjcot.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2fivjcot.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2fivjcot.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary to store the letter and its count\n    hist = Dict()\n\
    \    # split the string into a list of letters\n    letters = split(test)\n  \
    \  # loop through the list of letters\n    for letter in letters\n        # if\
    \ the letter is not in the dictionary, add it with a count of 1\n        if !haskey(hist,\
    \ letter)\n            hist[letter] = 1\n        # if the letter is already in\
    \ the dictionary, increment the count by 1\n        else\n            hist[letter]\
    \ += 1\n        end\n    end\n    # return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp02_fnphh.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp02_fnphh.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02_fnphh.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp02_fnphh.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp02_fnphh.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp02_fnphh.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp02_fnphh.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create a dictionary to store the letter and its count\n    hist = Dict{String,\
    \ Int64}()\n    # Split the string by space\n    test_split = split(test)\n  \
    \  # Iterate through the split string\n    for i in test_split\n        # If the\
    \ letter is not in the dictionary, add it and set the count to 1\n        if !haskey(hist,\
    \ i)\n            hist[i] = 1\n        # If the letter is in the dictionary, increment\
    \ the count\n        else\n            hist[i] += 1\n        end\n    end\n  \
    \  # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_hp23iq9.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_hp23iq9.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hp23iq9.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp_hp23iq9.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_hp23iq9.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hp23iq9.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_hp23iq9.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppw2ox4zy.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmppw2ox4zy.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmppw2ox4zy.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppw2ox4zy.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmppw2ox4zy.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmppw2ox4zy.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmppw2ox4zy.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppw2ox4zy.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmppw2ox4zy.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary\n    hist = Dict{String, Int64}()\n    # split the\
    \ string into a vector of letters\n    letters = split(test)\n    # loop over\
    \ the vector of letters\n    for letter in letters\n        # if the letter is\
    \ not in the dictionary, add it\n        if !haskey(hist, letter)\n          \
    \  hist[letter] = 1\n        # if the letter is in the dictionary, increment the\
    \ count\n        else\n            hist[letter] += 1\n        end\n    end\n \
    \   return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkty90vh8.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkty90vh8.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkty90vh8.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpkty90vh8.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkty90vh8.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkty90vh8.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkty90vh8.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary\n    hist = Dict{String, Int64}()\n    # split the\
    \ string into a vector of letters\n    letters = split(test)\n    # loop through\
    \ the vector of letters\n    for letter in letters\n        # if the letter is\
    \ not in the dictionary, add it\n        if !haskey(hist, letter)\n          \
    \  hist[letter] = 1\n        # if the letter is in the dictionary, increase the\
    \ count by 1\n        else\n            hist[letter] += 1\n        end\n    end\n\
    \    # return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8msipdoe.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8msipdoe.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8msipdoe.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp8msipdoe.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8msipdoe.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8msipdoe.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8msipdoe.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for c in test\n        if haskey(hist, c)\n       \
    \     hist[c] += 1\n        else\n            hist[c] = 1\n        end\n    end\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyu857pae.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\\n     @ Base ./dict.jl:104\\\
    n   [3] convert\\n     @ ./abstractdict.jl:526 [inlined]\\n   [4] histogram(test::String)\\\
    n     @ Main /tmp/tmpyu857pae.jl:22\\n   [5] macro expansion\\n     @ /tmp/tmpyu857pae.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpyu857pae.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpyu857pae.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] Dict{String, Int64}(kv::Dict{Any,\
    \ Any})\\n     @ Base ./dict.jl:104\\n   [3] convert\\n     @ ./abstractdict.jl:526\
    \ [inlined]\\n   [4] histogram(test::String)\\n     @ Main /tmp/tmpyu857pae.jl:22\\\
    n   [5] macro expansion\\n     @ /tmp/tmpyu857pae.jl:30 [inlined]\\n   [6] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/ju"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # split the string into a vector of letters\n    letters = split(test)\n\
    \    # create a dictionary of letters and their counts\n    counts = Dict(i =>\
    \ count(x -> x == i, letters) for i in letters)\n    # find the maximum count\n\
    \    max_count = maximum(values(counts))\n    # return a dictionary of letters\
    \ with the maximum count\n    return Dict(i => counts[i] for i in keys(counts)\
    \ if counts[i] == max_count)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv79g5d3y.jl:34\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:309\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:328\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:355 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:354\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#214\n      @ ./reduce.jl:160\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:160 [inlined]\n   [10] #mapreduce#218\n\
    \      @ ./reduce.jl:287 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:287\
    \ [inlined]\n   [12] #maximum#228\n      @ ./reduce.jl:731 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:731 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpv79g5d3y.jl:19\n   [15] macro expansion\n      @ /tmp/tmpv79g5d3y.jl:34\
    \ [inlined]\n   [16] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [17] top-level scope\n      @ /tmp/tmpv79g5d3y.jl:27\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv79g5d3y.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9iw835et.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp9iw835et.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9iw835et.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp9iw835et.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9iw835et.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9iw835et.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9iw835et.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp43mge9ef.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmp43mge9ef.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmp43mge9ef.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp43mge9ef.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp43mge9ef.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmp43mge9ef.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmp43mge9ef.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp43mge9ef.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp43mge9ef.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2pc6sy6h.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2pc6sy6h.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2pc6sy6h.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp2pc6sy6h.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2pc6sy6h.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2pc6sy6h.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2pc6sy6h.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in split(test)\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmyolfloi.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmyolfloi.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmyolfloi.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmyolfloi.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmyolfloi.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmyolfloi.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmyolfloi.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\n    return Dict()\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1o4syhs1.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1o4syhs1.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1o4syhs1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1o4syhs1.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1o4syhs1.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1o4syhs1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1o4syhs1.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1o4syhs1.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1o4syhs1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1o4syhs1.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1o4syhs1.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1o4syhs1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1o4syhs1.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp1o4syhs1.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1o4syhs1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Initialize dictionary\n    hist = Dict{String, Int64}()\n    # Split\
    \ string into words\n    words = split(test)\n    # Iterate over words\n    for\
    \ word in words\n        # If word is not in dictionary, add it\n        if !haskey(hist,\
    \ word)\n            hist[word] = 1\n        # If word is in dictionary, increment\
    \ count\n        else\n            hist[word] += 1\n        end\n    end\n   \
    \ # Return dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoztttkkc.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpoztttkkc.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoztttkkc.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpoztttkkc.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoztttkkc.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoztttkkc.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoztttkkc.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprej_gnpn.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprej_gnpn.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprej_gnpn.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprej_gnpn.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprej_gnpn.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprej_gnpn.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprej_gnpn.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create empty dictionary\n    hist = Dict{String, Int64}()\n    # split\
    \ string into array of letters\n    letters = split(test)\n    # iterate through\
    \ array of letters\n    for letter in letters\n        # if letter is not in dictionary,\
    \ add it\n        if !haskey(hist, letter)\n            hist[letter] = 1\n   \
    \     # if letter is in dictionary, increment count\n        else\n          \
    \  hist[letter] += 1\n        end\n    end\n    # return dictionary\n    return\
    \ hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdvlcx20c.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdvlcx20c.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdvlcx20c.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpdvlcx20c.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdvlcx20c.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdvlcx20c.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdvlcx20c.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary\n    hist = Dict()\n    # split the string into\
    \ a vector of characters\n    test_vec = split(test)\n    # loop through the vector\n\
    \    for i in test_vec\n        # if the character is not in the dictionary, add\
    \ it\n        if !haskey(hist, i)\n            hist[i] = 1\n        # if the character\
    \ is in the dictionary, increment its value\n        else\n            hist[i]\
    \ += 1\n        end\n    end\n    # return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq5h_0dc8.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpq5h_0dc8.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq5h_0dc8.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq5h_0dc8.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq5h_0dc8.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq5h_0dc8.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq5h_0dc8.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwwre4yy0.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpwwre4yy0.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpwwre4yy0.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwwre4yy0.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpwwre4yy0.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpwwre4yy0.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmpwwre4yy0.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwwre4yy0.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpwwre4yy0.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Split the string into a vector of characters\n    letters = split(test)\n\
    \    # Initialize a dictionary to store the results\n    hist = Dict{String, Int64}()\n\
    \    # Loop over the characters\n    for letter in letters\n        # If the letter\
    \ is already in the dictionary, increment the count\n        if haskey(hist, letter)\n\
    \            hist[letter] += 1\n        # Otherwise, initialize the count to 1\n\
    \        else\n            hist[letter] = 1\n        end\n    end\n    # Return\
    \ the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq37_5jrs.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpq37_5jrs.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq37_5jrs.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpq37_5jrs.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpq37_5jrs.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq37_5jrs.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq37_5jrs.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvlqgfqm4.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmpvlqgfqm4.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpvlqgfqm4.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvlqgfqm4.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpvlqgfqm4.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmpvlqgfqm4.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpvlqgfqm4.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvlqgfqm4.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpvlqgfqm4.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\n    return Dict()\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn0ypigv4.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn0ypigv4.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn0ypigv4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn0ypigv4.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn0ypigv4.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn0ypigv4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn0ypigv4.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn0ypigv4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn0ypigv4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn0ypigv4.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn0ypigv4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn0ypigv4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpn0ypigv4.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpn0ypigv4.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn0ypigv4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmvh3ag5w.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmvh3ag5w.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvh3ag5w.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpmvh3ag5w.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmvh3ag5w.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvh3ag5w.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmvh3ag5w.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj41o_jue.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpj41o_jue.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj41o_jue.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpj41o_jue.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj41o_jue.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj41o_jue.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj41o_jue.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create an empty dictionary\n    hist = Dict{String, Int64}()\n    #\
    \ Split the string into an array of strings\n    test_array = split(test)\n  \
    \  # Loop through the array of strings\n    for i in test_array\n        # If\
    \ the string is not in the dictionary, add it\n        if !haskey(hist, i)\n \
    \           hist[i] = 1\n        # If the string is in the dictionary, increment\
    \ the count\n        else\n            hist[i] += 1\n        end\n    end\n  \
    \  # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuwyej5li.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpuwyej5li.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuwyej5li.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpuwyej5li.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuwyej5li.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuwyej5li.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuwyej5li.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create a dictionary to store the results\n    hist = Dict{String, Int64}()\n\
    \    # Split the string into a vector of strings\n    letters = split(test)\n\
    \    # Iterate over the vector of strings\n    for letter in letters\n       \
    \ # If the letter is already in the dictionary, increment its value\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        # Otherwise, add\
    \ it to the dictionary with a value of 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    # Return the dictionary\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp28stjpjn.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp28stjpjn.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28stjpjn.jl:35\ntest set: Test\
    \ Failed at /tmp/tmp28stjpjn.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp28stjpjn.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp28stjpjn.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28stjpjn.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxaxgl29y.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpxaxgl29y.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpxaxgl29y.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxaxgl29y.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpxaxgl29y.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpxaxgl29y.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmpxaxgl29y.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpxaxgl29y.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpxaxgl29y.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzworr3rv.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpzworr3rv.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpzworr3rv.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzworr3rv.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpzworr3rv.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpzworr3rv.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmpzworr3rv.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzworr3rv.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpzworr3rv.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # split string into a vector of characters\n    test_vec = split(test)\n\
    \    # initialize dictionary\n    hist = Dict{String, Int64}()\n    # loop through\
    \ vector\n    for i = 1:length(test_vec)\n        # if the character is not in\
    \ the dictionary, add it\n        if !haskey(hist, test_vec[i])\n            hist[test_vec[i]]\
    \ = 1\n        # if the character is in the dictionary, increment the count\n\
    \        else\n            hist[test_vec[i]] += 1\n        end\n    end\n    #\
    \ return the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\n\
    candidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe71yesju.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpe71yesju.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe71yesju.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpe71yesju.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe71yesju.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe71yesju.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe71yesju.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = split(test)\n    counts = Dict()\n    for letter in letters\n\
    \        if haskey(counts, letter)\n            counts[letter] += 1\n        else\n\
    \            counts[letter] = 1\n        end\n    end\n    return counts\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj2czw82b.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpj2czw82b.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj2czw82b.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpj2czw82b.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj2czw82b.jl:34 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj2czw82b.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj2czw82b.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict()\n    for letter in test\n        if letter in keys(hist)\n\
    \            hist[letter] += 1\n        else\n            hist[letter] = 1\n \
    \       end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfgb_v2vw.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] Dict{String, Int64}(kv::Dict{Any, Any})\\n     @ Base ./dict.jl:104\\\
    n   [3] convert\\n     @ ./abstractdict.jl:526 [inlined]\\n   [4] histogram(test::String)\\\
    n     @ Main /tmp/tmpfgb_v2vw.jl:22\\n   [5] macro expansion\\n     @ /tmp/tmpfgb_v2vw.jl:29\
    \ [inlined]\\n   [6] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpfgb_v2vw.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpfgb_v2vw.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] Dict{String, Int64}(kv::Dict{Any,\
    \ Any})\\n     @ Base ./dict.jl:104\\n   [3] convert\\n     @ ./abstractdict.jl:526\
    \ [inlined]\\n   [4] histogram(test::String)\\n     @ Main /tmp/tmpfgb_v2vw.jl:22\\\
    n   [5] macro expansion\\n     @ /tmp/tmpfgb_v2vw.jl:30 [inlined]\\n   [6] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/ju"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary to store the letters and their counts\n    hist\
    \ = Dict{String, Int64}()\n    # split the string into a vector of letters\n \
    \   letters = split(test)\n    # loop through the vector of letters\n    for letter\
    \ in letters\n        # if the letter is not in the dictionary, add it and set\
    \ the count to 1\n        if !haskey(hist, letter)\n            hist[letter] =\
    \ 1\n        # if the letter is in the dictionary, increment the count\n     \
    \   else\n            hist[letter] += 1\n        end\n    end\n    # return the\
    \ dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn3pdenqf.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpn3pdenqf.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn3pdenqf.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpn3pdenqf.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn3pdenqf.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn3pdenqf.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn3pdenqf.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # split the string into a vector of letters\n    letters = split(test)\n\
    \    # create a dictionary of the letters and the number of times they appear\n\
    \    hist = Dict{String, Int64}()\n    for letter in letters\n        if letter\
    \ in keys(hist)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    # find the maximum number of times a letter appears\n\
    \    max_count = maximum(values(hist))\n    # create a dictionary of the letters\
    \ that appear the maximum number of times\n    max_hist = Dict{String, Int64}()\n\
    \    for (letter, count) in hist\n        if count == max_count\n            max_hist[letter]\
    \ = count\n        end\n    end\n    return max_hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0cd066_6.jl:47\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:309\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:328\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:355 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:354\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#214\n      @ ./reduce.jl:160\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:160 [inlined]\n   [10] #mapreduce#218\n\
    \      @ ./reduce.jl:287 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:287\
    \ [inlined]\n   [12] #maximum#228\n      @ ./reduce.jl:731 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:731 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmp0cd066_6.jl:26\n   [15] macro expansion\n      @ /tmp/tmp0cd066_6.jl:47\
    \ [inlined]\n   [16] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [17] top-level scope\n      @ /tmp/tmp0cd066_6.jl:40\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0cd066_6.jl:38\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary\n    hist = Dict{String, Int64}()\n    # split the\
    \ string into a list of words\n    words = split(test)\n    # loop over the words\n\
    \    for word in words\n        # if the word is not in the dictionary, add it\
    \ with a count of 1\n        if !haskey(hist, word)\n            hist[word] =\
    \ 1\n        # if the word is in the dictionary, increment the count\n       \
    \ else\n            hist[word] += 1\n        end\n    end\n    return hist\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzkowdjxc.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzkowdjxc.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzkowdjxc.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpzkowdjxc.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzkowdjxc.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzkowdjxc.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzkowdjxc.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    test = split(test)\n    hist = Dict{String, Int64}()\n    for i in test\n\
    \        if haskey(hist, i)\n            hist[i] += 1\n        else\n        \
    \    hist[i] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppasa5h0t.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmppasa5h0t.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppasa5h0t.jl:29\ntest set: Test\
    \ Failed at /tmp/tmppasa5h0t.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppasa5h0t.jl:34 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppasa5h0t.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppasa5h0t.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\n    return Dict()\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpro5zjjy9.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpro5zjjy9.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpro5zjjy9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpro5zjjy9.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpro5zjjy9.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpro5zjjy9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpro5zjjy9.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpro5zjjy9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpro5zjjy9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpro5zjjy9.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpro5zjjy9.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpro5zjjy9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpro5zjjy9.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpro5zjjy9.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpro5zjjy9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = Dict{String, Int64}()\n    for letter in split(test)\n     \
    \   if haskey(letters, letter)\n            letters[letter] += 1\n        else\n\
    \            letters[letter] = 1\n        end\n    end\n    return letters\nend\n\
    using Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a\
    \ b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa2pojke6.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpa2pojke6.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2pojke6.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpa2pojke6.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2pojke6.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2pojke6.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2pojke6.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwc8jgru9.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwc8jgru9.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwc8jgru9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpwc8jgru9.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwc8jgru9.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwc8jgru9.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwc8jgru9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create an empty dictionary\n    hist = Dict{String, Int64}()\n    #\
    \ split the string into a vector of characters\n    for c in split(test)\n   \
    \     # if the character is already in the dictionary, increment the count\n \
    \       if haskey(hist, c)\n            hist[c] += 1\n        # if the character\
    \ is not in the dictionary, add it with a count of 1\n        else\n         \
    \   hist[c] = 1\n        end\n    end\n    # return the dictionary\n    return\
    \ hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp72o18u85.jl:35\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp72o18u85.jl:35 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp72o18u85.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp72o18u85.jl:38\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp72o18u85.jl:38 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp72o18u85.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp72o18u85.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Initialize the dictionary\n    hist = Dict{String, Int64}()\n    # Split\
    \ the string into an array of words\n    words = split(test)\n    # Iterate over\
    \ each word in the array\n    for word in words\n        # If the word is not\
    \ in the dictionary, add it with a count of 1\n        if !haskey(hist, word)\n\
    \            hist[word] = 1\n        # Otherwise, increment the count\n      \
    \  else\n            hist[word] += 1\n        end\n    end\n    # Return the dictionary\n\
    \    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprqu81nup.jl:37\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprqu81nup.jl:37 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprqu81nup.jl:35\ntest set: Test\
    \ Failed at /tmp/tmprqu81nup.jl:40\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprqu81nup.jl:40 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprqu81nup.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprqu81nup.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\n    return Dict()\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbinqnohz.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbinqnohz.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbinqnohz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbinqnohz.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbinqnohz.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbinqnohz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbinqnohz.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbinqnohz.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbinqnohz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbinqnohz.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbinqnohz.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbinqnohz.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbinqnohz.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmpbinqnohz.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbinqnohz.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\n    return Dict()\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp07948f9p.jl:22\n  Expression: candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}()\
    \ == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp07948f9p.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp07948f9p.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp07948f9p.jl:23\n  Expression: candidate(\"a b c a b\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp07948f9p.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp07948f9p.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp07948f9p.jl:24\n  Expression: candidate(\"a b c d g\") ==\
    \ Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1)\n   Evaluated:\
    \ Dict{String, Int64}() == Dict(\"g\" => 1, \"c\" => 1, \"b\" => 1, \"a\" => 1,\
    \ \"d\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp07948f9p.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp07948f9p.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp07948f9p.jl:25\n  Expression: candidate(\"r t g\") == Dict(\"\
    r\" => 1, \"t\" => 1, \"g\" => 1)\n   Evaluated: Dict{String, Int64}() == Dict(\"\
    g\" => 1, \"t\" => 1, \"r\" => 1)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp07948f9p.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp07948f9p.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp07948f9p.jl:26\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict{String, Int64}() == Dict(\"b\" => 4)\n\
    Stacktrace:\n [1] macro expansion\n   @ /tmp/tmp07948f9p.jl:26 [inlined]\n [2]\
    \ macro expansion\n   @ /buildworker/worker/"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp07948f9p.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        hist[letter]\
    \ = get(hist, letter, 0) + 1\n    end\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmts0dooc.jl:26\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmts0dooc.jl:26 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmts0dooc.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpmts0dooc.jl:29\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmts0dooc.jl:29 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmts0dooc.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmts0dooc.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyv4ijjnw.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpyv4ijjnw.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyv4ijjnw.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpyv4ijjnw.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyv4ijjnw.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyv4ijjnw.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyv4ijjnw.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    test_dict = Dict{String, Int64}()\n    for letter in test\n        if\
    \ letter in keys(test_dict)\n            test_dict[letter] += 1\n        else\n\
    \            test_dict[letter] = 1\n        end\n    end\n    return test_dict\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnbbpz6ek.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpnbbpz6ek.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpnbbpz6ek.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnbbpz6ek.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpnbbpz6ek.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpnbbpz6ek.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmpnbbpz6ek.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpnbbpz6ek.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpnbbpz6ek.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Initialize a dictionary to store the letter and its count\n    hist\
    \ = Dict{String, Int64}()\n    # Loop through the string\n    for letter in test\n\
    \        # Check if the letter is already in the dictionary\n        if letter\
    \ in keys(hist)\n            # If it is, increment the count by 1\n          \
    \  hist[letter] += 1\n        else\n            # If it isn't, initialize the\
    \ count to 1\n            hist[letter] = 1\n        end\n    end\n    # Return\
    \ the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp87xfvv0z.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmp87xfvv0z.jl:24\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp87xfvv0z.jl:35 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp87xfvv0z.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp87xfvv0z.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp87xfvv0z.jl:24\\n   [3] macro expansion\\n     @ /tmp/tmp87xfvv0z.jl:36\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp87xfvv0z.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp87xfvv0z.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # your code here\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpelwoqn54.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type typeof(>) to an object\
    \ of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractDict at abstractdict.jl:523\\n    convert(::Type{T},\
    \ !Matched::AbstractDict) where T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T},\
    \ !Matched::T) where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1]\
    \ histogram(test::String)\\n     @ Main /tmp/tmpelwoqn54.jl:13\\n   [2] macro\
    \ expansion\\n     @ /tmp/tmpelwoqn54.jl:21 [inlined]\\n   [3] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpelwoqn54.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpelwoqn54.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type typeof(>) to an object of type Dict{String, Int64}\\\
    n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where T<:AbstractDict\
    \ at abstractdict.jl:523\\n    convert(::Type{T}, !Matched::AbstractDict) where\
    \ T<:AbstractDict at abstractdict.jl:525\\n    convert(::Type{T}, !Matched::T)\
    \ where T at essentials.jl:205\\n    ...\\n  Stacktrace:\\n   [1] histogram(test::String)\\\
    n     @ Main /tmp/tmpelwoqn54.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpelwoqn54.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpelwoqn54.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpelwoqn54.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" =>\
    \ 1, \"g\" => 1)\\n  MethodError: Cannot `convert` an object of type typeof(>)\
    \ to an object of type Dict{String, Int64}\\n  Closest candidates are:\\n    convert(::Type{T},"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create an empty dictionary\n    hist = Dict{String, Int64}()\n    #\
    \ Iterate over the string\n    for letter in test\n        # If the letter is\
    \ not in the dictionary, add it with a count of 1\n        if !haskey(hist, letter)\n\
    \            hist[letter] = 1\n        # If the letter is in the dictionary, increment\
    \ the count by 1\n        else\n            hist[letter] += 1\n        end\n \
    \   end\n    # Return the dictionary\n    return hist\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwkc9a1he.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpwkc9a1he.jl:20\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpwkc9a1he.jl:34 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwkc9a1he.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpwkc9a1he.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpwkc9a1he.jl:20\\n   [3] macro expansion\\n     @ /tmp/tmpwkc9a1he.jl:35\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwkc9a1he.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmpwkc9a1he.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplcnpsbqb.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmplcnpsbqb.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplcnpsbqb.jl:28\ntest set: Test\
    \ Failed at /tmp/tmplcnpsbqb.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplcnpsbqb.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplcnpsbqb.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplcnpsbqb.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    histogram = Dict{String, Int64}()\n    for letter in split(test)\n   \
    \     if haskey(histogram, letter)\n            histogram[letter] += 1\n     \
    \   else\n            histogram[letter] = 1\n        end\n    end\n    return\
    \ histogram\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_f49o8ji.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_f49o8ji.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_f49o8ji.jl:28\ntest set: Test\
    \ Failed at /tmp/tmp_f49o8ji.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_f49o8ji.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_f49o8ji.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_f49o8ji.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk3l_14e2.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpk3l_14e2.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk3l_14e2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpk3l_14e2.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk3l_14e2.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk3l_14e2.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk3l_14e2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpohvsxeqj.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpohvsxeqj.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpohvsxeqj.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpohvsxeqj.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpohvsxeqj.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpohvsxeqj.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpohvsxeqj.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create a dictionary to store the letter and the count\n    hist = Dict{String,\
    \ Int64}()\n    # Split the string into a vector of letters\n    letters = split(test)\n\
    \    # Iterate over the vector of letters\n    for letter in letters\n       \
    \ # Check if the letter is already in the dictionary\n        if haskey(hist,\
    \ letter)\n            # If it is, increment the count\n            hist[letter]\
    \ += 1\n        else\n            # If it is not, add it to the dictionary with\
    \ a count of 1\n            hist[letter] = 1\n        end\n    end\n    # Return\
    \ the dictionary\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpei53itre.jl:38\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpei53itre.jl:38 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpei53itre.jl:36\ntest set: Test\
    \ Failed at /tmp/tmpei53itre.jl:41\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpei53itre.jl:41 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpei53itre.jl:36\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpei53itre.jl:34\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqscxt5h8.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpqscxt5h8.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpqscxt5h8.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqscxt5h8.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpqscxt5h8.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpqscxt5h8.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmpqscxt5h8.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqscxt5h8.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpqscxt5h8.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprgkli6u2.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprgkli6u2.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprgkli6u2.jl:28\ntest set: Test\
    \ Failed at /tmp/tmprgkli6u2.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprgkli6u2.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprgkli6u2.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprgkli6u2.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkrx25tfm.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkrx25tfm.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkrx25tfm.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpkrx25tfm.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkrx25tfm.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkrx25tfm.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkrx25tfm.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create a dictionary with the letters as keys and the count as values\n\
    \    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if letter\
    \ in keys(hist)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    \n    # Find the maximum value in the dictionary\n\
    \    max_val = maximum(values(hist))\n    \n    # Create a dictionary with the\
    \ letters as keys and the count as values\n    # where the count is the maximum\
    \ value\n    max_hist = Dict{String, Int64}()\n    for (key, value) in hist\n\
    \        if value == max_val\n            max_hist[key] = value\n        end\n\
    \    end\n    \n    return max_hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpc5w8ldrl.jl:49\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:309\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:328\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:355 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:354\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#214\n      @ ./reduce.jl:160\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:160 [inlined]\n   [10] #mapreduce#218\n\
    \      @ ./reduce.jl:287 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:287\
    \ [inlined]\n   [12] #maximum#228\n      @ ./reduce.jl:731 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:731 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpc5w8ldrl.jl:25\n   [15] macro expansion\n      @ /tmp/tmpc5w8ldrl.jl:49\
    \ [inlined]\n   [16] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [17] top-level scope\n      @ /tmp/tmpc5w8ldrl.jl:42\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc5w8ldrl.jl:40\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqgnkso7j.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpqgnkso7j.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpqgnkso7j.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqgnkso7j.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpqgnkso7j.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpqgnkso7j.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmpqgnkso7j.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpqgnkso7j.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpqgnkso7j.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create a dictionary with the letters as keys and the count as values\n\
    \    histogram = Dict{String, Int64}()\n    for letter in split(test)\n      \
    \  if haskey(histogram, letter)\n            histogram[letter] += 1\n        else\n\
    \            histogram[letter] = 1\n        end\n    end\n    \n    # Find the\
    \ maximum value\n    max_value = maximum(values(histogram))\n    \n    # Create\
    \ a new dictionary with the letters with the maximum count as keys and the count\
    \ as values\n    max_histogram = Dict{String, Int64}()\n    for (key, value) in\
    \ histogram\n        if value == max_value\n            max_histogram[key] = value\n\
    \        end\n    end\n    \n    return max_histogram\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcj3ceuah.jl:48\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:309\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:328\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:355 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:354\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#214\n      @ ./reduce.jl:160\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:160 [inlined]\n   [10] #mapreduce#218\n\
    \      @ ./reduce.jl:287 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:287\
    \ [inlined]\n   [12] #maximum#228\n      @ ./reduce.jl:731 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:731 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpcj3ceuah.jl:25\n   [15] macro expansion\n      @ /tmp/tmpcj3ceuah.jl:48\
    \ [inlined]\n   [16] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [17] top-level scope\n      @ /tmp/tmpcj3ceuah.jl:41\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcj3ceuah.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in test\n        if haskey(hist,\
    \ letter)\n            hist[letter] += 1\n        else\n            hist[letter]\
    \ = 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptqjx63me.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmptqjx63me.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmptqjx63me.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptqjx63me.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmptqjx63me.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmptqjx63me.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmptqjx63me.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptqjx63me.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmptqjx63me.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    letters = split(test)\n    hist = Dict{String, Int64}()\n    for letter\
    \ in letters\n        if haskey(hist, letter)\n            hist[letter] += 1\n\
    \        else\n            hist[letter] = 1\n        end\n    end\n    return\
    \ hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"\
    a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\")\
    \ == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"\
    a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc51xpaz4.jl:31\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpc51xpaz4.jl:31 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc51xpaz4.jl:29\ntest set: Test\
    \ Failed at /tmp/tmpc51xpaz4.jl:34\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc51xpaz4.jl:34 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc51xpaz4.jl:29\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc51xpaz4.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for letter in split(test)\n        if\
    \ haskey(hist, letter)\n            hist[letter] += 1\n        else\n        \
    \    hist[letter] = 1\n        end\n    end\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkntslvv9.jl:30\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkntslvv9.jl:30 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkntslvv9.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpkntslvv9.jl:33\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkntslvv9.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkntslvv9.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkntslvv9.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for c in test\n        if haskey(hist,\
    \ c)\n            hist[c] += 1\n        else\n            hist[c] = 1\n      \
    \  end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" =>\
    \ 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\
    \t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t\
    \ g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") ==\
    \ Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpib2o0kl4.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmpib2o0kl4.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmpib2o0kl4.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpib2o0kl4.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpib2o0kl4.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmpib2o0kl4.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmpib2o0kl4.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpib2o0kl4.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpib2o0kl4.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # Create a dictionary of the letters in the string\n    hist = Dict{String,\
    \ Int64}()\n    for letter in split(test)\n        if haskey(hist, letter)\n \
    \           hist[letter] += 1\n        else\n            hist[letter] = 1\n  \
    \      end\n    end\n    \n    # Find the maximum value in the dictionary\n  \
    \  max_value = maximum(values(hist))\n    \n    # Create a new dictionary with\
    \ the letters that have the maximum value\n    max_hist = Dict{String, Int64}()\n\
    \    for (key, value) in hist\n        if value == max_value\n            max_hist[key]\
    \ = value\n        end\n    end\n    \n    return max_hist\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"\
    a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"\
    c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\"\
    \ => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"\
    b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\"\
    \ => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"a\") == Dict(\"\
    a\" => 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnu38e6nz.jl:48\n  Test threw exception\n\
    \  Expression: candidate(\"\") == Dict()\n  ArgumentError: reducing over an empty\
    \ collection is not allowed\n  Stacktrace:\n    [1] _empty_reduce_error()\n  \
    \    @ Base ./reduce.jl:299\n    [2] reduce_empty(op::Function, #unused#::Type{Int64})\n\
    \      @ Base ./reduce.jl:309\n    [3] reduce_empty(op::Base.BottomRF{typeof(max)},\
    \ #unused#::Type{Int64})\n      @ Base ./reduce.jl:328\n    [4] reduce_empty_iter\n\
    \      @ ./reduce.jl:355 [inlined]\n    [5] reduce_empty_iter\n      @ ./reduce.jl:354\
    \ [inlined]\n    [6] foldl_impl\n      @ ./reduce.jl:49 [inlined]\n    [7] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [8] #mapfoldl#214\n      @ ./reduce.jl:160\
    \ [inlined]\n    [9] mapfoldl\n      @ ./reduce.jl:160 [inlined]\n   [10] #mapreduce#218\n\
    \      @ ./reduce.jl:287 [inlined]\n   [11] mapreduce\n      @ ./reduce.jl:287\
    \ [inlined]\n   [12] #maximum#228\n      @ ./reduce.jl:731 [inlined]\n   [13]\
    \ maximum\n      @ ./reduce.jl:731 [inlined]\n   [14] histogram(test::String)\n\
    \      @ Main /tmp/tmpnu38e6nz.jl:25\n   [15] macro expansion\n      @ /tmp/tmpnu38e6nz.jl:48\
    \ [inlined]\n   [16] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [17] top-level scope\n      @ /tmp/tmpnu38e6nz.jl:41\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    7      1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnu38e6nz.jl:39\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    hist = Dict{String, Int64}()\n    for i in test\n        if i in keys(hist)\n\
    \            hist[i] += 1\n        else\n            hist[i] = 1\n        end\n\
    \    end\n    return hist\nend\nusing Test\n\n@testset begin\n\ncandidate = histogram;\n\
    \t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\"\
    ) == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b\
    \ b b a\") == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" =>\
    \ 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5c5uwujy.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmp5c5uwujy.jl:19\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp5c5uwujy.jl:29 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5c5uwujy.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp5c5uwujy.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp5c5uwujy.jl:19\\n   [3] macro expansion\\n     @ /tmp/tmp5c5uwujy.jl:30\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp5c5uwujy.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp5c5uwujy.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary with empty values\n    hist = Dict{String, Int64}()\n\
    \    # loop through the string\n    for letter in test\n        # if the letter\
    \ is not in the dictionary, add it with a value of 1\n        if !haskey(hist,\
    \ letter)\n            hist[letter] = 1\n        # if the letter is in the dictionary,\
    \ increment the value by 1\n        else\n            hist[letter] += 1\n    \
    \    end\n    end\n    # return the dictionary\n    return hist\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = histogram;\n\t@test(candidate(\"a b b a\") ==\
    \ Dict(\"a\" => 2, \"b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\"\
    \ => 2, \"b\" => 2))\n\t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"\
    b\" => 1, \"c\" => 1, \"d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") ==\
    \ Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\")\
    \ == Dict(\"b\" => 4))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"\") == Dict())\n\t@test(candidate(\"\
    a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp26zch14t.jl:34\\n  Test threw\
    \ exception\\n  Expression: candidate(\"a b b a\") == Dict(\"a\" => 2, \"b\" =>\
    \ 2)\\n  MethodError: Cannot `convert` an object of type Char to an object of\
    \ type String\\n  Closest candidates are:\\n    convert(::Type{String}, !Matched::String)\
    \ at essentials.jl:210\\n    convert(::Type{T}, !Matched::T) where T<:AbstractString\
    \ at strings/basic.jl:231\\n    convert(::Type{T}, !Matched::AbstractString) where\
    \ T<:AbstractString at strings/basic.jl:232\\n    ...\\n  Stacktrace:\\n   [1]\
    \ setindex!(h::Dict{String, Int64}, v0::Int64, key0::Char)\\n     @ Base ./dict.jl:374\\\
    n   [2] histogram(test::String)\\n     @ Main /tmp/tmp26zch14t.jl:20\\n   [3]\
    \ macro expansion\\n     @ /tmp/tmp26zch14t.jl:34 [inlined]\\n   [4] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp26zch14t.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp26zch14t.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\\n  MethodError: Cannot\
    \ `convert` an object of type Char to an object of type String\\n  Closest candidates\
    \ are:\\n    convert(::Type{String}, !Matched::String) at essentials.jl:210\\\
    n    convert(::Type{T}, !Matched::T) where T<:AbstractString at strings/basic.jl:231\\\
    n    convert(::Type{T}, !Matched::AbstractString) where T<:AbstractString at strings/basic.jl:232\\\
    n    ...\\n  Stacktrace:\\n   [1] setindex!(h::Dict{String, Int64}, v0::Int64,\
    \ key0::Char)\\n     @ Base ./dict.jl:374\\n   [2] histogram(test::String)\\n\
    \     @ Main /tmp/tmp26zch14t.jl:20\\n   [3] macro expansion\\n     @ /tmp/tmp26zch14t.jl:35\
    \ [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp26zch14t.jl:33\\ntest set:\
    \ Error During Test at /tmp/tmp26zch14t.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"d\" "
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Given a string representing a space separated lowercase letters,\
    \ return a dictionary\n    of the letter with the most repetition and containing\
    \ the corresponding count.\n    If several letters have the same occurrence, return\
    \ all of them.\n    \n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1,\
    \ 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c\
    \ a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('')\
    \ == {}\n\n    \"\"\"\nfunction histogram(test::String)::Dict{String, Int64}>\
    \ \n    # create a dictionary\n    hist = Dict{String, Int64}()\n    # split the\
    \ string into an array\n    test_array = split(test)\n    # loop through the array\n\
    \    for i in test_array\n        # if the letter is not in the dictionary, add\
    \ it\n        if !haskey(hist, i)\n            hist[i] = 1\n        # if the letter\
    \ is in the dictionary, add 1 to the count\n        else\n            hist[i]\
    \ += 1\n        end\n    end\n    return hist\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = histogram;\n\t@test(candidate(\"a b b a\") == Dict(\"a\" => 2, \"\
    b\" => 2))\n\t@test(candidate(\"a b c a b\") == Dict(\"a\" => 2, \"b\" => 2))\n\
    \t@test(candidate(\"a b c d g\") == Dict(\"a\" => 1, \"b\" => 1, \"c\" => 1, \"\
    d\" => 1, \"g\" => 1))\n\t@test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\"\
    \ => 1, \"g\" => 1))\n\t@test(candidate(\"b b b b a\") == Dict(\"b\" => 4))\n\t\
    @test(candidate(\"r t g\") == Dict(\"r\" => 1, \"t\" => 1, \"g\" => 1))\n\t@test(candidate(\"\
    \") == Dict())\n\t@test(candidate(\"a\") == Dict(\"a\" => 1))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwwu0_csi.jl:36\n  Expression: candidate(\"\
    a b c a b\") == Dict(\"a\" => 2, \"b\" => 2)\n   Evaluated: Dict(\"c\" => 1, \"\
    b\" => 2, \"a\" => 2) == Dict(\"b\" => 2, \"a\" => 2)\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwwu0_csi.jl:36 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwwu0_csi.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpwwu0_csi.jl:39\n  Expression: candidate(\"b b b b a\") ==\
    \ Dict(\"b\" => 4)\n   Evaluated: Dict(\"b\" => 4, \"a\" => 1) == Dict(\"b\" =>\
    \ 4)\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwwu0_csi.jl:39 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwwu0_csi.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    6     2      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 6 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwwu0_csi.jl:32\n"
  exit_code: 1
  status: SyntaxError
