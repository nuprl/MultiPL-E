name: HumanEval_91_is_bored
language: julia
results:
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5r2km50p.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5r2km50p.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5r2km50p.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5r2km50p.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"I\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp3017zabg.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3017zabg.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3017zabg.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3017zabg.jl:22\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3017zabg.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3017zabg.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3017zabg.jl:23\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3017zabg.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3017zabg.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3017zabg.jl:24\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3017zabg.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3017zabg.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3017zabg.jl:25\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3017zabg.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3017zabg.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3017zabg.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9i1sjh7c.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp9i1sjh7c.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9i1sjh7c.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9i1sjh7c.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl4oaraur.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpl4oaraur.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl4oaraur.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl4oaraur.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjgl1smxu.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpjgl1smxu.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjgl1smxu.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjgl1smxu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for s in split(S, \".\")\n        if split(s, \" \")[1]\
    \ == \"I\"\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0hd0avv0.jl:30\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n   Evaluated: 1\
    \ == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0hd0avv0.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0hd0avv0.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0hd0avv0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_52rdrnr.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_52rdrnr.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_52rdrnr.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_52rdrnr.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_52rdrnr.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_52rdrnr.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_52rdrnr.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_52rdrnr.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_52rdrnr.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_52rdrnr.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_52rdrnr.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_52rdrnr.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_52rdrnr.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_52rdrnr.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_52rdrnr.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_52rdrnr.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpuradu22i.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpuradu22i.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuradu22i.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuradu22i.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp9am5uwi.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpp9am5uwi.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp9am5uwi.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp9am5uwi.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2lwjebaw.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp2lwjebaw.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2lwjebaw.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2lwjebaw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"[.!?]\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdl66v3hu.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdl66v3hu.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdl66v3hu.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdl66v3hu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - length(split(S, r\"\\.\\s*I\"))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqmas80zj.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqmas80zj.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqmas80zj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpqmas80zj.jl:24\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqmas80zj.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqmas80zj.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqmas80zj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfmm9m2s9.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfmm9m2s9.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfmm9m2s9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfmm9m2s9.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfmm9m2s9.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfmm9m2s9.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfmm9m2s9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp87ut9n92.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp87ut9n92.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp87ut9n92.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp87ut9n92.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, ['.', '?', '!'])\n        if i[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbc9rlot1.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmpbc9rlot1.jl:15\\n   [4] macro expansion\\n     @ /tmp/tmpbc9rlot1.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbc9rlot1.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpbc9rlot1.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmpbc9rlot1.jl:15\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmpbc9rlot1.jl:28 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpbc9rlot1.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmpbc9rlot1.jl:30\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpbc9rlot1.jl:30 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpbc9rlot1.jl:25\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprojo6zwu.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprojo6zwu.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprojo6zwu.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprojo6zwu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyyd7m1s2.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpyyd7m1s2.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyyd7m1s2.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyyd7m1s2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, r\"[.?!]\")\n        if word[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp631fpchw.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmp631fpchw.jl:15\\n   [4] macro expansion\\n     @ /tmp/tmp631fpchw.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp631fpchw.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp631fpchw.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmp631fpchw.jl:15\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmp631fpchw.jl:28 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp631fpchw.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmp631fpchw.jl:30\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmp631fpchw.jl:30 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp631fpchw.jl:25\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6_x0dbh4.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp6_x0dbh4.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6_x0dbh4.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6_x0dbh4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7v3k6ivf.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7v3k6ivf.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7v3k6ivf.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7v3k6ivf.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8i446mhe.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp8i446mhe.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8i446mhe.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8i446mhe.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5vhwz8ml.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5vhwz8ml.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5vhwz8ml.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5vhwz8ml.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"[.!?]\")) - length(split(S, r\"[.!?] I\"))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5552_00_.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5552_00_.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5552_00_.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp5552_00_.jl:24\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5552_00_.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5552_00_.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5552_00_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"I\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdcbh5yyw.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdcbh5yyw.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdcbh5yyw.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpdcbh5yyw.jl:22\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdcbh5yyw.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdcbh5yyw.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpdcbh5yyw.jl:23\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdcbh5yyw.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdcbh5yyw.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpdcbh5yyw.jl:24\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdcbh5yyw.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdcbh5yyw.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpdcbh5yyw.jl:25\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdcbh5yyw.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdcbh5yyw.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdcbh5yyw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjr93n81j.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjr93n81j.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjr93n81j.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjr93n81j.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjr93n81j.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjr93n81j.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjr93n81j.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjr93n81j.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjr93n81j.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjr93n81j.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjr93n81j.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjr93n81j.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjr93n81j.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjr93n81j.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjr93n81j.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjr93n81j.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp85qfy59y.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp85qfy59y.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85qfy59y.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp85qfy59y.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsti3mwds.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsti3mwds.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsti3mwds.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpsti3mwds.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsti3mwds.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsti3mwds.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsti3mwds.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for s in split(S, \".\")\n        if s[1] == 'I'\n    \
    \        count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpszhuqfdu.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpszhuqfdu.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpszhuqfdu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpszhuqfdu.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpszhuqfdu.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpszhuqfdu.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpszhuqfdu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\"))-1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmv5ibo9g.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpmv5ibo9g.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmv5ibo9g.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmv5ibo9g.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return count(s\
    \ -> startswith(s, \"I\"), sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpy071yaq0.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy071yaq0.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy071yaq0.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpy071yaq0.jl:27\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy071yaq0.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy071yaq0.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy071yaq0.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.!?]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcq14fc5o.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcq14fc5o.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcq14fc5o.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpcq14fc5o.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcq14fc5o.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcq14fc5o.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcq14fc5o.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return count(s\
    \ -> startswith(s, \"I\"), sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxxh2guvs.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxxh2guvs.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxh2guvs.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpxxh2guvs.jl:27\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxxh2guvs.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxh2guvs.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxxh2guvs.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp588gc4pv.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp588gc4pv.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp588gc4pv.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp588gc4pv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    sentences = split(S, r\"[.?!]\")\n    for sentence in\
    \ sentences\n        if startswith(sentence, \"I\")\n            boredoms += 1\n\
    \        end\n    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpd1cu8kcb.jl:28\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd1cu8kcb.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd1cu8kcb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpd1cu8kcb.jl:31\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpd1cu8kcb.jl:31 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd1cu8kcb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd1cu8kcb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, \".\")\n        if i[1] == 'I'\n    \
    \        count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2dlxeamu.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2dlxeamu.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2dlxeamu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp2dlxeamu.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2dlxeamu.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2dlxeamu.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2dlxeamu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7o9lcm8i.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7o9lcm8i.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7o9lcm8i.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp7o9lcm8i.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7o9lcm8i.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7o9lcm8i.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7o9lcm8i.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    sentences = split(S, r\"[.?!]\")\n    boredoms = 0\n    for sentence in\
    \ sentences\n        if startswith(sentence, \"I\")\n            boredoms += 1\n\
    \        end\n    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzlrsvjkb.jl:28\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzlrsvjkb.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzlrsvjkb.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpzlrsvjkb.jl:31\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpzlrsvjkb.jl:31 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzlrsvjkb.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzlrsvjkb.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqdx8rpvq.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpqdx8rpvq.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqdx8rpvq.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqdx8rpvq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi254ie_z.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpi254ie_z.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi254ie_z.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpi254ie_z.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi254ie_z.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi254ie_z.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi254ie_z.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwodn073f.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpwodn073f.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwodn073f.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwodn073f.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, [\".\", \"?\", \"!\"])\n  \
    \      if startswith(sentence, \"I\")\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpe0qn_ao0.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world\") == 0\\n  MethodError: no\
    \ method matching findfirst(::Vector{String}, ::String)\\n  Closest candidates\
    \ are:\\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at array.jl:1910\\n    findfirst(!Matched::Function, ::Any) at array.jl:1902\\\
    n    findfirst(!Matched::AbstractString, ::AbstractString) at strings/search.jl:104\\\
    n    ...\\n  Stacktrace:\\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\\n     @ Base\
    \ ./strings/util.jl:419\\n   [2] split(str::String, splitter::Vector{String};\
    \ limit::Int64, keepempty::Bool)\\n     @ Base ./strings/util.jl:403\\n   [3]\
    \ split(str::String, splitter::Vector{String})\\n     @ Base ./strings/util.jl:403\\\
    n   [4] is_bored(S::String)\\n     @ Main /tmp/tmpe0qn_ao0.jl:14\\n   [5] macro\
    \ expansion\\n     @ /tmp/tmpe0qn_ao0.jl:26 [inlined]\\n   [6] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpe0qn_ao0.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpe0qn_ao0.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1910\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(!Matched::AbstractString, ::AbstractString)\
    \ at strings/search.jl:104\\n    ...\\n  Stacktrace:\\n   [1] _split(str::String,\
    \ splitter::Vector{String}, limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\\\
    n     @ Base ./strings/util.jl:419\\n   [2] split(str::String, splitter::Vector{String};\
    \ limit::Int64, keepempty::Bool)\\n     @ Base ./strings/util.jl:403\\n   [3]\
    \ split(str::String, splitter::Vector{String})\\n     @ Base ./strings/util.jl:403\\\
    n   [4] is_bored(S::String)\\n     @ Ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpof85573s.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpof85573s.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpof85573s.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpof85573s.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcwhislgt.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpcwhislgt.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcwhislgt.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcwhislgt.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpyb9yngy4.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyb9yngy4.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyb9yngy4.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyb9yngy4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpulbt72kb.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpulbt72kb.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpulbt72kb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpulbt72kb.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpulbt72kb.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpulbt72kb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpulbt72kb.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpulbt72kb.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpulbt72kb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpulbt72kb.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpulbt72kb.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpulbt72kb.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpulbt72kb.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpulbt72kb.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpulbt72kb.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpulbt72kb.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyi3i_htr.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpyi3i_htr.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyi3i_htr.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyi3i_htr.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu_pr8ahk.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpu_pr8ahk.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu_pr8ahk.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_pr8ahk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpat428taf.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpat428taf.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpat428taf.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpat428taf.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjc2vk8wz.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjc2vk8wz.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc2vk8wz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjc2vk8wz.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjc2vk8wz.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc2vk8wz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjc2vk8wz.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjc2vk8wz.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc2vk8wz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjc2vk8wz.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjc2vk8wz.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc2vk8wz.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjc2vk8wz.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjc2vk8wz.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc2vk8wz.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjc2vk8wz.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, [\".\", \"?\", \"!\"])\n  \
    \      if startswith(sentence, \"I\")\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkdkurfp9.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world\") == 0\\n  MethodError: no\
    \ method matching findfirst(::Vector{String}, ::String)\\n  Closest candidates\
    \ are:\\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at array.jl:1910\\n    findfirst(!Matched::Function, ::Any) at array.jl:1902\\\
    n    findfirst(!Matched::AbstractString, ::AbstractString) at strings/search.jl:104\\\
    n    ...\\n  Stacktrace:\\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\\n     @ Base\
    \ ./strings/util.jl:419\\n   [2] split(str::String, splitter::Vector{String};\
    \ limit::Int64, keepempty::Bool)\\n     @ Base ./strings/util.jl:403\\n   [3]\
    \ split(str::String, splitter::Vector{String})\\n     @ Base ./strings/util.jl:403\\\
    n   [4] is_bored(S::String)\\n     @ Main /tmp/tmpkdkurfp9.jl:14\\n   [5] macro\
    \ expansion\\n     @ /tmp/tmpkdkurfp9.jl:26 [inlined]\\n   [6] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpkdkurfp9.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpkdkurfp9.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1910\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(!Matched::AbstractString, ::AbstractString)\
    \ at strings/search.jl:104\\n    ...\\n  Stacktrace:\\n   [1] _split(str::String,\
    \ splitter::Vector{String}, limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\\\
    n     @ Base ./strings/util.jl:419\\n   [2] split(str::String, splitter::Vector{String};\
    \ limit::Int64, keepempty::Bool)\\n     @ Base ./strings/util.jl:403\\n   [3]\
    \ split(str::String, splitter::Vector{String})\\n     @ Base ./strings/util.jl:403\\\
    n   [4] is_bored(S::String)\\n     @ Ma"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return count(s\
    \ -> startswith(s, \"I\"), sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpc1g__7ou.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc1g__7ou.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc1g__7ou.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpc1g__7ou.jl:27\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc1g__7ou.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc1g__7ou.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc1g__7ou.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4l2xgtpe.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4l2xgtpe.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4l2xgtpe.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp4l2xgtpe.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4l2xgtpe.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4l2xgtpe.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4l2xgtpe.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyc62qx0g.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpyc62qx0g.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyc62qx0g.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyc62qx0g.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxkmm57za.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxkmm57za.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxkmm57za.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxkmm57za.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppsqrjfdq.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmppsqrjfdq.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppsqrjfdq.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppsqrjfdq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S,\"I\"))-1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_n45b401.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_n45b401.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_n45b401.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_n45b401.jl:22\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_n45b401.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_n45b401.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_n45b401.jl:23\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_n45b401.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_n45b401.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_n45b401.jl:24\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_n45b401.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_n45b401.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp_n45b401.jl:25\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_n45b401.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_n45b401.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_n45b401.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, ['.', '?', '!'])\n        if i[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpuviiic_p.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmpuviiic_p.jl:15\\n   [4] macro expansion\\n     @ /tmp/tmpuviiic_p.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpuviiic_p.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpuviiic_p.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmpuviiic_p.jl:15\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmpuviiic_p.jl:28 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpuviiic_p.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmpuviiic_p.jl:30\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpuviiic_p.jl:30 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpuviiic_p.jl:25\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbo1afxhh.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbo1afxhh.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbo1afxhh.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbo1afxhh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7na58ifc.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7na58ifc.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7na58ifc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp7na58ifc.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp7na58ifc.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7na58ifc.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7na58ifc.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo789141l.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo789141l.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo789141l.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo789141l.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo789141l.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo789141l.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo789141l.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    num_boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if\
    \ startswith(sentence, \"I\")\n            num_boredoms += 1\n        end\n  \
    \  end\n    return num_boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp6ygiv_hu.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6ygiv_hu.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ygiv_hu.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6ygiv_hu.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6ygiv_hu.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6ygiv_hu.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6ygiv_hu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\s*[.?!]\\s*\")[1:end])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcvsm_65x.jl:20\n  Expression: candidate(\"\
    Hello world\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcvsm_65x.jl:20 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcvsm_65x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcvsm_65x.jl:21\n  Expression: candidate(\"Is the sky blue?\"\
    ) == 0\n   Evaluated: 2 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcvsm_65x.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcvsm_65x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcvsm_65x.jl:22\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcvsm_65x.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcvsm_65x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcvsm_65x.jl:23\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcvsm_65x.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcvsm_65x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcvsm_65x.jl:24\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcvsm_65x.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcvsm_65x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcvsm_65x.jl:25\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcvsm_65x.jl:25 [inlined]\n "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcvsm_65x.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, r\"[.?!]\")\n        if word[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_c6b2cqq.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmp_c6b2cqq.jl:15\\n   [4] macro expansion\\n     @ /tmp/tmp_c6b2cqq.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp_c6b2cqq.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp_c6b2cqq.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmp_c6b2cqq.jl:15\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmp_c6b2cqq.jl:28 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp_c6b2cqq.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmp_c6b2cqq.jl:30\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmp_c6b2cqq.jl:30 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_c6b2cqq.jl:25\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return length(filter(s\
    \ -> startswith(s, \"I\"), sentences))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9od8o7zi.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9od8o7zi.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9od8o7zi.jl:22\ntest set: Test\
    \ Failed at /tmp/tmp9od8o7zi.jl:27\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9od8o7zi.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9od8o7zi.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9od8o7zi.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb9_ozr7r.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpb9_ozr7r.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb9_ozr7r.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb9_ozr7r.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3b5twi29.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp3b5twi29.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3b5twi29.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3b5twi29.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwww4dug9.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwww4dug9.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwww4dug9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpwww4dug9.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwww4dug9.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwww4dug9.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwww4dug9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnf8e_nq9.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnf8e_nq9.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnf8e_nq9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpnf8e_nq9.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnf8e_nq9.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnf8e_nq9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpnf8e_nq9.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnf8e_nq9.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnf8e_nq9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpnf8e_nq9.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpnf8e_nq9.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnf8e_nq9.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpnf8e_nq9.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnf8e_nq9.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnf8e_nq9.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnf8e_nq9.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpupl_klxd.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpupl_klxd.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpupl_klxd.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpupl_klxd.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpupl_klxd.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpupl_klxd.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpupl_klxd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpii4dab0i.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpii4dab0i.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpii4dab0i.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpii4dab0i.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpii4dab0i.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpii4dab0i.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpii4dab0i.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return count(eachmatch(r\"I[^.!?]*[.!?]\", S))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2zx24_gh.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Is the sky blue?\") == 0\n  TypeError: non-boolean\
    \ (RegexMatch) used in boolean context\n  Stacktrace:\n   [1] _simple_count\n\
    \     @ ./reduce.jl:970 [inlined]\n   [2] #count#233\n     @ ./reduce.jl:965 [inlined]\n\
    \   [3] #count#232\n     @ ./reduce.jl:963 [inlined]\n   [4] count\n     @ ./reduce.jl:963\
    \ [inlined]\n   [5] is_bored(S::String)\n     @ Main /tmp/tmp2zx24_gh.jl:13\n\
    \   [6] macro expansion\n     @ /tmp/tmp2zx24_gh.jl:21 [inlined]\n   [7] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp2zx24_gh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp2zx24_gh.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  TypeError: non-boolean (RegexMatch) used\
    \ in boolean context\n  Stacktrace:\n   [1] _simple_count\n     @ ./reduce.jl:970\
    \ [inlined]\n   [2] #count#233\n     @ ./reduce.jl:965 [inlined]\n   [3] #count#232\n\
    \     @ ./reduce.jl:963 [inlined]\n   [4] count\n     @ ./reduce.jl:963 [inlined]\n\
    \   [5] is_bored(S::String)\n     @ Main /tmp/tmp2zx24_gh.jl:13\n   [6] macro\
    \ expansion\n     @ /tmp/tmp2zx24_gh.jl:22 [inlined]\n   [7] macro expansion\n\
    \     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [8] top-level scope\n     @ /tmp/tmp2zx24_gh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp2zx24_gh.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"I feel good today. I will be productive. will kill It\") == 2\n\
    \  TypeError: non-boolean (RegexMatch) used in boolean context\n  Stacktrace:\n\
    \   [1] _simple_count\n     @ ./reduce.jl:970 [inlined]\n   [2] #count#233\n \
    \    @ ./reduce.jl:965 [inlined]\n   [3] #count#232\n     @ ./reduce.jl:963 [inlined]\n\
    \   [4] count\n     @ ./reduce.jl:963 [inlined]\n   [5] is_bored(S::String)\n\
    \     @ Main /tmp/tmp2zx24_gh.jl:13\n   [6] macro expansion\n     @ /tmp/tmp2zx24_gh.jl:24\
    \ [inlined]\n   [7] macro expansion\n     @ /buildworker/worker/package_l"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2zx24_gh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    words = split(S, r\"[.?!]\")\n    boredoms = 0\n    for word in words\n\
    \        if word[1] == 'I'\n            boredoms += 1\n        end\n    end\n\
    \    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9_lq50tg.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmp9_lq50tg.jl:16\\n   [4] macro expansion\\n     @ /tmp/tmp9_lq50tg.jl:28\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp9_lq50tg.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp9_lq50tg.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmp9_lq50tg.jl:16\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmp9_lq50tg.jl:29 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp9_lq50tg.jl:26\\ntest set:\
    \ Test Failed at /tmp/tmp9_lq50tg.jl:31\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmp9_lq50tg.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp9_lq50tg.jl:26\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\?|\\.|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpidnusq6p.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpidnusq6p.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpidnusq6p.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidnusq6p.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5468hqy8.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp5468hqy8.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5468hqy8.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5468hqy8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy4ft8xam.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpy4ft8xam.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy4ft8xam.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy4ft8xam.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = split(S, \".!?\")\n    count = 0\n    for s in S\n        if s[1]\
    \ == 'I'\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsx6r_c7w.jl:28\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsx6r_c7w.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsx6r_c7w.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpsx6r_c7w.jl:31\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsx6r_c7w.jl:31 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsx6r_c7w.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsx6r_c7w.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa_jx2p8n.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpa_jx2p8n.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa_jx2p8n.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_jx2p8n.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp70iwwyt.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpp70iwwyt.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp70iwwyt.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp70iwwyt.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpooius2jt.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpooius2jt.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpooius2jt.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpooius2jt.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpooius2jt.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpooius2jt.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpooius2jt.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpooius2jt.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpooius2jt.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpooius2jt.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpooius2jt.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpooius2jt.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpooius2jt.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpooius2jt.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpooius2jt.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpooius2jt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuf0tc_ot.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpuf0tc_ot.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuf0tc_ot.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuf0tc_ot.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprt0ytlk6.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprt0ytlk6.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprt0ytlk6.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprt0ytlk6.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprt0ytlk6.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprt0ytlk6.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprt0ytlk6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprvlw2x0t.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprvlw2x0t.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprvlw2x0t.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprvlw2x0t.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprvlw2x0t.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprvlw2x0t.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvlw2x0t.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjxoiqr4q.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpjxoiqr4q.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjxoiqr4q.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjxoiqr4q.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr5t040jk.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpr5t040jk.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr5t040jk.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr5t040jk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjp6q_w0n.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjp6q_w0n.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjp6q_w0n.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjp6q_w0n.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjp6q_w0n.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjp6q_w0n.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjp6q_w0n.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjp6q_w0n.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjp6q_w0n.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjp6q_w0n.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjp6q_w0n.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjp6q_w0n.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpjp6q_w0n.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjp6q_w0n.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjp6q_w0n.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjp6q_w0n.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpssgdq01f.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpssgdq01f.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpssgdq01f.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpssgdq01f.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return count(split(S, r\"\\.|\\?|\\!\")) do s\n        s[1] == 'I'\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpiq69m732.jl:23\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \  [1] checkbounds\\n      @ ./strings/basic.jl:216 [inlined]\\n    [2] getindex(s::SubString{String},\
    \ i::Int64)\\n      @ Base ./strings/substring.jl:83\\n    [3] #1\\n      @ /tmp/tmpiq69m732.jl:14\
    \ [inlined]\\n    [4] _simple_count\\n      @ ./reduce.jl:970 [inlined]\\n   \
    \ [5] _count\\n      @ ./reducedim.jl:395 [inlined]\\n    [6] #count#682\\n  \
    \    @ ./reducedim.jl:393 [inlined]\\n    [7] count\\n      @ ./reducedim.jl:393\
    \ [inlined]\\n    [8] is_bored(S::String)\\n      @ Main /tmp/tmpiq69m732.jl:13\\\
    n    [9] macro expansion\\n      @ /tmp/tmpiq69m732.jl:23 [inlined]\\n   [10]\
    \ macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpiq69m732.jl:21\\ntest\
    \ set: Error During Test at /tmp/tmpiq69m732.jl:24\\n  Test threw exception\\\
    n  Expression: candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access\
    \ empty SubString{String} at index [1]\\n  Stacktrace:\\n    [1] checkbounds\\\
    n      @ ./strings/basic.jl:216 [inlined]\\n    [2] getindex(s::SubString{String},\
    \ i::Int64)\\n      @ Base ./strings/substring.jl:83\\n    [3] #1\\n      @ /tmp/tmpiq69m732.jl:14\
    \ [inlined]\\n    [4] _simple_count\\n      @ ./reduce.jl:970 [inlined]\\n   \
    \ [5] _count\\n      @ ./reducedim.jl:395 [inlined]\\n    [6] #count#682\\n  \
    \    @ ./reducedim.jl:393 [inlined]\\n    [7] count\\n      @ ./reducedim.jl:393\
    \ [inlined]\\n    [8] is_bored(S::String)\\n      @ Main /tmp/tmpiq69m732.jl:13\\\
    n    [9] macro expansion\\n      @ /tmp/tmpiq69m732.jl:24 [inlined]\\n   [10]\
    \ macro expansion\\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [11] top-level scope\\n      @ /tmp/tmpiq69m732.jl:21\\ntest\
    \ set: Test Failed at /tmp/tmpiq69m732.jl:26\\n  Expression: candidate(\"I feel\
    \ good today. I will be produc"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgwahuwo2.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgwahuwo2.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgwahuwo2.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgwahuwo2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptiu3r7rh.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptiu3r7rh.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptiu3r7rh.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptiu3r7rh.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptiu3r7rh.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptiu3r7rh.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptiu3r7rh.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptiu3r7rh.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptiu3r7rh.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptiu3r7rh.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptiu3r7rh.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptiu3r7rh.jl:25\ntest set: Test\
    \ Failed at /tmp/tmptiu3r7rh.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptiu3r7rh.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptiu3r7rh.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptiu3r7rh.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpgnx75ck9.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgnx75ck9.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgnx75ck9.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgnx75ck9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = split(S, \".\")\n    boredoms = 0\n    for sentence in S\n       \
    \ if sentence[1] == 'I'\n            boredoms += 1\n        end\n    end\n   \
    \ return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpydvsmi6_.jl:28\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpydvsmi6_.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpydvsmi6_.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpydvsmi6_.jl:31\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpydvsmi6_.jl:31 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpydvsmi6_.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpydvsmi6_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphtzbqhap.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphtzbqhap.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphtzbqhap.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphtzbqhap.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, [\".\", \"?\", \"!\"])\n  \
    \      if startswith(sentence, \"I\")\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmps0j8lpqo.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world\") == 0\\n  MethodError: no\
    \ method matching findfirst(::Vector{String}, ::String)\\n  Closest candidates\
    \ are:\\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at array.jl:1910\\n    findfirst(!Matched::Function, ::Any) at array.jl:1902\\\
    n    findfirst(!Matched::AbstractString, ::AbstractString) at strings/search.jl:104\\\
    n    ...\\n  Stacktrace:\\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\\n     @ Base\
    \ ./strings/util.jl:419\\n   [2] split(str::String, splitter::Vector{String};\
    \ limit::Int64, keepempty::Bool)\\n     @ Base ./strings/util.jl:403\\n   [3]\
    \ split(str::String, splitter::Vector{String})\\n     @ Base ./strings/util.jl:403\\\
    n   [4] is_bored(S::String)\\n     @ Main /tmp/tmps0j8lpqo.jl:14\\n   [5] macro\
    \ expansion\\n     @ /tmp/tmps0j8lpqo.jl:26 [inlined]\\n   [6] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmps0j8lpqo.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmps0j8lpqo.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1910\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(!Matched::AbstractString, ::AbstractString)\
    \ at strings/search.jl:104\\n    ...\\n  Stacktrace:\\n   [1] _split(str::String,\
    \ splitter::Vector{String}, limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\\\
    n     @ Base ./strings/util.jl:419\\n   [2] split(str::String, splitter::Vector{String};\
    \ limit::Int64, keepempty::Bool)\\n     @ Base ./strings/util.jl:403\\n   [3]\
    \ split(str::String, splitter::Vector{String})\\n     @ Base ./strings/util.jl:403\\\
    n   [4] is_bored(S::String)\\n     @ Ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    words = split(S, r\"[.?!]\")\n    boredoms = 0\n    for word in words\n\
    \        if word[1] == 'I'\n            boredoms += 1\n        end\n    end\n\
    \    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_vhqbvp9.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmp_vhqbvp9.jl:16\\n   [4] macro expansion\\n     @ /tmp/tmp_vhqbvp9.jl:28\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp_vhqbvp9.jl:26\\ntest set:\
    \ Error During Test at /tmp/tmp_vhqbvp9.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmp_vhqbvp9.jl:16\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmp_vhqbvp9.jl:29 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp_vhqbvp9.jl:26\\ntest set:\
    \ Test Failed at /tmp/tmp_vhqbvp9.jl:31\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmp_vhqbvp9.jl:31 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp_vhqbvp9.jl:26\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdslp65w_.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdslp65w_.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdslp65w_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpdslp65w_.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdslp65w_.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdslp65w_.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdslp65w_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\"))-1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpibf80c_v.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpibf80c_v.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpibf80c_v.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibf80c_v.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\"))-1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprjtwxj72.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmprjtwxj72.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprjtwxj72.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprjtwxj72.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\"))-1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpusw9bt4a.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpusw9bt4a.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpusw9bt4a.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpusw9bt4a.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeqyx3kae.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpeqyx3kae.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeqyx3kae.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeqyx3kae.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx2xmxr87.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx2xmxr87.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx2xmxr87.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpx2xmxr87.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx2xmxr87.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx2xmxr87.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpx2xmxr87.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx2xmxr87.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx2xmxr87.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpx2xmxr87.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpx2xmxr87.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx2xmxr87.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpx2xmxr87.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx2xmxr87.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx2xmxr87.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx2xmxr87.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return count(x->x==\"I\", split(S, ['.', '?', '!']))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp40esorx3.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp40esorx3.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp40esorx3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp40esorx3.jl:24\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp40esorx3.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp40esorx3.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp40esorx3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    sentences = split(S, [\".\", \"?\", \"!\"])\n    for\
    \ sentence in sentences\n        words = split(sentence)\n        if words[1]\
    \ == \"I\"\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzy6xqhjf.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world\") == 0\\n  MethodError: no\
    \ method matching findfirst(::Vector{String}, ::String)\\n  Closest candidates\
    \ are:\\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at array.jl:1910\\n    findfirst(!Matched::Function, ::Any) at array.jl:1902\\\
    n    findfirst(!Matched::AbstractString, ::AbstractString) at strings/search.jl:104\\\
    n    ...\\n  Stacktrace:\\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\\n     @ Base\
    \ ./strings/util.jl:419\\n   [2] split(str::String, splitter::Vector{String};\
    \ limit::Int64, keepempty::Bool)\\n     @ Base ./strings/util.jl:403\\n   [3]\
    \ split(str::String, splitter::Vector{String})\\n     @ Base ./strings/util.jl:403\\\
    n   [4] is_bored(S::String)\\n     @ Main /tmp/tmpzy6xqhjf.jl:14\\n   [5] macro\
    \ expansion\\n     @ /tmp/tmpzy6xqhjf.jl:28 [inlined]\\n   [6] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmpzy6xqhjf.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmpzy6xqhjf.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1910\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(!Matched::AbstractString, ::AbstractString)\
    \ at strings/search.jl:104\\n    ...\\n  Stacktrace:\\n   [1] _split(str::String,\
    \ splitter::Vector{String}, limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\\\
    n     @ Base ./strings/util.jl:419\\n   [2] split(str::String, splitter::Vector{String};\
    \ limit::Int64, keepempty::Bool)\\n     @ Base ./strings/util.jl:403\\n   [3]\
    \ split(str::String, splitter::Vector{String})\\n     @ Base ./strings/util.jl:403\\\
    n   [4] is_bored(S::String)\\n     @ Ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwtfybed7.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwtfybed7.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtfybed7.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwtfybed7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpdph6af_t.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdph6af_t.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdph6af_t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdph6af_t.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    boredoms = 0\n    for sentence in sentences\n        # Split the sentence\
    \ into words\n        words = split(sentence)\n        if words[1] == \"I\"\n\
    \            boredoms += 1\n        end\n    end\n    return boredoms\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7dizco4b.jl:31\n  Test threw exception\n\
    \  Expression: candidate(\"Is the sky blue?\") == 0\n  BoundsError: attempt to\
    \ access 0-element Vector{SubString{String}} at index [1]\n  Stacktrace:\n   [1]\
    \ getindex\n     @ ./array.jl:805 [inlined]\n   [2] is_bored(S::String)\n    \
    \ @ Main /tmp/tmp7dizco4b.jl:19\n   [3] macro expansion\n     @ /tmp/tmp7dizco4b.jl:31\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7dizco4b.jl:29\ntest set:\
    \ Error During Test at /tmp/tmp7dizco4b.jl:32\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  BoundsError: attempt to access 0-element\
    \ Vector{SubString{String}} at index [1]\n  Stacktrace:\n   [1] getindex\n   \
    \  @ ./array.jl:805 [inlined]\n   [2] is_bored(S::String)\n     @ Main /tmp/tmp7dizco4b.jl:19\n\
    \   [3] macro expansion\n     @ /tmp/tmp7dizco4b.jl:32 [inlined]\n   [4] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7dizco4b.jl:29\nTest Summary:\
    \ | Pass  Error  Total\ntest set      |    4      2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 0 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7dizco4b.jl:27\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpr8fy_h66.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr8fy_h66.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr8fy_h66.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr8fy_h66.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, ['.', '?', '!'])\n        if word[1]\
    \ == 'I'\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpee39tbzp.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmpee39tbzp.jl:15\\n   [4] macro expansion\\n     @ /tmp/tmpee39tbzp.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpee39tbzp.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpee39tbzp.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmpee39tbzp.jl:15\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmpee39tbzp.jl:28 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpee39tbzp.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmpee39tbzp.jl:30\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpee39tbzp.jl:30 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpee39tbzp.jl:25\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv9cqe6xl.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpv9cqe6xl.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv9cqe6xl.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv9cqe6xl.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.!?]\"\
    )\n    # Filter the sentences that start with \"I\"\n    boredoms = filter(x ->\
    \ startswith(x, \"I\"), sentences)\n    # Return the length of the filtered array\n\
    \    return length(boredoms)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpndq7juff.jl:26\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpndq7juff.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpndq7juff.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpndq7juff.jl:29\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpndq7juff.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpndq7juff.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpndq7juff.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, \".\")\n        if split(i, \" \")[1]\
    \ == \"I\"\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps90m0gll.jl:30\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n   Evaluated: 1\
    \ == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps90m0gll.jl:30 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps90m0gll.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps90m0gll.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7drqrx_k.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7drqrx_k.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7drqrx_k.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7drqrx_k.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, r\"[.?!]\")\n        if word[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwvacdhmh.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmpwvacdhmh.jl:15\\n   [4] macro expansion\\n     @ /tmp/tmpwvacdhmh.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpwvacdhmh.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpwvacdhmh.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmpwvacdhmh.jl:15\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmpwvacdhmh.jl:28 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpwvacdhmh.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmpwvacdhmh.jl:30\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpwvacdhmh.jl:30 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpwvacdhmh.jl:25\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps4kuvqzc.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps4kuvqzc.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps4kuvqzc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps4kuvqzc.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps4kuvqzc.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps4kuvqzc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps4kuvqzc.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmps4kuvqzc.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps4kuvqzc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps4kuvqzc.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps4kuvqzc.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps4kuvqzc.jl:25\ntest set: Test\
    \ Failed at /tmp/tmps4kuvqzc.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps4kuvqzc.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps4kuvqzc.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps4kuvqzc.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpa_hcbkxm.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa_hcbkxm.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa_hcbkxm.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa_hcbkxm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return count(s\
    \ -> startswith(s, \"I\"), sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpi1eugc7q.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpi1eugc7q.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi1eugc7q.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpi1eugc7q.jl:27\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi1eugc7q.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi1eugc7q.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi1eugc7q.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, [\".\", \"?\", \"!\"])\n  \
    \      if startswith(sentence, \"I\")\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7ol0j3o2.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Hello world\") == 0\\n  MethodError: no\
    \ method matching findfirst(::Vector{String}, ::String)\\n  Closest candidates\
    \ are:\\n    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray})\
    \ at array.jl:1910\\n    findfirst(!Matched::Function, ::Any) at array.jl:1902\\\
    n    findfirst(!Matched::AbstractString, ::AbstractString) at strings/search.jl:104\\\
    n    ...\\n  Stacktrace:\\n   [1] _split(str::String, splitter::Vector{String},\
    \ limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\\n     @ Base\
    \ ./strings/util.jl:419\\n   [2] split(str::String, splitter::Vector{String};\
    \ limit::Int64, keepempty::Bool)\\n     @ Base ./strings/util.jl:403\\n   [3]\
    \ split(str::String, splitter::Vector{String})\\n     @ Base ./strings/util.jl:403\\\
    n   [4] is_bored(S::String)\\n     @ Main /tmp/tmp7ol0j3o2.jl:14\\n   [5] macro\
    \ expansion\\n     @ /tmp/tmp7ol0j3o2.jl:26 [inlined]\\n   [6] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [7] top-level scope\\n     @ /tmp/tmp7ol0j3o2.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp7ol0j3o2.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\\n  MethodError: no method matching findfirst(::Vector{String},\
    \ ::String)\\n  Closest candidates are:\\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1910\\n    findfirst(!Matched::Function, ::Any)\
    \ at array.jl:1902\\n    findfirst(!Matched::AbstractString, ::AbstractString)\
    \ at strings/search.jl:104\\n    ...\\n  Stacktrace:\\n   [1] _split(str::String,\
    \ splitter::Vector{String}, limit::Int64, keepempty::Bool, strs::Vector{SubString{String}})\\\
    n     @ Base ./strings/util.jl:419\\n   [2] split(str::String, splitter::Vector{String};\
    \ limit::Int64, keepempty::Bool)\\n     @ Base ./strings/util.jl:403\\n   [3]\
    \ split(str::String, splitter::Vector{String})\\n     @ Base ./strings/util.jl:403\\\
    n   [4] is_bored(S::String)\\n     @ Ma"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmptk4lj7oy.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptk4lj7oy.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptk4lj7oy.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptk4lj7oy.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6nrrh29_.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6nrrh29_.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6nrrh29_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6nrrh29_.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6nrrh29_.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6nrrh29_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6nrrh29_.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6nrrh29_.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6nrrh29_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6nrrh29_.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6nrrh29_.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6nrrh29_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6nrrh29_.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6nrrh29_.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6nrrh29_.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6nrrh29_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3i5pvr6w.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3i5pvr6w.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3i5pvr6w.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3i5pvr6w.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3i5pvr6w.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3i5pvr6w.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3i5pvr6w.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3i5pvr6w.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3i5pvr6w.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3i5pvr6w.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3i5pvr6w.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3i5pvr6w.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3i5pvr6w.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3i5pvr6w.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3i5pvr6w.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3i5pvr6w.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxd8dkvbw.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxd8dkvbw.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxd8dkvbw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxd8dkvbw.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxd8dkvbw.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxd8dkvbw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxd8dkvbw.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxd8dkvbw.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxd8dkvbw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxd8dkvbw.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxd8dkvbw.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxd8dkvbw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpxd8dkvbw.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxd8dkvbw.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxd8dkvbw.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxd8dkvbw.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpm05o55tv.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm05o55tv.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm05o55tv.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm05o55tv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"[.!?]\")) - length(split(S, r\"[.!?]I\"))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl2a52cno.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpl2a52cno.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl2a52cno.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl2a52cno.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmppi6tst5x.jl:23\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppi6tst5x.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppi6tst5x.jl:20\ntest set: Test\
    \ Failed at /tmp/tmppi6tst5x.jl:25\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppi6tst5x.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppi6tst5x.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppi6tst5x.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_tjlvwrg.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp_tjlvwrg.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_tjlvwrg.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_tjlvwrg.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, r\"[.?!]\")\n        if word[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptuou74cu.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmptuou74cu.jl:15\\n   [4] macro expansion\\n     @ /tmp/tmptuou74cu.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptuou74cu.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmptuou74cu.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmptuou74cu.jl:15\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmptuou74cu.jl:28 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmptuou74cu.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmptuou74cu.jl:30\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmptuou74cu.jl:30 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmptuou74cu.jl:25\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf23kjgnq.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf23kjgnq.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf23kjgnq.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpf23kjgnq.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf23kjgnq.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf23kjgnq.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf23kjgnq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw8haismk.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw8haismk.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8haismk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpw8haismk.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw8haismk.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8haismk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpw8haismk.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw8haismk.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8haismk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpw8haismk.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpw8haismk.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8haismk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpw8haismk.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw8haismk.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8haismk.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw8haismk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzku48kjw.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzku48kjw.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzku48kjw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzku48kjw.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzku48kjw.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzku48kjw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzku48kjw.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzku48kjw.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzku48kjw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzku48kjw.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpzku48kjw.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzku48kjw.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpzku48kjw.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzku48kjw.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzku48kjw.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzku48kjw.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, r\"[.?!]\")\n        if word[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2kfes9ai.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmp2kfes9ai.jl:15\\n   [4] macro expansion\\n     @ /tmp/tmp2kfes9ai.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp2kfes9ai.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmp2kfes9ai.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmp2kfes9ai.jl:15\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmp2kfes9ai.jl:28 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmp2kfes9ai.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmp2kfes9ai.jl:30\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmp2kfes9ai.jl:30 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmp2kfes9ai.jl:25\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return sum(starts_with(s,\
    \ \"I\") for s in sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp0h_ssg2z.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: starts_with not\
    \ defined\n  Stacktrace:\n    [1] (::var\"#1#2\")(s::SubString{String})\n    \
    \  @ Main ./none:0\n    [2] MappingRF\n      @ ./reduce.jl:93 [inlined]\n    [3]\
    \ _foldl_impl(op::Base.MappingRF{var\"#1#2\", Base.BottomRF{typeof(Base.add_sum)}},\
    \ init::Base._InitialValue, itr::Vector{SubString{String}})\n      @ Base ./reduce.jl:58\n\
    \    [4] foldl_impl\n      @ ./reduce.jl:48 [inlined]\n    [5] mapfoldl_impl\n\
    \      @ ./reduce.jl:44 [inlined]\n    [6] #mapfoldl#214\n      @ ./reduce.jl:160\
    \ [inlined]\n    [7] mapfoldl\n      @ ./reduce.jl:160 [inlined]\n    [8] #mapreduce#218\n\
    \      @ ./reduce.jl:287 [inlined]\n    [9] mapreduce\n      @ ./reduce.jl:287\
    \ [inlined]\n   [10] #sum#221\n      @ ./reduce.jl:501 [inlined]\n   [11] sum\n\
    \      @ ./reduce.jl:501 [inlined]\n   [12] #sum#222\n      @ ./reduce.jl:528\
    \ [inlined]\n   [13] sum\n      @ ./reduce.jl:528 [inlined]\n   [14] is_bored(S::String)\n\
    \      @ Main /tmp/tmp0h_ssg2z.jl:16\n   [15] macro expansion\n      @ /tmp/tmp0h_ssg2z.jl:23\
    \ [inlined]\n   [16] macro expansion\n      @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [17] top-level scope\n      @ /tmp/tmp0h_ssg2z.jl:22\ntest set:\
    \ Error During Test at /tmp/tmp0h_ssg2z.jl:24\n  Test threw exception\n  Expression:\
    \ candidate(\"Is the sky blue?\") == 0\n  UndefVarError: starts_with not defined\n\
    \  Stacktrace:\n    [1] (::var\"#1#2\")(s::SubString{String})\n      @ Main ./none:0\n\
    \    [2] MappingRF\n      @ ./reduce.jl:93 [inlined]\n    [3] _foldl_impl(op::Base.MappingRF{var\"\
    #1#2\", Base.BottomRF{typeof(Base.add_sum)}}, init::Base._InitialValue, itr::Vector{SubString{String}})\n\
    \      @ Base ./reduce.jl:58\n    [4] foldl_impl\n      @ ./reduce.jl:48 [inlined]\n\
    \    [5] mapfoldl_impl\n      @ ./reduce.jl:44 [inlined]\n    [6] #mapfoldl#214\n\
    \      @ ./reduce.jl:160 [inlined]\n    [7] mapfoldl\n      @ ./reduce.jl:160\
    \ [inlined]\n    [8] #mapreduce#218\n      @ ./reduce.jl:287 [inlined]\n   "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0h_ssg2z.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    n = 0\n    for s in split(S, r\"[.?!]\")\n        if startswith(s, \"\
    I\")\n            n += 1\n        end\n    end\n    return n\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu21xbc3v.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpu21xbc3v.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu21xbc3v.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpu21xbc3v.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpu21xbc3v.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu21xbc3v.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu21xbc3v.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmptymryyhh.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptymryyhh.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptymryyhh.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptymryyhh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp82a_ocjt.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp82a_ocjt.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp82a_ocjt.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp82a_ocjt.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp7jvsj8yo.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp7jvsj8yo.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7jvsj8yo.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7jvsj8yo.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdt4x4cy5.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpdt4x4cy5.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdt4x4cy5.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdt4x4cy5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_zhvoaw8.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_zhvoaw8.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_zhvoaw8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_zhvoaw8.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_zhvoaw8.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_zhvoaw8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_zhvoaw8.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_zhvoaw8.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_zhvoaw8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_zhvoaw8.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_zhvoaw8.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_zhvoaw8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp_zhvoaw8.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_zhvoaw8.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_zhvoaw8.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_zhvoaw8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, \".\")\n        if i[1] == 'I'\n    \
    \        count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp88tfbsjk.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp88tfbsjk.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp88tfbsjk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp88tfbsjk.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp88tfbsjk.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp88tfbsjk.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp88tfbsjk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkw3cse_f.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkw3cse_f.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkw3cse_f.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkw3cse_f.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, ['.', '?', '!'])\n        if i[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnz3ha132.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmpnz3ha132.jl:15\\n   [4] macro expansion\\n     @ /tmp/tmpnz3ha132.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpnz3ha132.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpnz3ha132.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmpnz3ha132.jl:15\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmpnz3ha132.jl:28 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpnz3ha132.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmpnz3ha132.jl:30\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpnz3ha132.jl:30 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpnz3ha132.jl:25\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # split the string by '.', '?' or '!'\n    sentences = split(S, r\"[.?!]\"\
    )\n    # filter out the sentences that start with 'I'\n    boredoms = filter(x\
    \ -> startswith(x, \"I\"), sentences)\n    # return the length of the filtered\
    \ array\n    return length(boredoms)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphw4rnu1o.jl:26\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphw4rnu1o.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphw4rnu1o.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphw4rnu1o.jl:29\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphw4rnu1o.jl:29 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphw4rnu1o.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphw4rnu1o.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    count = 0\n\
    \    for sentence in sentences\n        if startswith(sentence, \"I\")\n     \
    \       count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpudpxjgmo.jl:30\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpudpxjgmo.jl:30 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudpxjgmo.jl:28\ntest set: Test\
    \ Failed at /tmp/tmpudpxjgmo.jl:33\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpudpxjgmo.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudpxjgmo.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpudpxjgmo.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3pe4t4y8.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3pe4t4y8.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3pe4t4y8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3pe4t4y8.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3pe4t4y8.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3pe4t4y8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3pe4t4y8.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3pe4t4y8.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3pe4t4y8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3pe4t4y8.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3pe4t4y8.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3pe4t4y8.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp3pe4t4y8.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3pe4t4y8.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3pe4t4y8.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3pe4t4y8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, ['.', '?', '!'])\n        if i[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnny_nr5j.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmpnny_nr5j.jl:15\\n   [4] macro expansion\\n     @ /tmp/tmpnny_nr5j.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpnny_nr5j.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpnny_nr5j.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmpnny_nr5j.jl:15\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmpnny_nr5j.jl:28 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpnny_nr5j.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmpnny_nr5j.jl:30\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpnny_nr5j.jl:30 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpnny_nr5j.jl:25\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpudsklmvj.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpudsklmvj.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpudsklmvj.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpudsklmvj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2l0fmhbl.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2l0fmhbl.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2l0fmhbl.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2l0fmhbl.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"I\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpcv7jb6dj.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcv7jb6dj.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcv7jb6dj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcv7jb6dj.jl:22\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcv7jb6dj.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcv7jb6dj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcv7jb6dj.jl:23\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcv7jb6dj.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcv7jb6dj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcv7jb6dj.jl:24\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcv7jb6dj.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcv7jb6dj.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpcv7jb6dj.jl:25\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcv7jb6dj.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcv7jb6dj.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcv7jb6dj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpzrvxsmo0.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpzrvxsmo0.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzrvxsmo0.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzrvxsmo0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, \".\")\n \
    \   boredoms = 0\n    for sentence in sentences\n        words = split(sentence,\
    \ \" \")\n        if words[1] == \"I\"\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9itrtp80.jl:33\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n   Evaluated: 1\
    \ == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9itrtp80.jl:33 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9itrtp80.jl:28\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9itrtp80.jl:26\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr2rewsx7.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpr2rewsx7.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr2rewsx7.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr2rewsx7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # count the number of sentences that start with \"I\"\n    return sum(s->startswith(s,\
    \ \"I\") ? 1 : 0, sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpgatj9j1d.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgatj9j1d.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgatj9j1d.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpgatj9j1d.jl:27\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgatj9j1d.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgatj9j1d.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgatj9j1d.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpn43kappp.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpn43kappp.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn43kappp.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn43kappp.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpolk11_xv.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpolk11_xv.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpolk11_xv.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpolk11_xv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    sentences = split(S, r\"[.?!]\")\n    boredoms = 0\n    for sentence in\
    \ sentences\n        if startswith(sentence, \"I\")\n            boredoms += 1\n\
    \        end\n    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxtmh1p79.jl:28\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxtmh1p79.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxtmh1p79.jl:26\ntest set: Test\
    \ Failed at /tmp/tmpxtmh1p79.jl:31\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxtmh1p79.jl:31 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxtmh1p79.jl:26\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxtmh1p79.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_g11qbbk.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp_g11qbbk.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_g11qbbk.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_g11qbbk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmvscrnj7.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmvscrnj7.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvscrnj7.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmvscrnj7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp326puo_m.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp326puo_m.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp326puo_m.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp326puo_m.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, \".\")\n        if startswith(i, \"I\"\
    )\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp90cdcrqo.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp90cdcrqo.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp90cdcrqo.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp90cdcrqo.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp90cdcrqo.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp90cdcrqo.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp90cdcrqo.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphxfpvuu9.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphxfpvuu9.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphxfpvuu9.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphxfpvuu9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.!?]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp37sgg3hk.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp37sgg3hk.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp37sgg3hk.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp37sgg3hk.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp37sgg3hk.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp37sgg3hk.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp37sgg3hk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    n = 0\n    for s in split(S, ['.', '?', '!'])\n        if startswith(s,\
    \ \"I\")\n            n += 1\n        end\n    end\n    return n\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx09lwiyq.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx09lwiyq.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx09lwiyq.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpx09lwiyq.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpx09lwiyq.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx09lwiyq.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx09lwiyq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp92bqlopq.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp92bqlopq.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp92bqlopq.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp92bqlopq.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp92bqlopq.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp92bqlopq.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp92bqlopq.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp92bqlopq.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp92bqlopq.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp92bqlopq.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp92bqlopq.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp92bqlopq.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp92bqlopq.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp92bqlopq.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp92bqlopq.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp92bqlopq.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp45nvgj84.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp45nvgj84.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45nvgj84.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp45nvgj84.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr5iwmo6k.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr5iwmo6k.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr5iwmo6k.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr5iwmo6k.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbzvqzzvb.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpbzvqzzvb.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbzvqzzvb.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbzvqzzvb.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return count(s\
    \ -> startswith(s, \"I\"), sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmplnfdi_5z.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplnfdi_5z.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplnfdi_5z.jl:22\ntest set: Test\
    \ Failed at /tmp/tmplnfdi_5z.jl:27\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplnfdi_5z.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplnfdi_5z.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplnfdi_5z.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, \" \")\n        if word == \"I\"\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp69ag8ath.jl:31\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp69ag8ath.jl:31 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp69ag8ath.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp69ag8ath.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt62_a642.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt62_a642.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt62_a642.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpt62_a642.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpt62_a642.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt62_a642.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt62_a642.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf92k4sco.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf92k4sco.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf92k4sco.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpf92k4sco.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf92k4sco.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf92k4sco.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpf92k4sco.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf92k4sco.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf92k4sco.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpf92k4sco.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf92k4sco.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf92k4sco.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpf92k4sco.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf92k4sco.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf92k4sco.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf92k4sco.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"[.?!]\")) - length(split(S, r\"[.?!]I\"))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxwblnuto.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxwblnuto.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxwblnuto.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxwblnuto.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv4nc7ahl.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv4nc7ahl.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv4nc7ahl.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv4nc7ahl.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdsfhxzuo.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdsfhxzuo.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdsfhxzuo.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdsfhxzuo.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdh8z9df0.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdh8z9df0.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdh8z9df0.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpdh8z9df0.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdh8z9df0.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdh8z9df0.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdh8z9df0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, \"I\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp6k70j42j.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6k70j42j.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k70j42j.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp6k70j42j.jl:22\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6k70j42j.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k70j42j.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp6k70j42j.jl:23\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6k70j42j.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k70j42j.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp6k70j42j.jl:24\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6k70j42j.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k70j42j.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp6k70j42j.jl:25\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6k70j42j.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6k70j42j.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6k70j42j.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return sum(s\
    \ -> startswith(s, \"I\") ? 1 : 0, sentences)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxyzfk5nl.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxyzfk5nl.jl:24 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxyzfk5nl.jl:22\ntest set: Test\
    \ Failed at /tmp/tmpxyzfk5nl.jl:27\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxyzfk5nl.jl:27 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxyzfk5nl.jl:22\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxyzfk5nl.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\"))-1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0l6rp2hf.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp0l6rp2hf.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0l6rp2hf.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0l6rp2hf.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4qpvl3s4.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmp4qpvl3s4.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4qpvl3s4.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4qpvl3s4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjmb24y1j.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpjmb24y1j.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjmb24y1j.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjmb24y1j.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo2le0ja3.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo2le0ja3.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo2le0ja3.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo2le0ja3.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo2le0ja3.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo2le0ja3.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo2le0ja3.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo2le0ja3.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo2le0ja3.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo2le0ja3.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo2le0ja3.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo2le0ja3.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpo2le0ja3.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo2le0ja3.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo2le0ja3.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo2le0ja3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpe4qpvtqo.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe4qpvtqo.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe4qpvtqo.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe4qpvtqo.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    n = 0\n    for i in split(S, \".\")\n        if i[1] == 'I'\n        \
    \    n += 1\n        end\n    end\n    return n\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfvbjin_4.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfvbjin_4.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfvbjin_4.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfvbjin_4.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfvbjin_4.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfvbjin_4.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfvbjin_4.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpyh9qnaed.jl:23\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyh9qnaed.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyh9qnaed.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpyh9qnaed.jl:25\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyh9qnaed.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyh9qnaed.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyh9qnaed.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpo9lhz8ja.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo9lhz8ja.jl:22 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo9lhz8ja.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo9lhz8ja.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, \"I\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpd217il7m.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd217il7m.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd217il7m.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpd217il7m.jl:22\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd217il7m.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd217il7m.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpd217il7m.jl:23\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd217il7m.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd217il7m.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpd217il7m.jl:24\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpd217il7m.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd217il7m.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpd217il7m.jl:25\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd217il7m.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd217il7m.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd217il7m.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, ['.', '?', '!'])\n        if word[1]\
    \ == 'I'\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpat9cjll2.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access empty SubString{String} at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds\\n     @ ./strings/basic.jl:216 [inlined]\\n   [2] getindex(s::SubString{String},\
    \ i::Int64)\\n     @ Base ./strings/substring.jl:83\\n   [3] is_bored(S::String)\\\
    n     @ Main /tmp/tmpat9cjll2.jl:15\\n   [4] macro expansion\\n     @ /tmp/tmpat9cjll2.jl:27\
    \ [inlined]\\n   [5] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpat9cjll2.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpat9cjll2.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(\"I love It !\") == 1\\n  BoundsError: attempt to access empty SubString{String}\
    \ at index [1]\\n  Stacktrace:\\n   [1] checkbounds\\n     @ ./strings/basic.jl:216\
    \ [inlined]\\n   [2] getindex(s::SubString{String}, i::Int64)\\n     @ Base ./strings/substring.jl:83\\\
    n   [3] is_bored(S::String)\\n     @ Main /tmp/tmpat9cjll2.jl:15\\n   [4] macro\
    \ expansion\\n     @ /tmp/tmpat9cjll2.jl:28 [inlined]\\n   [5] macro expansion\\\
    n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [6] top-level scope\\n     @ /tmp/tmpat9cjll2.jl:25\\ntest set:\
    \ Test Failed at /tmp/tmpat9cjll2.jl:30\\n  Expression: candidate(\"I feel good\
    \ today. I will be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\\
    n [1] macro expansion\\n   @ /tmp/tmpat9cjll2.jl:30 [inlined]\\n [2] macro expansion\\\
    n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n [3] top-level scope\\n   @ /tmp/tmpat9cjll2.jl:25\\nTest Summary:\
    \ | Pass  Fail  Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, ['.', '?', '!'])\n        if\
    \ startswith(sentence, \"I\")\n            boredoms += 1\n        end\n    end\n\
    \    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfx8ezztx.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfx8ezztx.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfx8ezztx.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfx8ezztx.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfx8ezztx.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfx8ezztx.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfx8ezztx.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc_5nrkl_.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc_5nrkl_.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_5nrkl_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpc_5nrkl_.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc_5nrkl_.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_5nrkl_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpc_5nrkl_.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc_5nrkl_.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_5nrkl_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpc_5nrkl_.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc_5nrkl_.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_5nrkl_.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpc_5nrkl_.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc_5nrkl_.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_5nrkl_.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_5nrkl_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwmhyfnoh.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpwmhyfnoh.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwmhyfnoh.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwmhyfnoh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for s in split(S, ['.', '?', '!'])\n        if startswith(s,\
    \ \"I\")\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb0w4g1zt.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb0w4g1zt.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb0w4g1zt.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpb0w4g1zt.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpb0w4g1zt.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb0w4g1zt.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb0w4g1zt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpme8w2_jh.jl:23\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpme8w2_jh.jl:23 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpme8w2_jh.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpme8w2_jh.jl:25\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpme8w2_jh.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpme8w2_jh.jl:20\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpme8w2_jh.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9qka0m0v.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9qka0m0v.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qka0m0v.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9qka0m0v.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qka0m0v.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qka0m0v.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9qka0m0v.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9qka0m0v.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qka0m0v.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9qka0m0v.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9qka0m0v.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qka0m0v.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9qka0m0v.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9qka0m0v.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9qka0m0v.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9qka0m0v.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, \".\")\n        if startswith(i, \"I\"\
    )\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfm398vq3.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfm398vq3.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfm398vq3.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpfm398vq3.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfm398vq3.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfm398vq3.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfm398vq3.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9omjd26z.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9omjd26z.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9omjd26z.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9omjd26z.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9omjd26z.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9omjd26z.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9omjd26z.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9omjd26z.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9omjd26z.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9omjd26z.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9omjd26z.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9omjd26z.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp9omjd26z.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9omjd26z.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9omjd26z.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9omjd26z.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgxy66unk.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpgxy66unk.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgxy66unk.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgxy66unk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I' && S[i-1]\
    \ == ' '\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmph2j59_nd.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Is the sky blue?\") == 0\n  BoundsError: attempt to\
    \ access 16-codeunit String at index [0]\n  Stacktrace:\n   [1] checkbounds\n\
    \     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102\
    \ [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4]\
    \ is_bored(S::String)\n     @ Main /tmp/tmph2j59_nd.jl:15\n   [5] macro expansion\n\
    \     @ /tmp/tmph2j59_nd.jl:27 [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmph2j59_nd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph2j59_nd.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"I love It !\") == 1\n  BoundsError: attempt to access 11-codeunit\
    \ String at index [0]\n  Stacktrace:\n   [1] checkbounds\n     @ ./strings/basic.jl:216\
    \ [inlined]\n   [2] codeunit\n     @ ./strings/string.jl:102 [inlined]\n   [3]\
    \ getindex\n     @ ./strings/string.jl:223 [inlined]\n   [4] is_bored(S::String)\n\
    \     @ Main /tmp/tmph2j59_nd.jl:15\n   [5] macro expansion\n     @ /tmp/tmph2j59_nd.jl:28\
    \ [inlined]\n   [6] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7] top-level scope\n     @ /tmp/tmph2j59_nd.jl:25\ntest set:\
    \ Error During Test at /tmp/tmph2j59_nd.jl:30\n  Test threw exception\n  Expression:\
    \ candidate(\"I feel good today. I will be productive. will kill It\") == 2\n\
    \  BoundsError: attempt to access 53-codeunit String at index [0]\n  Stacktrace:\n\
    \   [1] checkbounds\n     @ ./strings/basic.jl:216 [inlined]\n   [2] codeunit\n\
    \     @ ./strings/string.jl:102 [inlined]\n   [3] getindex\n     @ ./strings/string.jl:223\
    \ [inlined]\n   [4] is_bored(S::String)\n     @ Main /tmp/tmph2j59_nd.jl:15\n\
    \   [5] macro expansion\n     @ /tmp/tmph2j59_nd.jl:30 [inlined]\n   [6] macro\
    \ expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [7"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2j59_nd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpizlooj25.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpizlooj25.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpizlooj25.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpizlooj25.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpizlooj25.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpizlooj25.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpizlooj25.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpizlooj25.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpizlooj25.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpizlooj25.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpizlooj25.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpizlooj25.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpizlooj25.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpizlooj25.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpizlooj25.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpizlooj25.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpygqk6oll.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpygqk6oll.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygqk6oll.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygqk6oll.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpriby2n8p.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmpriby2n8p.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpriby2n8p.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpriby2n8p.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphufmh4cm.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmphufmh4cm.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphufmh4cm.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphufmh4cm.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprzt1opx2.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ macro expansion\n   @ /tmp/tmprzt1opx2.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprzt1opx2.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprzt1opx2.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbou_njro.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbou_njro.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbou_njro.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbou_njro.jl:28\n  Expression: candidate(\"I love It !\") ==\
    \ 1\n   Evaluated: 2 == 1\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbou_njro.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbou_njro.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbou_njro.jl:29\n  Expression: candidate(\"bIt\") == 0\n  \
    \ Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbou_njro.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbou_njro.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbou_njro.jl:30\n  Expression: candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbou_njro.jl:30 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbou_njro.jl:25\ntest set: Test\
    \ Failed at /tmp/tmpbou_njro.jl:31\n  Expression: candidate(\"You and I are going\
    \ for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbou_njro.jl:31 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbou_njro.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbou_njro.jl:23\n"
  exit_code: 1
  status: SyntaxError
