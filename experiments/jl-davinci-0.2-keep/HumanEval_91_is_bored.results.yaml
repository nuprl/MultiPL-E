name: HumanEval_91_is_bored
language: julia
results:
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqutojhh1.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpqutojhh1.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqutojhh1.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqutojhh1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"I\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5v9lpfx3.jl:21\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp5v9lpfx3.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5v9lpfx3.jl:19\\ntest set: Test Failed at /tmp/tmp5v9lpfx3.jl:22\\\
    n  Expression: candidate(\"I love It !\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5v9lpfx3.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5v9lpfx3.jl:19\\ntest set: Test Failed at /tmp/tmp5v9lpfx3.jl:23\\\
    n  Expression: candidate(\"bIt\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp5v9lpfx3.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5v9lpfx3.jl:19\\ntest set: Test Failed at /tmp/tmp5v9lpfx3.jl:24\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 3 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5v9lpfx3.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5v9lpfx3.jl:19\\ntest set: Test Failed at /tmp/tmp5v9lpfx3.jl:25\\\
    n  Expression: candidate(\"You and I are going for a walk\") == 0\\n   Evaluated:\
    \ 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5v9lpfx3.jl:25\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5v9lpfx3.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     5      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4ye54hmm.jl:25\\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4ye54hmm.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4ye54hmm.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwij6utod.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwij6utod.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwij6utod.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwij6utod.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprxha63sq.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmprxha63sq.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprxha63sq.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprxha63sq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for s in split(S, \".\")\n        if split(s, \" \")[1]\
    \ == \"I\"\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb96l1vve.jl:30\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n   Evaluated: 1\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpb96l1vve.jl:30\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb96l1vve.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb96l1vve.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoig90nn8.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpoig90nn8.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoig90nn8.jl:25\ntest set: Test Failed at /tmp/tmpoig90nn8.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoig90nn8.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoig90nn8.jl:25\ntest set: Test Failed at /tmp/tmpoig90nn8.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpoig90nn8.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoig90nn8.jl:25\ntest set: Test Failed at /tmp/tmpoig90nn8.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpoig90nn8.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoig90nn8.jl:25\ntest set: Test Failed at /tmp/tmpoig90nn8.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpoig90nn8.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoig90nn8.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoig90nn8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp46v87qhi.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp46v87qhi.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp46v87qhi.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp46v87qhi.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpu1ofnxz3.jl:25\\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpu1ofnxz3.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpu1ofnxz3.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx8gnkeeq.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpx8gnkeeq.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx8gnkeeq.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx8gnkeeq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"[.!?]\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp0oo9t0nu.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp0oo9t0nu.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0oo9t0nu.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0oo9t0nu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - length(split(S, r\"\\.\\s*I\"))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3p1utph_.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp3p1utph_.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3p1utph_.jl:19\ntest set: Test Failed at /tmp/tmp3p1utph_.jl:24\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp3p1utph_.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3p1utph_.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3p1utph_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpay2frb07.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpay2frb07.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpay2frb07.jl:25\\ntest set: Test Failed at /tmp/tmpay2frb07.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmpay2frb07.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpay2frb07.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp6z_f_mkq.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp6z_f_mkq.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6z_f_mkq.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6z_f_mkq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, ['.', '?', '!'])\n        if i[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo7s4q4ar.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access SubString{String}\\n    at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds at ./strings/basic.jl:194 [inlined]\\n   [2] getindex(::SubString{String},\
    \ ::Int64) at ./strings/substring.jl:79\\n   [3] is_bored(::String) at /tmp/tmpo7s4q4ar.jl:15\\\
    n   [4] top-level scope at /tmp/tmpo7s4q4ar.jl:27\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpo7s4q4ar.jl:25\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpo7s4q4ar.jl:28\\n  Test threw exception\\n  Expression: candidate(\"\
    I love It !\") == 1\\n  BoundsError: attempt to access SubString{String}\\n  \
    \  at index [1]\\n  Stacktrace:\\n   [1] checkbounds at ./strings/basic.jl:194\
    \ [inlined]\\n   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\\\
    n   [3] is_bored(::String) at /tmp/tmpo7s4q4ar.jl:15\\n   [4] top-level scope\
    \ at /tmp/tmpo7s4q4ar.jl:28\\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpo7s4q4ar.jl:25\\n  \\ntest set: Test Failed\
    \ at /tmp/tmpo7s4q4ar.jl:30\\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmpo7s4q4ar.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpo7s4q4ar.jl:25\\nTest Summary: | Pass  Fail \
    \ Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2zysud7a.jl:22\\n  Expression: candidate(\"\
    I love It !\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp2zysud7a.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2zysud7a.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0wc2cy_m.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0wc2cy_m.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0wc2cy_m.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0wc2cy_m.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, r\"[.?!]\")\n        if word[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6032a10z.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access SubString{String}\\n    at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds at ./strings/basic.jl:194 [inlined]\\n   [2] getindex(::SubString{String},\
    \ ::Int64) at ./strings/substring.jl:79\\n   [3] is_bored(::String) at /tmp/tmp6032a10z.jl:15\\\
    n   [4] top-level scope at /tmp/tmp6032a10z.jl:27\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmp6032a10z.jl:25\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp6032a10z.jl:28\\n  Test threw exception\\n  Expression: candidate(\"\
    I love It !\") == 1\\n  BoundsError: attempt to access SubString{String}\\n  \
    \  at index [1]\\n  Stacktrace:\\n   [1] checkbounds at ./strings/basic.jl:194\
    \ [inlined]\\n   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\\\
    n   [3] is_bored(::String) at /tmp/tmp6032a10z.jl:15\\n   [4] top-level scope\
    \ at /tmp/tmp6032a10z.jl:28\\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmp6032a10z.jl:25\\n  \\ntest set: Test Failed\
    \ at /tmp/tmp6032a10z.jl:30\\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph9yai1uz.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmph9yai1uz.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph9yai1uz.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9yai1uz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp7u5l_54z.jl:22\\n  Expression: candidate(\"\
    I love It !\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp7u5l_54z.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp7u5l_54z.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgemug1qu.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgemug1qu.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgemug1qu.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgemug1qu.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0qgcnahp.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0qgcnahp.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0qgcnahp.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0qgcnahp.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"[.!?]\")) - length(split(S, r\"[.!?] I\"))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4aqsiac7.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp4aqsiac7.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4aqsiac7.jl:19\ntest set: Test Failed at /tmp/tmp4aqsiac7.jl:24\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp4aqsiac7.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4aqsiac7.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4aqsiac7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"I\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpeb286vy1.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpeb286vy1.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeb286vy1.jl:19\ntest set: Test Failed at /tmp/tmpeb286vy1.jl:22\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeb286vy1.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeb286vy1.jl:19\ntest set: Test Failed at /tmp/tmpeb286vy1.jl:23\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpeb286vy1.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeb286vy1.jl:19\ntest set: Test Failed at /tmp/tmpeb286vy1.jl:24\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpeb286vy1.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeb286vy1.jl:19\ntest set: Test Failed at /tmp/tmpeb286vy1.jl:25\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpeb286vy1.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeb286vy1.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeb286vy1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyr84yqie.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpyr84yqie.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyr84yqie.jl:25\ntest set: Test Failed at /tmp/tmpyr84yqie.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyr84yqie.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyr84yqie.jl:25\ntest set: Test Failed at /tmp/tmpyr84yqie.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpyr84yqie.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyr84yqie.jl:25\ntest set: Test Failed at /tmp/tmpyr84yqie.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpyr84yqie.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyr84yqie.jl:25\ntest set: Test Failed at /tmp/tmpyr84yqie.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpyr84yqie.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyr84yqie.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyr84yqie.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5bbo5mke.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp5bbo5mke.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5bbo5mke.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5bbo5mke.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpojw75odw.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpojw75odw.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpojw75odw.jl:25\\ntest set: Test Failed at /tmp/tmpojw75odw.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmpojw75odw.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpojw75odw.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for s in split(S, \".\")\n        if s[1] == 'I'\n    \
    \        count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaug3ailt.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpaug3ailt.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaug3ailt.jl:25\ntest set: Test Failed at /tmp/tmpaug3ailt.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpaug3ailt.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaug3ailt.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaug3ailt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\"))-1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpydrn_9d6.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpydrn_9d6.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpydrn_9d6.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpydrn_9d6.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return count(s\
    \ -> startswith(s, \"I\"), sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmplh6_jwx2.jl:24\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmplh6_jwx2.jl:24\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplh6_jwx2.jl:22\\ntest set: Test Failed at /tmp/tmplh6_jwx2.jl:27\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmplh6_jwx2.jl:27\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplh6_jwx2.jl:22\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     2      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.!?]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_toh1s1q.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp_toh1s1q.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_toh1s1q.jl:25\ntest set: Test Failed at /tmp/tmp_toh1s1q.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp_toh1s1q.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_toh1s1q.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_toh1s1q.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return count(s\
    \ -> startswith(s, \"I\"), sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2hl0dftr.jl:24\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp2hl0dftr.jl:24\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2hl0dftr.jl:22\\ntest set: Test Failed at /tmp/tmp2hl0dftr.jl:27\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmp2hl0dftr.jl:27\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2hl0dftr.jl:22\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp95c8qb7p.jl:22\\n  Expression: candidate(\"\
    I love It !\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp95c8qb7p.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp95c8qb7p.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    sentences = split(S, r\"[.?!]\")\n    for sentence in\
    \ sentences\n        if startswith(sentence, \"I\")\n            boredoms += 1\n\
    \        end\n    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpcayofo75.jl:28\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpcayofo75.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcayofo75.jl:26\ntest set: Test Failed at /tmp/tmpcayofo75.jl:31\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpcayofo75.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcayofo75.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcayofo75.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, \".\")\n        if i[1] == 'I'\n    \
    \        count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnna4zwq0.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpnna4zwq0.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnna4zwq0.jl:25\ntest set: Test Failed at /tmp/tmpnna4zwq0.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpnna4zwq0.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnna4zwq0.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnna4zwq0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmph0_76k44.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmph0_76k44.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph0_76k44.jl:25\\ntest set: Test Failed at /tmp/tmph0_76k44.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmph0_76k44.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph0_76k44.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    sentences = split(S, r\"[.?!]\")\n    boredoms = 0\n    for sentence in\
    \ sentences\n        if startswith(sentence, \"I\")\n            boredoms += 1\n\
    \        end\n    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpag83ivan.jl:28\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpag83ivan.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpag83ivan.jl:26\ntest set: Test Failed at /tmp/tmpag83ivan.jl:31\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpag83ivan.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpag83ivan.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpag83ivan.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp074gcbpv.jl:25\\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp074gcbpv.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp074gcbpv.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp5fhxe70w.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp5fhxe70w.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5fhxe70w.jl:25\\ntest set: Test Failed at /tmp/tmp5fhxe70w.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmp5fhxe70w.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp5fhxe70w.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     2      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6kd4f_9y.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6kd4f_9y.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6kd4f_9y.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6kd4f_9y.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, [\".\", \"?\", \"!\"])\n  \
    \      if startswith(sentence, \"I\")\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpxkiv3eil.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ findfirst(::Array{String,1}, ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpxkiv3eil.jl:14\n   [5] top-level scope at /tmp/tmpxkiv3eil.jl:26\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxkiv3eil.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxkiv3eil.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpxkiv3eil.jl:14\n   [5] top-level scope at /tmp/tmpxkiv3eil.jl:27\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxkiv3eil.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxkiv3eil.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpxkiv3eil.jl:14\n   [5] top-level scope at /tmp/tmpxkiv3eil.jl:28\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxkiv3eil.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxkiv3eil.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    bIt\") == 0\n  MethodError: no method matching findfirst(::Array{String,1}, ::String)\n\
    \  Closest candidates are:\n    findfirst(::Union{AbstractString, AbstractArray})\
    \ at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpxkiv3eil.jl:14\n   [5] top-level scope at /tmp/tmpxkiv3eil.jl:29\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxkiv3eil.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxkiv3eil.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n  MethodError:\
    \ no method matching findfirst(::Array{String,1}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(::Union{AbstractString, AbstractArray}) at array.jl:1701\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ array.jl:1783\n    findfirst(!Matched::Function, ::Any) at array.jl:1776\n \
    \   ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1}, ::Int64, ::Bool,\
    \ ::Array{SubString{String},1}) at ./strings/util.jl:327\n   [2] split(::String,\
    \ ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpxkiv3eil.jl:14\n   [5] top-level scope at /tmp/tmpxkiv3eil.jl:30\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxkiv3eil.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpxkiv3eil.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpxkiv3eil.jl:14\n   [5] top-level scope at /tmp/tmpxkiv3eil.jl:31\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpxkiv3eil.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxkiv3eil.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4x39ou9i.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4x39ou9i.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4x39ou9i.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4x39ou9i.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppeyhai1p.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppeyhai1p.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppeyhai1p.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppeyhai1p.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp115nookv.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp115nookv.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp115nookv.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp115nookv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpyf9d78o9.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpyf9d78o9.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyf9d78o9.jl:25\\ntest set: Test Failed at /tmp/tmpyf9d78o9.jl:28\\\
    n  Expression: candidate(\"I love It !\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpyf9d78o9.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyf9d78o9.jl:25\\ntest set: Test Failed at /tmp/tmpyf9d78o9.jl:29\\\
    n  Expression: candidate(\"bIt\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpyf9d78o9.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyf9d78o9.jl:25\\ntest set: Test Failed at /tmp/tmpyf9d78o9.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 3 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmpyf9d78o9.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyf9d78o9.jl:25\\ntest set: Test Failed at /tmp/tmpyf9d78o9.jl:31\\\
    n  Expression: candidate(\"You and I are going for a walk\") == 0\\n   Evaluated:\
    \ 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmpyf9d78o9.jl:31\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyf9d78o9.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     5      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplam_xcua.jl:25\\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplam_xcua.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplam_xcua.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcutjty1g.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcutjty1g.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcutjty1g.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcutjty1g.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdap9to4q.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpdap9to4q.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdap9to4q.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdap9to4q.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjigyc3gk.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpjigyc3gk.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjigyc3gk.jl:25\ntest set: Test Failed at /tmp/tmpjigyc3gk.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjigyc3gk.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjigyc3gk.jl:25\ntest set: Test Failed at /tmp/tmpjigyc3gk.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpjigyc3gk.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjigyc3gk.jl:25\ntest set: Test Failed at /tmp/tmpjigyc3gk.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpjigyc3gk.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjigyc3gk.jl:25\ntest set: Test Failed at /tmp/tmpjigyc3gk.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpjigyc3gk.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjigyc3gk.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjigyc3gk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, [\".\", \"?\", \"!\"])\n  \
    \      if startswith(sentence, \"I\")\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpnczechd6.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ findfirst(::Array{String,1}, ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpnczechd6.jl:14\n   [5] top-level scope at /tmp/tmpnczechd6.jl:26\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpnczechd6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnczechd6.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpnczechd6.jl:14\n   [5] top-level scope at /tmp/tmpnczechd6.jl:27\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpnczechd6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnczechd6.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpnczechd6.jl:14\n   [5] top-level scope at /tmp/tmpnczechd6.jl:28\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpnczechd6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnczechd6.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    bIt\") == 0\n  MethodError: no method matching findfirst(::Array{String,1}, ::String)\n\
    \  Closest candidates are:\n    findfirst(::Union{AbstractString, AbstractArray})\
    \ at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpnczechd6.jl:14\n   [5] top-level scope at /tmp/tmpnczechd6.jl:29\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpnczechd6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnczechd6.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n  MethodError:\
    \ no method matching findfirst(::Array{String,1}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(::Union{AbstractString, AbstractArray}) at array.jl:1701\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ array.jl:1783\n    findfirst(!Matched::Function, ::Any) at array.jl:1776\n \
    \   ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1}, ::Int64, ::Bool,\
    \ ::Array{SubString{String},1}) at ./strings/util.jl:327\n   [2] split(::String,\
    \ ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpnczechd6.jl:14\n   [5] top-level scope at /tmp/tmpnczechd6.jl:30\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpnczechd6.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpnczechd6.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpnczechd6.jl:14\n   [5] top-level scope at /tmp/tmpnczechd6.jl:31\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpnczechd6.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnczechd6.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return count(s\
    \ -> startswith(s, \"I\"), sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp2tyo9fdo.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp2tyo9fdo.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2tyo9fdo.jl:22\ntest set: Test Failed at /tmp/tmp2tyo9fdo.jl:27\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp2tyo9fdo.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2tyo9fdo.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2tyo9fdo.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8308ixnn.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp8308ixnn.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8308ixnn.jl:25\ntest set: Test Failed at /tmp/tmp8308ixnn.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp8308ixnn.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8308ixnn.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8308ixnn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwdco3p_4.jl:25\\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpwdco3p_4.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwdco3p_4.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbljvjx5c.jl:22\\n  Expression: candidate(\"\
    I love It !\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpbljvjx5c.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbljvjx5c.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr844sa9p.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpr844sa9p.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr844sa9p.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr844sa9p.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S,\"I\"))-1\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp31_ieip7.jl:21\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp31_ieip7.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp31_ieip7.jl:19\\ntest set: Test Failed at /tmp/tmp31_ieip7.jl:22\\\
    n  Expression: candidate(\"I love It !\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp31_ieip7.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp31_ieip7.jl:19\\ntest set: Test Failed at /tmp/tmp31_ieip7.jl:23\\\
    n  Expression: candidate(\"bIt\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp31_ieip7.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp31_ieip7.jl:19\\ntest set: Test Failed at /tmp/tmp31_ieip7.jl:24\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 3 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmp31_ieip7.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp31_ieip7.jl:19\\ntest set: Test Failed at /tmp/tmp31_ieip7.jl:25\\\
    n  Expression: candidate(\"You and I are going for a walk\") == 0\\n   Evaluated:\
    \ 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmp31_ieip7.jl:25\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp31_ieip7.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     5      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, ['.', '?', '!'])\n        if i[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpxi9xodpf.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access SubString{String}\\n    at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds at ./strings/basic.jl:194 [inlined]\\n   [2] getindex(::SubString{String},\
    \ ::Int64) at ./strings/substring.jl:79\\n   [3] is_bored(::String) at /tmp/tmpxi9xodpf.jl:15\\\
    n   [4] top-level scope at /tmp/tmpxi9xodpf.jl:27\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpxi9xodpf.jl:25\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpxi9xodpf.jl:28\\n  Test threw exception\\n  Expression: candidate(\"\
    I love It !\") == 1\\n  BoundsError: attempt to access SubString{String}\\n  \
    \  at index [1]\\n  Stacktrace:\\n   [1] checkbounds at ./strings/basic.jl:194\
    \ [inlined]\\n   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\\\
    n   [3] is_bored(::String) at /tmp/tmpxi9xodpf.jl:15\\n   [4] top-level scope\
    \ at /tmp/tmpxi9xodpf.jl:28\\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpxi9xodpf.jl:25\\n  \\ntest set: Test Failed\
    \ at /tmp/tmpxi9xodpf.jl:30\\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmpxi9xodpf.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxi9xodpf.jl:25\\nTest Summary: | Pass  Fail \
    \ Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp17h7pgng.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp17h7pgng.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp17h7pgng.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp17h7pgng.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuszjvryw.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpuszjvryw.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuszjvryw.jl:25\ntest set: Test Failed at /tmp/tmpuszjvryw.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpuszjvryw.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuszjvryw.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuszjvryw.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmv6v5cwr.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpmv6v5cwr.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmv6v5cwr.jl:25\ntest set: Test Failed at /tmp/tmpmv6v5cwr.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpmv6v5cwr.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmv6v5cwr.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmv6v5cwr.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    num_boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if\
    \ startswith(sentence, \"I\")\n            num_boredoms += 1\n        end\n  \
    \  end\n    return num_boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpnkk8q6fr.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpnkk8q6fr.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnkk8q6fr.jl:25\ntest set: Test Failed at /tmp/tmpnkk8q6fr.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpnkk8q6fr.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnkk8q6fr.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnkk8q6fr.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\s*[.?!]\\s*\")[1:end])\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7h8bo81z.jl:20\n  Expression: candidate(\"\
    Hello world\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp7h8bo81z.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7h8bo81z.jl:19\ntest set: Test Failed at /tmp/tmp7h8bo81z.jl:21\n\
    \  Expression: candidate(\"Is the sky blue?\") == 0\n   Evaluated: 2 == 0\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7h8bo81z.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7h8bo81z.jl:19\ntest set: Test Failed at /tmp/tmp7h8bo81z.jl:22\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7h8bo81z.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7h8bo81z.jl:19\ntest set: Test Failed at /tmp/tmp7h8bo81z.jl:23\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp7h8bo81z.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7h8bo81z.jl:19\ntest set: Test Failed at /tmp/tmp7h8bo81z.jl:24\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp7h8bo81z.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7h8bo81z.jl:19\ntest set: Test Failed at /tmp/tmp7h8bo81z.jl:25\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp7h8bo81z.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7h8bo81z.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7h8bo81z.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, r\"[.?!]\")\n        if word[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfybs009_.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access SubString{String}\\n    at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds at ./strings/basic.jl:194 [inlined]\\n   [2] getindex(::SubString{String},\
    \ ::Int64) at ./strings/substring.jl:79\\n   [3] is_bored(::String) at /tmp/tmpfybs009_.jl:15\\\
    n   [4] top-level scope at /tmp/tmpfybs009_.jl:27\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpfybs009_.jl:25\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpfybs009_.jl:28\\n  Test threw exception\\n  Expression: candidate(\"\
    I love It !\") == 1\\n  BoundsError: attempt to access SubString{String}\\n  \
    \  at index [1]\\n  Stacktrace:\\n   [1] checkbounds at ./strings/basic.jl:194\
    \ [inlined]\\n   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\\\
    n   [3] is_bored(::String) at /tmp/tmpfybs009_.jl:15\\n   [4] top-level scope\
    \ at /tmp/tmpfybs009_.jl:28\\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpfybs009_.jl:25\\n  \\ntest set: Test Failed\
    \ at /tmp/tmpfybs009_.jl:30\\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmpfybs009_.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpfybs009_.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return length(filter(s\
    \ -> startswith(s, \"I\"), sentences))\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpwqhh4oom.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpwqhh4oom.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwqhh4oom.jl:22\ntest set: Test Failed at /tmp/tmpwqhh4oom.jl:27\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpwqhh4oom.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwqhh4oom.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwqhh4oom.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprqr2bc44.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmprqr2bc44.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprqr2bc44.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprqr2bc44.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppt9js32f.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppt9js32f.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppt9js32f.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppt9js32f.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa98fo5w7.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpa98fo5w7.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa98fo5w7.jl:25\ntest set: Test Failed at /tmp/tmpa98fo5w7.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpa98fo5w7.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa98fo5w7.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa98fo5w7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr0ac96x7.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpr0ac96x7.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0ac96x7.jl:25\ntest set: Test Failed at /tmp/tmpr0ac96x7.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr0ac96x7.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0ac96x7.jl:25\ntest set: Test Failed at /tmp/tmpr0ac96x7.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpr0ac96x7.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0ac96x7.jl:25\ntest set: Test Failed at /tmp/tmpr0ac96x7.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpr0ac96x7.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0ac96x7.jl:25\ntest set: Test Failed at /tmp/tmpr0ac96x7.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpr0ac96x7.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr0ac96x7.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0ac96x7.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpm5x0lsam.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpm5x0lsam.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm5x0lsam.jl:25\\ntest set: Test Failed at /tmp/tmpm5x0lsam.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm5x0lsam.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm5x0lsam.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     2      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc2mrfdbh.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpc2mrfdbh.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc2mrfdbh.jl:25\ntest set: Test Failed at /tmp/tmpc2mrfdbh.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpc2mrfdbh.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc2mrfdbh.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc2mrfdbh.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return count(eachmatch(r\"I[^.!?]*[.!?]\", S))\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7p2gmchk.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"Is the sky blue?\") == 0\n  TypeError: non-boolean\
    \ (RegexMatch) used in boolean context\n  Stacktrace:\n   [1] count(::typeof(identity),\
    \ ::Base.RegexMatchIterator) at ./reduce.jl:855\n   [2] count at ./reduce.jl:866\
    \ [inlined]\n   [3] is_bored(::String) at /tmp/tmp7p2gmchk.jl:13\n   [4] top-level\
    \ scope at /tmp/tmp7p2gmchk.jl:21\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7p2gmchk.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp7p2gmchk.jl:22\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  TypeError: non-boolean (RegexMatch) used in boolean context\n\
    \  Stacktrace:\n   [1] count(::typeof(identity), ::Base.RegexMatchIterator) at\
    \ ./reduce.jl:855\n   [2] count at ./reduce.jl:866 [inlined]\n   [3] is_bored(::String)\
    \ at /tmp/tmp7p2gmchk.jl:13\n   [4] top-level scope at /tmp/tmp7p2gmchk.jl:22\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7p2gmchk.jl:19\n  \ntest set: Error During\
    \ Test at /tmp/tmp7p2gmchk.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n  TypeError: non-boolean\
    \ (RegexMatch) used in boolean context\n  Stacktrace:\n   [1] count(::typeof(identity),\
    \ ::Base.RegexMatchIterator) at ./reduce.jl:855\n   [2] count at ./reduce.jl:866\
    \ [inlined]\n   [3] is_bored(::String) at /tmp/tmp7p2gmchk.jl:13\n   [4] top-level\
    \ scope at /tmp/tmp7p2gmchk.jl:24\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp7p2gmchk.jl:19\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    3      3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7p2gmchk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    words = split(S, r\"[.?!]\")\n    boredoms = 0\n    for word in words\n\
    \        if word[1] == 'I'\n            boredoms += 1\n        end\n    end\n\
    \    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0qoomq7j.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access SubString{String}\\n    at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds at ./strings/basic.jl:194 [inlined]\\n   [2] getindex(::SubString{String},\
    \ ::Int64) at ./strings/substring.jl:79\\n   [3] is_bored(::String) at /tmp/tmp0qoomq7j.jl:16\\\
    n   [4] top-level scope at /tmp/tmp0qoomq7j.jl:28\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmp0qoomq7j.jl:26\\n  \\ntest set: Error During\
    \ Test at /tmp/tmp0qoomq7j.jl:29\\n  Test threw exception\\n  Expression: candidate(\"\
    I love It !\") == 1\\n  BoundsError: attempt to access SubString{String}\\n  \
    \  at index [1]\\n  Stacktrace:\\n   [1] checkbounds at ./strings/basic.jl:194\
    \ [inlined]\\n   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\\\
    n   [3] is_bored(::String) at /tmp/tmp0qoomq7j.jl:16\\n   [4] top-level scope\
    \ at /tmp/tmp0qoomq7j.jl:29\\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmp0qoomq7j.jl:26\\n  \\ntest set: Test Failed\
    \ at /tmp/tmp0qoomq7j.jl:31\\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmp0qoomq7j.jl:31\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp0qoomq7j.jl:26\\nTest Summary: | Pass  Fail \
    \ Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\?|\\.|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt1eng4mh.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpt1eng4mh.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt1eng4mh.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt1eng4mh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjkksoeqo.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpjkksoeqo.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjkksoeqo.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjkksoeqo.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpgkup3_49.jl:25\\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpgkup3_49.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpgkup3_49.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = split(S, \".!?\")\n    count = 0\n    for s in S\n        if s[1]\
    \ == 'I'\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq4sebowt.jl:28\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpq4sebowt.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq4sebowt.jl:26\ntest set: Test Failed at /tmp/tmpq4sebowt.jl:31\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpq4sebowt.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq4sebowt.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4sebowt.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfjph5yfn.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpfjph5yfn.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfjph5yfn.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfjph5yfn.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwvdjyvoh.jl:21\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpwvdjyvoh.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwvdjyvoh.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo441h5ar.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpo441h5ar.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo441h5ar.jl:25\ntest set: Test Failed at /tmp/tmpo441h5ar.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo441h5ar.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo441h5ar.jl:25\ntest set: Test Failed at /tmp/tmpo441h5ar.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpo441h5ar.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo441h5ar.jl:25\ntest set: Test Failed at /tmp/tmpo441h5ar.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpo441h5ar.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo441h5ar.jl:25\ntest set: Test Failed at /tmp/tmpo441h5ar.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpo441h5ar.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo441h5ar.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo441h5ar.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphx3oo9u1.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmphx3oo9u1.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphx3oo9u1.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphx3oo9u1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpl86i6g1k.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpl86i6g1k.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpl86i6g1k.jl:25\\ntest set: Test Failed at /tmp/tmpl86i6g1k.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmpl86i6g1k.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpl86i6g1k.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdxvle5oe.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpdxvle5oe.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdxvle5oe.jl:25\\ntest set: Test Failed at /tmp/tmpdxvle5oe.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmpdxvle5oe.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdxvle5oe.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6tex9wzp.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6tex9wzp.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6tex9wzp.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6tex9wzp.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzo6po6qr.jl:25\\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpzo6po6qr.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzo6po6qr.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdw80k_xx.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpdw80k_xx.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdw80k_xx.jl:25\\ntest set: Test Failed at /tmp/tmpdw80k_xx.jl:28\\\
    n  Expression: candidate(\"I love It !\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpdw80k_xx.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdw80k_xx.jl:25\\ntest set: Test Failed at /tmp/tmpdw80k_xx.jl:29\\\
    n  Expression: candidate(\"bIt\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpdw80k_xx.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdw80k_xx.jl:25\\ntest set: Test Failed at /tmp/tmpdw80k_xx.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 3 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmpdw80k_xx.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdw80k_xx.jl:25\\ntest set: Test Failed at /tmp/tmpdw80k_xx.jl:31\\\
    n  Expression: candidate(\"You and I are going for a walk\") == 0\\n   Evaluated:\
    \ 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmpdw80k_xx.jl:31\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdw80k_xx.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     5      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqeye44g_.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpqeye44g_.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqeye44g_.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqeye44g_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return count(split(S, r\"\\.|\\?|\\!\")) do s\n        s[1] == 'I'\n \
    \   end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8l16rdsv.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Is the sky blue?\") == 0\n  BoundsError: attempt to\
    \ access SubString{String}\n    at index [1]\n  Stacktrace:\n   [1] checkbounds\
    \ at ./strings/basic.jl:194 [inlined]\n   [2] getindex(::SubString{String}, ::Int64)\
    \ at ./strings/substring.jl:79\n   [3] #3 at /tmp/tmp8l16rdsv.jl:14 [inlined]\n\
    \   [4] count at ./reduce.jl:862 [inlined]\n   [5] is_bored(::String) at /tmp/tmp8l16rdsv.jl:13\n\
    \   [6] top-level scope at /tmp/tmp8l16rdsv.jl:23\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp8l16rdsv.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp8l16rdsv.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  BoundsError: attempt to access SubString{String}\n    at\
    \ index [1]\n  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n\
    \   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\n\
    \   [3] #3 at /tmp/tmp8l16rdsv.jl:14 [inlined]\n   [4] count at ./reduce.jl:862\
    \ [inlined]\n   [5] is_bored(::String) at /tmp/tmp8l16rdsv.jl:13\n   [6] top-level\
    \ scope at /tmp/tmp8l16rdsv.jl:24\n   [7] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [8] top-level scope at /tmp/tmp8l16rdsv.jl:21\n  \ntest set: Test Failed at\
    \ /tmp/tmp8l16rdsv.jl:26\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp8l16rdsv.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8l16rdsv.jl:21\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    3     1      2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8l16rdsv.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwrt0z20l.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwrt0z20l.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwrt0z20l.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwrt0z20l.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnido_unp.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpnido_unp.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnido_unp.jl:25\ntest set: Test Failed at /tmp/tmpnido_unp.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnido_unp.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnido_unp.jl:25\ntest set: Test Failed at /tmp/tmpnido_unp.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpnido_unp.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnido_unp.jl:25\ntest set: Test Failed at /tmp/tmpnido_unp.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpnido_unp.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnido_unp.jl:25\ntest set: Test Failed at /tmp/tmpnido_unp.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpnido_unp.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnido_unp.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnido_unp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpp5amdlsn.jl:22\\n  Expression: candidate(\"\
    I love It !\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpp5amdlsn.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpp5amdlsn.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    S = split(S, \".\")\n    boredoms = 0\n    for sentence in S\n       \
    \ if sentence[1] == 'I'\n            boredoms += 1\n        end\n    end\n   \
    \ return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp84d2i6ew.jl:28\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp84d2i6ew.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp84d2i6ew.jl:26\ntest set: Test Failed at /tmp/tmp84d2i6ew.jl:31\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp84d2i6ew.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp84d2i6ew.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp84d2i6ew.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxyuy8vg1.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpxyuy8vg1.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxyuy8vg1.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxyuy8vg1.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, [\".\", \"?\", \"!\"])\n  \
    \      if startswith(sentence, \"I\")\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp6nzvey0v.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ findfirst(::Array{String,1}, ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmp6nzvey0v.jl:14\n   [5] top-level scope at /tmp/tmp6nzvey0v.jl:26\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp6nzvey0v.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nzvey0v.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmp6nzvey0v.jl:14\n   [5] top-level scope at /tmp/tmp6nzvey0v.jl:27\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp6nzvey0v.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nzvey0v.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmp6nzvey0v.jl:14\n   [5] top-level scope at /tmp/tmp6nzvey0v.jl:28\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp6nzvey0v.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nzvey0v.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    bIt\") == 0\n  MethodError: no method matching findfirst(::Array{String,1}, ::String)\n\
    \  Closest candidates are:\n    findfirst(::Union{AbstractString, AbstractArray})\
    \ at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmp6nzvey0v.jl:14\n   [5] top-level scope at /tmp/tmp6nzvey0v.jl:29\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp6nzvey0v.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nzvey0v.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n  MethodError:\
    \ no method matching findfirst(::Array{String,1}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(::Union{AbstractString, AbstractArray}) at array.jl:1701\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ array.jl:1783\n    findfirst(!Matched::Function, ::Any) at array.jl:1776\n \
    \   ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1}, ::Int64, ::Bool,\
    \ ::Array{SubString{String},1}) at ./strings/util.jl:327\n   [2] split(::String,\
    \ ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmp6nzvey0v.jl:14\n   [5] top-level scope at /tmp/tmp6nzvey0v.jl:30\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp6nzvey0v.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp6nzvey0v.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmp6nzvey0v.jl:14\n   [5] top-level scope at /tmp/tmp6nzvey0v.jl:31\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp6nzvey0v.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6nzvey0v.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    words = split(S, r\"[.?!]\")\n    boredoms = 0\n    for word in words\n\
    \        if word[1] == 'I'\n            boredoms += 1\n        end\n    end\n\
    \    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqgplcpz_.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Is the sky blue?\") == 0\n  BoundsError: attempt to\
    \ access SubString{String}\n    at index [1]\n  Stacktrace:\n   [1] checkbounds\
    \ at ./strings/basic.jl:194 [inlined]\n   [2] getindex(::SubString{String}, ::Int64)\
    \ at ./strings/substring.jl:79\n   [3] is_bored(::String) at /tmp/tmpqgplcpz_.jl:16\n\
    \   [4] top-level scope at /tmp/tmpqgplcpz_.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqgplcpz_.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpqgplcpz_.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  BoundsError: attempt to access SubString{String}\n    at\
    \ index [1]\n  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n\
    \   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\n\
    \   [3] is_bored(::String) at /tmp/tmpqgplcpz_.jl:16\n   [4] top-level scope at\
    \ /tmp/tmpqgplcpz_.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpqgplcpz_.jl:26\n  \ntest set: Test Failed at\
    \ /tmp/tmpqgplcpz_.jl:31\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpqgplcpz_.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqgplcpz_.jl:26\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    3     1      2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqgplcpz_.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj789g5pd.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpj789g5pd.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj789g5pd.jl:25\ntest set: Test Failed at /tmp/tmpj789g5pd.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpj789g5pd.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj789g5pd.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj789g5pd.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\"))-1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxzu0eyj_.jl:25\\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpxzu0eyj_.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxzu0eyj_.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpxzu0eyj_.jl:17\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\"))-1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbnm605sn.jl:25\\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpbnm605sn.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbnm605sn.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\"))-1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp4e395g7d.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4e395g7d.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4e395g7d.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4e395g7d.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq_ztwvpd.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq_ztwvpd.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq_ztwvpd.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq_ztwvpd.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpk69vla3n.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpk69vla3n.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpk69vla3n.jl:25\\ntest set: Test Failed at /tmp/tmpk69vla3n.jl:28\\\
    n  Expression: candidate(\"I love It !\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpk69vla3n.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpk69vla3n.jl:25\\ntest set: Test Failed at /tmp/tmpk69vla3n.jl:29\\\
    n  Expression: candidate(\"bIt\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpk69vla3n.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpk69vla3n.jl:25\\ntest set: Test Failed at /tmp/tmpk69vla3n.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 3 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmpk69vla3n.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpk69vla3n.jl:25\\ntest set: Test Failed at /tmp/tmpk69vla3n.jl:31\\\
    n  Expression: candidate(\"You and I are going for a walk\") == 0\\n   Evaluated:\
    \ 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmpk69vla3n.jl:31\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpk69vla3n.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     5      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return count(x->x==\"I\", split(S, ['.', '?', '!']))\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp457wlyt3.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp457wlyt3.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp457wlyt3.jl:19\ntest set: Test Failed at /tmp/tmp457wlyt3.jl:24\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp457wlyt3.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp457wlyt3.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp457wlyt3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    sentences = split(S, [\".\", \"?\", \"!\"])\n    for\
    \ sentence in sentences\n        words = split(sentence)\n        if words[1]\
    \ == \"I\"\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqrb7z0ht.jl:28\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ findfirst(::Array{String,1}, ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpqrb7z0ht.jl:14\n   [5] top-level scope at /tmp/tmpqrb7z0ht.jl:28\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpqrb7z0ht.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrb7z0ht.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpqrb7z0ht.jl:14\n   [5] top-level scope at /tmp/tmpqrb7z0ht.jl:29\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpqrb7z0ht.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrb7z0ht.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpqrb7z0ht.jl:14\n   [5] top-level scope at /tmp/tmpqrb7z0ht.jl:30\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpqrb7z0ht.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrb7z0ht.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    bIt\") == 0\n  MethodError: no method matching findfirst(::Array{String,1}, ::String)\n\
    \  Closest candidates are:\n    findfirst(::Union{AbstractString, AbstractArray})\
    \ at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpqrb7z0ht.jl:14\n   [5] top-level scope at /tmp/tmpqrb7z0ht.jl:31\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpqrb7z0ht.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrb7z0ht.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n  MethodError:\
    \ no method matching findfirst(::Array{String,1}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(::Union{AbstractString, AbstractArray}) at array.jl:1701\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ array.jl:1783\n    findfirst(!Matched::Function, ::Any) at array.jl:1776\n \
    \   ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1}, ::Int64, ::Bool,\
    \ ::Array{SubString{String},1}) at ./strings/util.jl:327\n   [2] split(::String,\
    \ ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpqrb7z0ht.jl:14\n   [5] top-level scope at /tmp/tmpqrb7z0ht.jl:32\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpqrb7z0ht.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpqrb7z0ht.jl:33\n  Test threw exception\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmpqrb7z0ht.jl:14\n   [5] top-level scope at /tmp/tmpqrb7z0ht.jl:33\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpqrb7z0ht.jl:27\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqrb7z0ht.jl:25\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkhmh9i64.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpkhmh9i64.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkhmh9i64.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkhmh9i64.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpva8n8yir.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpva8n8yir.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpva8n8yir.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpva8n8yir.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    boredoms = 0\n    for sentence in sentences\n        # Split the sentence\
    \ into words\n        words = split(sentence)\n        if words[1] == \"I\"\n\
    \            boredoms += 1\n        end\n    end\n    return boredoms\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm6xutpwe.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access 0-element Array{SubString{String},1} at index [1]\\n  Stacktrace:\\\
    n   [1] getindex at ./array.jl:788 [inlined]\\n   [2] is_bored(::String) at /tmp/tmpm6xutpwe.jl:19\\\
    n   [3] top-level scope at /tmp/tmpm6xutpwe.jl:31\\n   [4] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpm6xutpwe.jl:29\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpm6xutpwe.jl:32\\n  Test threw exception\\n  Expression: candidate(\"\
    I love It !\") == 1\\n  BoundsError: attempt to access 0-element Array{SubString{String},1}\
    \ at index [1]\\n  Stacktrace:\\n   [1] getindex at ./array.jl:788 [inlined]\\\
    n   [2] is_bored(::String) at /tmp/tmpm6xutpwe.jl:19\\n   [3] top-level scope\
    \ at /tmp/tmpm6xutpwe.jl:32\\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [5] top-level scope at /tmp/tmpm6xutpwe.jl:29\\n  \\nTest Summary: | Pass\
    \  Error  Total\\ntest set      |    4      2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpxa0bwyfv.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpxa0bwyfv.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxa0bwyfv.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxa0bwyfv.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, ['.', '?', '!'])\n        if word[1]\
    \ == 'I'\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpq3bb47_p.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access SubString{String}\\n    at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds at ./strings/basic.jl:194 [inlined]\\n   [2] getindex(::SubString{String},\
    \ ::Int64) at ./strings/substring.jl:79\\n   [3] is_bored(::String) at /tmp/tmpq3bb47_p.jl:15\\\
    n   [4] top-level scope at /tmp/tmpq3bb47_p.jl:27\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpq3bb47_p.jl:25\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpq3bb47_p.jl:28\\n  Test threw exception\\n  Expression: candidate(\"\
    I love It !\") == 1\\n  BoundsError: attempt to access SubString{String}\\n  \
    \  at index [1]\\n  Stacktrace:\\n   [1] checkbounds at ./strings/basic.jl:194\
    \ [inlined]\\n   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\\\
    n   [3] is_bored(::String) at /tmp/tmpq3bb47_p.jl:15\\n   [4] top-level scope\
    \ at /tmp/tmpq3bb47_p.jl:28\\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpq3bb47_p.jl:25\\n  \\ntest set: Test Failed\
    \ at /tmp/tmpq3bb47_p.jl:30\\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmpq3bb47_p.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpq3bb47_p.jl:25\\nTest Summary: | Pass  Fail \
    \ Error  Total\\ntest set      |    3     1      2      6\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 2 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpq3bb47_p.jl:23\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4blcvu40.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4blcvu40.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4blcvu40.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4blcvu40.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.!?]\"\
    )\n    # Filter the sentences that start with \"I\"\n    boredoms = filter(x ->\
    \ startswith(x, \"I\"), sentences)\n    # Return the length of the filtered array\n\
    \    return length(boredoms)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpn_337zz5.jl:26\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpn_337zz5.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn_337zz5.jl:24\ntest set: Test Failed at /tmp/tmpn_337zz5.jl:29\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpn_337zz5.jl:29\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn_337zz5.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn_337zz5.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, \".\")\n        if split(i, \" \")[1]\
    \ == \"I\"\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0yplg_mt.jl:30\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n   Evaluated: 1\
    \ == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp0yplg_mt.jl:30\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0yplg_mt.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0yplg_mt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy9knq8ur.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpy9knq8ur.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpy9knq8ur.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy9knq8ur.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, r\"[.?!]\")\n        if word[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpit3pcmxr.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Is the sky blue?\") == 0\n  BoundsError: attempt to\
    \ access SubString{String}\n    at index [1]\n  Stacktrace:\n   [1] checkbounds\
    \ at ./strings/basic.jl:194 [inlined]\n   [2] getindex(::SubString{String}, ::Int64)\
    \ at ./strings/substring.jl:79\n   [3] is_bored(::String) at /tmp/tmpit3pcmxr.jl:15\n\
    \   [4] top-level scope at /tmp/tmpit3pcmxr.jl:27\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpit3pcmxr.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpit3pcmxr.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  BoundsError: attempt to access SubString{String}\n    at\
    \ index [1]\n  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n\
    \   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\n\
    \   [3] is_bored(::String) at /tmp/tmpit3pcmxr.jl:15\n   [4] top-level scope at\
    \ /tmp/tmpit3pcmxr.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpit3pcmxr.jl:25\n  \ntest set: Test Failed at\
    \ /tmp/tmpit3pcmxr.jl:30\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpit3pcmxr.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpit3pcmxr.jl:25\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    3     1      2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpit3pcmxr.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9_geizd_.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp9_geizd_.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_geizd_.jl:25\ntest set: Test Failed at /tmp/tmp9_geizd_.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9_geizd_.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_geizd_.jl:25\ntest set: Test Failed at /tmp/tmp9_geizd_.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9_geizd_.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_geizd_.jl:25\ntest set: Test Failed at /tmp/tmp9_geizd_.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp9_geizd_.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_geizd_.jl:25\ntest set: Test Failed at /tmp/tmp9_geizd_.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp9_geizd_.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_geizd_.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_geizd_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpk0yh1z2f.jl:22\\n  Expression: candidate(\"\
    I love It !\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpk0yh1z2f.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpk0yh1z2f.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return count(s\
    \ -> startswith(s, \"I\"), sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmprznqdxop.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmprznqdxop.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprznqdxop.jl:22\ntest set: Test Failed at /tmp/tmprznqdxop.jl:27\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmprznqdxop.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprznqdxop.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprznqdxop.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, [\".\", \"?\", \"!\"])\n  \
    \      if startswith(sentence, \"I\")\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmp76bi20w_.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  MethodError: no method matching\
    \ findfirst(::Array{String,1}, ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmp76bi20w_.jl:14\n   [5] top-level scope at /tmp/tmp76bi20w_.jl:26\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp76bi20w_.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp76bi20w_.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmp76bi20w_.jl:14\n   [5] top-level scope at /tmp/tmp76bi20w_.jl:27\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp76bi20w_.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp76bi20w_.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmp76bi20w_.jl:14\n   [5] top-level scope at /tmp/tmp76bi20w_.jl:28\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp76bi20w_.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp76bi20w_.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    bIt\") == 0\n  MethodError: no method matching findfirst(::Array{String,1}, ::String)\n\
    \  Closest candidates are:\n    findfirst(::Union{AbstractString, AbstractArray})\
    \ at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmp76bi20w_.jl:14\n   [5] top-level scope at /tmp/tmp76bi20w_.jl:29\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp76bi20w_.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp76bi20w_.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n  MethodError:\
    \ no method matching findfirst(::Array{String,1}, ::String)\n  Closest candidates\
    \ are:\n    findfirst(::Union{AbstractString, AbstractArray}) at array.jl:1701\n\
    \    findfirst(!Matched::Function, ::Union{AbstractString, AbstractArray}) at\
    \ array.jl:1783\n    findfirst(!Matched::Function, ::Any) at array.jl:1776\n \
    \   ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1}, ::Int64, ::Bool,\
    \ ::Array{SubString{String},1}) at ./strings/util.jl:327\n   [2] split(::String,\
    \ ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmp76bi20w_.jl:14\n   [5] top-level scope at /tmp/tmp76bi20w_.jl:30\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp76bi20w_.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp76bi20w_.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n  MethodError: no method matching findfirst(::Array{String,1},\
    \ ::String)\n  Closest candidates are:\n    findfirst(::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1701\n    findfirst(!Matched::Function, ::Union{AbstractString,\
    \ AbstractArray}) at array.jl:1783\n    findfirst(!Matched::Function, ::Any) at\
    \ array.jl:1776\n    ...\n  Stacktrace:\n   [1] _split(::String, ::Array{String,1},\
    \ ::Int64, ::Bool, ::Array{SubString{String},1}) at ./strings/util.jl:327\n  \
    \ [2] split(::String, ::Array{String,1}; limit::Int64, keepempty::Bool) at ./strings/util.jl:313\n\
    \   [3] split(::String, ::Array{String,1}) at ./strings/util.jl:313\n   [4] is_bored(::String)\
    \ at /tmp/tmp76bi20w_.jl:14\n   [5] top-level scope at /tmp/tmp76bi20w_.jl:31\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp76bi20w_.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp76bi20w_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpjj3vll74.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpjj3vll74.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjj3vll74.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjj3vll74.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp12ykv9zk.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp12ykv9zk.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12ykv9zk.jl:25\ntest set: Test Failed at /tmp/tmp12ykv9zk.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp12ykv9zk.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12ykv9zk.jl:25\ntest set: Test Failed at /tmp/tmp12ykv9zk.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp12ykv9zk.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12ykv9zk.jl:25\ntest set: Test Failed at /tmp/tmp12ykv9zk.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp12ykv9zk.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12ykv9zk.jl:25\ntest set: Test Failed at /tmp/tmp12ykv9zk.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp12ykv9zk.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp12ykv9zk.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12ykv9zk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfk9ouepy.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpfk9ouepy.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfk9ouepy.jl:25\ntest set: Test Failed at /tmp/tmpfk9ouepy.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfk9ouepy.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfk9ouepy.jl:25\ntest set: Test Failed at /tmp/tmpfk9ouepy.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpfk9ouepy.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfk9ouepy.jl:25\ntest set: Test Failed at /tmp/tmpfk9ouepy.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpfk9ouepy.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfk9ouepy.jl:25\ntest set: Test Failed at /tmp/tmpfk9ouepy.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpfk9ouepy.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfk9ouepy.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfk9ouepy.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpas4s9gen.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpas4s9gen.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpas4s9gen.jl:25\ntest set: Test Failed at /tmp/tmpas4s9gen.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpas4s9gen.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpas4s9gen.jl:25\ntest set: Test Failed at /tmp/tmpas4s9gen.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpas4s9gen.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpas4s9gen.jl:25\ntest set: Test Failed at /tmp/tmpas4s9gen.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpas4s9gen.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpas4s9gen.jl:25\ntest set: Test Failed at /tmp/tmpas4s9gen.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpas4s9gen.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpas4s9gen.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpas4s9gen.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp9_njjk8b.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp9_njjk8b.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9_njjk8b.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9_njjk8b.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"[.!?]\")) - length(split(S, r\"[.!?]I\"))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyxp10dbz.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpyxp10dbz.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyxp10dbz.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyxp10dbz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpqhxk7a3q.jl:23\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpqhxk7a3q.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqhxk7a3q.jl:20\ntest set: Test Failed at /tmp/tmpqhxk7a3q.jl:25\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpqhxk7a3q.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqhxk7a3q.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqhxk7a3q.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuyoupvhx.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpuyoupvhx.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuyoupvhx.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuyoupvhx.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, r\"[.?!]\")\n        if word[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpetkh_h4l.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access SubString{String}\\n    at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds at ./strings/basic.jl:194 [inlined]\\n   [2] getindex(::SubString{String},\
    \ ::Int64) at ./strings/substring.jl:79\\n   [3] is_bored(::String) at /tmp/tmpetkh_h4l.jl:15\\\
    n   [4] top-level scope at /tmp/tmpetkh_h4l.jl:27\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpetkh_h4l.jl:25\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpetkh_h4l.jl:28\\n  Test threw exception\\n  Expression: candidate(\"\
    I love It !\") == 1\\n  BoundsError: attempt to access SubString{String}\\n  \
    \  at index [1]\\n  Stacktrace:\\n   [1] checkbounds at ./strings/basic.jl:194\
    \ [inlined]\\n   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\\\
    n   [3] is_bored(::String) at /tmp/tmpetkh_h4l.jl:15\\n   [4] top-level scope\
    \ at /tmp/tmpetkh_h4l.jl:28\\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpetkh_h4l.jl:25\\n  \\ntest set: Test Failed\
    \ at /tmp/tmpetkh_h4l.jl:30\\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptk1ii5zi.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmptk1ii5zi.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptk1ii5zi.jl:25\\ntest set: Test Failed at /tmp/tmptk1ii5zi.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmptk1ii5zi.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptk1ii5zi.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpolwy8amf.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpolwy8amf.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolwy8amf.jl:25\ntest set: Test Failed at /tmp/tmpolwy8amf.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpolwy8amf.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolwy8amf.jl:25\ntest set: Test Failed at /tmp/tmpolwy8amf.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpolwy8amf.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolwy8amf.jl:25\ntest set: Test Failed at /tmp/tmpolwy8amf.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpolwy8amf.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolwy8amf.jl:25\ntest set: Test Failed at /tmp/tmpolwy8amf.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpolwy8amf.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpolwy8amf.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpolwy8amf.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyf83d7o5.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpyf83d7o5.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyf83d7o5.jl:25\ntest set: Test Failed at /tmp/tmpyf83d7o5.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyf83d7o5.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyf83d7o5.jl:25\ntest set: Test Failed at /tmp/tmpyf83d7o5.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpyf83d7o5.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyf83d7o5.jl:25\ntest set: Test Failed at /tmp/tmpyf83d7o5.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpyf83d7o5.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyf83d7o5.jl:25\ntest set: Test Failed at /tmp/tmpyf83d7o5.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpyf83d7o5.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyf83d7o5.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyf83d7o5.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, r\"[.?!]\")\n        if word[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpovqr8o9o.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access SubString{String}\\n    at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds at ./strings/basic.jl:194 [inlined]\\n   [2] getindex(::SubString{String},\
    \ ::Int64) at ./strings/substring.jl:79\\n   [3] is_bored(::String) at /tmp/tmpovqr8o9o.jl:15\\\
    n   [4] top-level scope at /tmp/tmpovqr8o9o.jl:27\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpovqr8o9o.jl:25\\n  \\ntest set: Error During\
    \ Test at /tmp/tmpovqr8o9o.jl:28\\n  Test threw exception\\n  Expression: candidate(\"\
    I love It !\") == 1\\n  BoundsError: attempt to access SubString{String}\\n  \
    \  at index [1]\\n  Stacktrace:\\n   [1] checkbounds at ./strings/basic.jl:194\
    \ [inlined]\\n   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\\\
    n   [3] is_bored(::String) at /tmp/tmpovqr8o9o.jl:15\\n   [4] top-level scope\
    \ at /tmp/tmpovqr8o9o.jl:28\\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmpovqr8o9o.jl:25\\n  \\ntest set: Test Failed\
    \ at /tmp/tmpovqr8o9o.jl:30\\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmpovqr8o9o.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpovqr8o9o.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return sum(starts_with(s,\
    \ \"I\") for s in sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpbcfxo5t5.jl:23\n  Test threw exception\n\
    \  Expression: candidate(\"Hello world\") == 0\n  UndefVarError: starts_with not\
    \ defined\n  Stacktrace:\n   [1] (::var\"#3#4\")(::SubString{String}) at ./none:0\n\
    \   [2] MappingRF at ./reduce.jl:90 [inlined]\n   [3] _foldl_impl(::Base.MappingRF{var\"\
    #3#4\",Base.BottomRF{typeof(Base.add_sum)}}, ::Base._InitialValue, ::Array{SubString{String},1})\
    \ at ./reduce.jl:55\n   [4] foldl_impl at ./reduce.jl:45 [inlined]\n   [5] mapfoldl_impl\
    \ at ./reduce.jl:41 [inlined]\n   [6] #mapfoldl#189 at ./reduce.jl:157 [inlined]\n\
    \   [7] mapfoldl at ./reduce.jl:157 [inlined]\n   [8] #mapreduce#193 at ./reduce.jl:283\
    \ [inlined]\n   [9] mapreduce at ./reduce.jl:283 [inlined]\n   [10] sum at ./reduce.jl:486\
    \ [inlined]\n   [11] sum at ./reduce.jl:503 [inlined]\n   [12] is_bored(::String)\
    \ at /tmp/tmpbcfxo5t5.jl:16\n   [13] top-level scope at /tmp/tmpbcfxo5t5.jl:23\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpbcfxo5t5.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpbcfxo5t5.jl:24\n  Test threw exception\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n  UndefVarError: starts_with not defined\n  Stacktrace:\n\
    \   [1] (::var\"#3#4\")(::SubString{String}) at ./none:0\n   [2] MappingRF at\
    \ ./reduce.jl:90 [inlined]\n   [3] _foldl_impl(::Base.MappingRF{var\"#3#4\",Base.BottomRF{typeof(Base.add_sum)}},\
    \ ::Base._InitialValue, ::Array{SubString{String},1}) at ./reduce.jl:55\n   [4]\
    \ foldl_impl at ./reduce.jl:45 [inlined]\n   [5] mapfoldl_impl at ./reduce.jl:41\
    \ [inlined]\n   [6] #mapfoldl#189 at ./reduce.jl:157 [inlined]\n   [7] mapfoldl\
    \ at ./reduce.jl:157 [inlined]\n   [8] #mapreduce#193 at ./reduce.jl:283 [inlined]\n\
    \   [9] mapreduce at ./reduce.jl:283 [inlined]\n   [10] sum at ./reduce.jl:486\
    \ [inlined]\n   [11] sum at ./reduce.jl:503 [inlined]\n   [12] is_bored(::String)\
    \ at /tmp/tmpbcfxo5t5.jl:16\n   [13] top-level scope at /tmp/tmpbcfxo5t5.jl:24\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpbcfxo5t5.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpbcfxo5t5.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  UndefVarError: starts_with not defined\n  Stacktrace:\n\
    \   [1] (::var\"#3#4\")(::SubString{String}) at ./none:0\n   [2] MappingRF at\
    \ ./reduce.jl:90 [inlined]\n   [3] _foldl_impl(::Base.MappingRF{var\"#3#4\",Base.BottomRF{typeof(Base.add_sum)}},\
    \ ::Base._InitialValue, ::Array{SubString{String},1}) at ./reduce.jl:55\n   [4]\
    \ foldl_impl at ./reduce.jl:45 [inlined]\n   [5] mapfoldl_impl at ./reduce.jl:41\
    \ [inlined]\n   [6] #mapfoldl#189 at ./reduce.jl:157 [inlined]\n   [7] mapfoldl\
    \ at ./reduce.jl:157 [inlined]\n   [8] #mapreduce#193 at ./reduce.jl:283 [inlined]\n\
    \   [9] mapreduce at ./reduce.jl:283 [inlined]\n   [10] sum at ./reduce.jl:486\
    \ [inlined]\n   [11] sum at ./reduce.jl:503 [inlined]\n   [12] is_bored(::String)\
    \ at /tmp/tmpbcfxo5t5.jl:16\n   [13] top-level scope at /tmp/tmpbcfxo5t5.jl:25\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpbcfxo5t5.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpbcfxo5t5.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    bIt\") == 0\n  UndefVarError: starts_with not defined\n  Stacktrace:\n   [1] (::var\"\
    #3#4\")(::SubString{String}) at ./none:0\n   [2] MappingRF at ./reduce.jl:90 [inlined]\n\
    \   [3] _foldl_impl(::Base.MappingRF{var\"#3#4\",Base.BottomRF{typeof(Base.add_sum)}},\
    \ ::Base._InitialValue, ::Array{SubString{String},1}) at ./reduce.jl:55\n   [4]\
    \ foldl_impl at ./reduce.jl:45 [inlined]\n   [5] mapfoldl_impl at ./reduce.jl:41\
    \ [inlined]\n   [6] #mapfoldl#189 at ./reduce.jl:157 [inlined]\n   [7] mapfoldl\
    \ at ./reduce.jl:157 [inlined]\n   [8] #mapreduce#193 at ./reduce.jl:283 [inlined]\n\
    \   [9] mapreduce at ./reduce.jl:283 [inlined]\n   [10] sum at ./reduce.jl:486\
    \ [inlined]\n   [11] sum at ./reduce.jl:503 [inlined]\n   [12] is_bored(::String)\
    \ at /tmp/tmpbcfxo5t5.jl:16\n   [13] top-level scope at /tmp/tmpbcfxo5t5.jl:26\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpbcfxo5t5.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpbcfxo5t5.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n  UndefVarError:\
    \ starts_with not defined\n  Stacktrace:\n   [1] (::var\"#3#4\")(::SubString{String})\
    \ at ./none:0\n   [2] MappingRF at ./reduce.jl:90 [inlined]\n   [3] _foldl_impl(::Base.MappingRF{var\"\
    #3#4\",Base.BottomRF{typeof(Base.add_sum)}}, ::Base._InitialValue, ::Array{SubString{String},1})\
    \ at ./reduce.jl:55\n   [4] foldl_impl at ./reduce.jl:45 [inlined]\n   [5] mapfoldl_impl\
    \ at ./reduce.jl:41 [inlined]\n   [6] #mapfoldl#189 at ./reduce.jl:157 [inlined]\n\
    \   [7] mapfoldl at ./reduce.jl:157 [inlined]\n   [8] #mapreduce#193 at ./reduce.jl:283\
    \ [inlined]\n   [9] mapreduce at ./reduce.jl:283 [inlined]\n   [10] sum at ./reduce.jl:486\
    \ [inlined]\n   [11] sum at ./reduce.jl:503 [inlined]\n   [12] is_bored(::String)\
    \ at /tmp/tmpbcfxo5t5.jl:16\n   [13] top-level scope at /tmp/tmpbcfxo5t5.jl:27\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpbcfxo5t5.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpbcfxo5t5.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n  UndefVarError: starts_with not defined\n\
    \  Stacktrace:\n   [1] (::var\"#3#4\")(::SubString{String}) at ./none:0\n   [2]\
    \ MappingRF at ./reduce.jl:90 [inlined]\n   [3] _foldl_impl(::Base.MappingRF{var\"\
    #3#4\",Base.BottomRF{typeof(Base.add_sum)}}, ::Base._InitialValue, ::Array{SubString{String},1})\
    \ at ./reduce.jl:55\n   [4] foldl_impl at ./reduce.jl:45 [inlined]\n   [5] mapfoldl_impl\
    \ at ./reduce.jl:41 [inlined]\n   [6] #mapfoldl#189 at ./reduce.jl:157 [inlined]\n\
    \   [7] mapfoldl at ./reduce.jl:157 [inlined]\n   [8] #mapreduce#193 at ./reduce.jl:283\
    \ [inlined]\n   [9] mapreduce at ./reduce.jl:283 [inlined]\n   [10] sum at ./reduce.jl:486\
    \ [inlined]\n   [11] sum at ./reduce.jl:503 [inlined]\n   [12] is_bored(::String)\
    \ at /tmp/tmpbcfxo5t5.jl:16\n   [13] top-level scope at /tmp/tmpbcfxo5t5.jl:28\n\
    \   [14] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [15] top-level scope at /tmp/tmpbcfxo5t5.jl:22\n  \nTest Summary: | Error\
    \  Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbcfxo5t5.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    n = 0\n    for s in split(S, r\"[.?!]\")\n        if startswith(s, \"\
    I\")\n            n += 1\n        end\n    end\n    return n\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxhsyvo_8.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpxhsyvo_8.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxhsyvo_8.jl:25\ntest set: Test Failed at /tmp/tmpxhsyvo_8.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpxhsyvo_8.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxhsyvo_8.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxhsyvo_8.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpsyjkob1v.jl:22\\n  Expression: candidate(\"\
    I love It !\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpsyjkob1v.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpsyjkob1v.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6au_h1u7.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp6au_h1u7.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6au_h1u7.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6au_h1u7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpkd4ex8gs.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpkd4ex8gs.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkd4ex8gs.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkd4ex8gs.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp44nle9sd.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp44nle9sd.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp44nle9sd.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp44nle9sd.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbm8ap5dk.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpbm8ap5dk.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbm8ap5dk.jl:25\ntest set: Test Failed at /tmp/tmpbm8ap5dk.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbm8ap5dk.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbm8ap5dk.jl:25\ntest set: Test Failed at /tmp/tmpbm8ap5dk.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpbm8ap5dk.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbm8ap5dk.jl:25\ntest set: Test Failed at /tmp/tmpbm8ap5dk.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpbm8ap5dk.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbm8ap5dk.jl:25\ntest set: Test Failed at /tmp/tmpbm8ap5dk.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpbm8ap5dk.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbm8ap5dk.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbm8ap5dk.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, \".\")\n        if i[1] == 'I'\n    \
    \        count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp2lhkdwbj.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp2lhkdwbj.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2lhkdwbj.jl:25\\ntest set: Test Failed at /tmp/tmp2lhkdwbj.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmp2lhkdwbj.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp2lhkdwbj.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd6j2sf51.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpd6j2sf51.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd6j2sf51.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd6j2sf51.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, ['.', '?', '!'])\n        if i[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprnu9tyhf.jl:27\\n  Test threw\
    \ exception\\n  Expression: candidate(\"Is the sky blue?\") == 0\\n  BoundsError:\
    \ attempt to access SubString{String}\\n    at index [1]\\n  Stacktrace:\\n  \
    \ [1] checkbounds at ./strings/basic.jl:194 [inlined]\\n   [2] getindex(::SubString{String},\
    \ ::Int64) at ./strings/substring.jl:79\\n   [3] is_bored(::String) at /tmp/tmprnu9tyhf.jl:15\\\
    n   [4] top-level scope at /tmp/tmprnu9tyhf.jl:27\\n   [5] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmprnu9tyhf.jl:25\\n  \\ntest set: Error During\
    \ Test at /tmp/tmprnu9tyhf.jl:28\\n  Test threw exception\\n  Expression: candidate(\"\
    I love It !\") == 1\\n  BoundsError: attempt to access SubString{String}\\n  \
    \  at index [1]\\n  Stacktrace:\\n   [1] checkbounds at ./strings/basic.jl:194\
    \ [inlined]\\n   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\\\
    n   [3] is_bored(::String) at /tmp/tmprnu9tyhf.jl:15\\n   [4] top-level scope\
    \ at /tmp/tmprnu9tyhf.jl:28\\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n   [6] top-level scope at /tmp/tmprnu9tyhf.jl:25\\n  \\ntest set: Test Failed\
    \ at /tmp/tmprnu9tyhf.jl:30\\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n\
    \ [1] top-level scope at /tmp/tmprnu9tyhf.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprnu9tyhf.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # split the string by '.', '?' or '!'\n    sentences = split(S, r\"[.?!]\"\
    )\n    # filter out the sentences that start with 'I'\n    boredoms = filter(x\
    \ -> startswith(x, \"I\"), sentences)\n    # return the length of the filtered\
    \ array\n    return length(boredoms)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpuiryws0a.jl:26\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpuiryws0a.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuiryws0a.jl:24\ntest set: Test Failed at /tmp/tmpuiryws0a.jl:29\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpuiryws0a.jl:29\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuiryws0a.jl:24\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuiryws0a.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    count = 0\n\
    \    for sentence in sentences\n        if startswith(sentence, \"I\")\n     \
    \       count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") ==\
    \ 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love\
    \ It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
    \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpm623r9xn.jl:30\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpm623r9xn.jl:30\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm623r9xn.jl:28\\ntest set: Test Failed at /tmp/tmpm623r9xn.jl:33\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmpm623r9xn.jl:33\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpm623r9xn.jl:28\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprvahua_t.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmprvahua_t.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvahua_t.jl:25\ntest set: Test Failed at /tmp/tmprvahua_t.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprvahua_t.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvahua_t.jl:25\ntest set: Test Failed at /tmp/tmprvahua_t.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmprvahua_t.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvahua_t.jl:25\ntest set: Test Failed at /tmp/tmprvahua_t.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmprvahua_t.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvahua_t.jl:25\ntest set: Test Failed at /tmp/tmprvahua_t.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmprvahua_t.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprvahua_t.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvahua_t.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, ['.', '?', '!'])\n        if i[1] ==\
    \ 'I'\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfvn8_0av.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Is the sky blue?\") == 0\n  BoundsError: attempt to\
    \ access SubString{String}\n    at index [1]\n  Stacktrace:\n   [1] checkbounds\
    \ at ./strings/basic.jl:194 [inlined]\n   [2] getindex(::SubString{String}, ::Int64)\
    \ at ./strings/substring.jl:79\n   [3] is_bored(::String) at /tmp/tmpfvn8_0av.jl:15\n\
    \   [4] top-level scope at /tmp/tmpfvn8_0av.jl:27\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpfvn8_0av.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpfvn8_0av.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  BoundsError: attempt to access SubString{String}\n    at\
    \ index [1]\n  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n\
    \   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\n\
    \   [3] is_bored(::String) at /tmp/tmpfvn8_0av.jl:15\n   [4] top-level scope at\
    \ /tmp/tmpfvn8_0av.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpfvn8_0av.jl:25\n  \ntest set: Test Failed at\
    \ /tmp/tmpfvn8_0av.jl:30\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpfvn8_0av.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfvn8_0av.jl:25\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    3     1      2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfvn8_0av.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpaixa_tq7.jl:25\\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpaixa_tq7.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpaixa_tq7.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpgk17fa6k.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpgk17fa6k.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgk17fa6k.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgk17fa6k.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"I\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpuk49548x.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpuk49548x.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuk49548x.jl:19\ntest set: Test Failed at /tmp/tmpuk49548x.jl:22\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuk49548x.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuk49548x.jl:19\ntest set: Test Failed at /tmp/tmpuk49548x.jl:23\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpuk49548x.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuk49548x.jl:19\ntest set: Test Failed at /tmp/tmpuk49548x.jl:24\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpuk49548x.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuk49548x.jl:19\ntest set: Test Failed at /tmp/tmpuk49548x.jl:25\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpuk49548x.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuk49548x.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuk49548x.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpsfr3ceuh.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpsfr3ceuh.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsfr3ceuh.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsfr3ceuh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, \".\")\n \
    \   boredoms = 0\n    for sentence in sentences\n        words = split(sentence,\
    \ \" \")\n        if words[1] == \"I\"\n            boredoms += 1\n        end\n\
    \    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp58okya9m.jl:33\\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\\n   Evaluated:\
    \ 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmp58okya9m.jl:33\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp58okya9m.jl:28\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppctr7ghl.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppctr7ghl.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppctr7ghl.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppctr7ghl.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # count the number of sentences that start with \"I\"\n    return sum(s->startswith(s,\
    \ \"I\") ? 1 : 0, sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is\
    \ the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp_fjhg6l8.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp_fjhg6l8.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_fjhg6l8.jl:22\ntest set: Test Failed at /tmp/tmp_fjhg6l8.jl:27\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp_fjhg6l8.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_fjhg6l8.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_fjhg6l8.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpp50nkppe.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpp50nkppe.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp50nkppe.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp50nkppe.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmp54x4il69.jl:22\\n  Expression: candidate(\"\
    I love It !\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmp54x4il69.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp54x4il69.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    sentences = split(S, r\"[.?!]\")\n    boredoms = 0\n    for sentence in\
    \ sentences\n        if startswith(sentence, \"I\")\n            boredoms += 1\n\
    \        end\n    end\n    return boredoms\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp1l636iiq.jl:28\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp1l636iiq.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1l636iiq.jl:26\ntest set: Test Failed at /tmp/tmp1l636iiq.jl:31\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp1l636iiq.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1l636iiq.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1l636iiq.jl:24\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv4glcaba.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpv4glcaba.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv4glcaba.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv4glcaba.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpj8xx_t4q.jl:22\\n  Expression: candidate(\"\
    I love It !\") == 1\\n   Evaluated: 0 == 1\\nStacktrace:\\n [1] top-level scope\
    \ at /tmp/tmpj8xx_t4q.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpj8xx_t4q.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4e41rnt8.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4e41rnt8.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4e41rnt8.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4e41rnt8.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, \".\")\n        if startswith(i, \"I\"\
    )\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp1fps18_8.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp1fps18_8.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1fps18_8.jl:25\\ntest set: Test Failed at /tmp/tmp1fps18_8.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmp1fps18_8.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp1fps18_8.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4xye0gxp.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4xye0gxp.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4xye0gxp.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xye0gxp.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.!?]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmph47vt6hq.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmph47vt6hq.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph47vt6hq.jl:25\\ntest set: Test Failed at /tmp/tmph47vt6hq.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmph47vt6hq.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmph47vt6hq.jl:25\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    n = 0\n    for s in split(S, ['.', '?', '!'])\n        if startswith(s,\
    \ \"I\")\n            n += 1\n        end\n    end\n    return n\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4dmg31tw.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp4dmg31tw.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4dmg31tw.jl:25\\ntest set: Test Failed at /tmp/tmp4dmg31tw.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 1 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4dmg31tw.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4dmg31tw.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    4     2      6\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjxs9vtdu.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpjxs9vtdu.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjxs9vtdu.jl:25\ntest set: Test Failed at /tmp/tmpjxs9vtdu.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjxs9vtdu.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjxs9vtdu.jl:25\ntest set: Test Failed at /tmp/tmpjxs9vtdu.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpjxs9vtdu.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjxs9vtdu.jl:25\ntest set: Test Failed at /tmp/tmpjxs9vtdu.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpjxs9vtdu.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjxs9vtdu.jl:25\ntest set: Test Failed at /tmp/tmpjxs9vtdu.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpjxs9vtdu.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjxs9vtdu.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjxs9vtdu.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd464qsll.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpd464qsll.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd464qsll.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd464qsll.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp9o5ojmhe.jl:21\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmp9o5ojmhe.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp9o5ojmhe.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp33vrvjwd.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp33vrvjwd.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp33vrvjwd.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp33vrvjwd.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return count(s\
    \ -> startswith(s, \"I\"), sentences)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp5c4hjuzt.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp5c4hjuzt.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5c4hjuzt.jl:22\ntest set: Test Failed at /tmp/tmp5c4hjuzt.jl:27\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp5c4hjuzt.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5c4hjuzt.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5c4hjuzt.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, \" \")\n        if word == \"I\"\n\
    \            count += 1\n        end\n    end\n    return count\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\")\
    \ == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpas_3c3bt.jl:31\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpas_3c3bt.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpas_3c3bt.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpas_3c3bt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpovelqyxr.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpovelqyxr.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpovelqyxr.jl:25\ntest set: Test Failed at /tmp/tmpovelqyxr.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpovelqyxr.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpovelqyxr.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpovelqyxr.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpvmbpgozg.jl:27\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpvmbpgozg.jl:27\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvmbpgozg.jl:25\\ntest set: Test Failed at /tmp/tmpvmbpgozg.jl:28\\\
    n  Expression: candidate(\"I love It !\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpvmbpgozg.jl:28\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvmbpgozg.jl:25\\ntest set: Test Failed at /tmp/tmpvmbpgozg.jl:29\\\
    n  Expression: candidate(\"bIt\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpvmbpgozg.jl:29\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvmbpgozg.jl:25\\ntest set: Test Failed at /tmp/tmpvmbpgozg.jl:30\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 3 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvmbpgozg.jl:30\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvmbpgozg.jl:25\\ntest set: Test Failed at /tmp/tmpvmbpgozg.jl:31\\\
    n  Expression: candidate(\"You and I are going for a walk\") == 0\\n   Evaluated:\
    \ 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmpvmbpgozg.jl:31\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpvmbpgozg.jl:25\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    1     5      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"[.?!]\")) - length(split(S, r\"[.?!]I\"))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppeblu63u.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmppeblu63u.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppeblu63u.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppeblu63u.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw4qfxnt9.jl:21\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpw4qfxnt9.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw4qfxnt9.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4qfxnt9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.|\\?|\\!\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpzli814_h.jl:21\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpzli814_h.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpzli814_h.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, r\"[.?!]\")\n        if startswith(sentence,\
    \ \"I\")\n            boredoms += 1\n        end\n    end\n    return boredoms\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
    Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc7987crm.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpc7987crm.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc7987crm.jl:25\ntest set: Test Failed at /tmp/tmpc7987crm.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpc7987crm.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc7987crm.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc7987crm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, \"I\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpaz9no8xf.jl:21\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpaz9no8xf.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpaz9no8xf.jl:19\\ntest set: Test Failed at /tmp/tmpaz9no8xf.jl:22\\\
    n  Expression: candidate(\"I love It !\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpaz9no8xf.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpaz9no8xf.jl:19\\ntest set: Test Failed at /tmp/tmpaz9no8xf.jl:23\\\
    n  Expression: candidate(\"bIt\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpaz9no8xf.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpaz9no8xf.jl:19\\ntest set: Test Failed at /tmp/tmpaz9no8xf.jl:24\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 3 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmpaz9no8xf.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpaz9no8xf.jl:19\\ntest set: Test Failed at /tmp/tmpaz9no8xf.jl:25\\\
    n  Expression: candidate(\"You and I are going for a walk\") == 0\\n   Evaluated:\
    \ 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmpaz9no8xf.jl:25\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpaz9no8xf.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # Split the string into sentences\n    sentences = split(S, r\"[.?!]\"\
    )\n    # Count the number of sentences that start with \"I\"\n    return sum(s\
    \ -> startswith(s, \"I\") ? 1 : 0, sentences)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpq5me6hsh.jl:24\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpq5me6hsh.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq5me6hsh.jl:22\ntest set: Test Failed at /tmp/tmpq5me6hsh.jl:27\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpq5me6hsh.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq5me6hsh.jl:22\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq5me6hsh.jl:20\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\"))-1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpsrkrgg_l.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpsrkrgg_l.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsrkrgg_l.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsrkrgg_l.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmprtoeuhs7.jl:25\\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmprtoeuhs7.jl:25\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmprtoeuhs7.jl:19\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    5     1      6\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiftnu4xy.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpiftnu4xy.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiftnu4xy.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiftnu4xy.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6nu0619_.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp6nu0619_.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6nu0619_.jl:25\ntest set: Test Failed at /tmp/tmp6nu0619_.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6nu0619_.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6nu0619_.jl:25\ntest set: Test Failed at /tmp/tmp6nu0619_.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6nu0619_.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6nu0619_.jl:25\ntest set: Test Failed at /tmp/tmp6nu0619_.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp6nu0619_.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6nu0619_.jl:25\ntest set: Test Failed at /tmp/tmp6nu0619_.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp6nu0619_.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6nu0619_.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6nu0619_.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpmpw2lj0z.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpmpw2lj0z.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmpw2lj0z.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmpw2lj0z.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    n = 0\n    for i in split(S, \".\")\n        if i[1] == 'I'\n        \
    \    n += 1\n        end\n    end\n    return n\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpp7n5hh80.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpp7n5hh80.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7n5hh80.jl:25\ntest set: Test Failed at /tmp/tmpp7n5hh80.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpp7n5hh80.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp7n5hh80.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp7n5hh80.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmphiiom5nu.jl:23\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmphiiom5nu.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphiiom5nu.jl:20\ntest set: Test Failed at /tmp/tmphiiom5nu.jl:25\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmphiiom5nu.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphiiom5nu.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphiiom5nu.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\.\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpr2dj3dfq.jl:22\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpr2dj3dfq.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr2dj3dfq.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr2dj3dfq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, \"I\")) - 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "b'test set: Test Failed at /tmp/tmpkffs58cg.jl:21\\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\n [1] top-level\
    \ scope at /tmp/tmpkffs58cg.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkffs58cg.jl:19\\ntest set: Test Failed at /tmp/tmpkffs58cg.jl:22\\\
    n  Expression: candidate(\"I love It !\") == 1\\n   Evaluated: 2 == 1\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkffs58cg.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkffs58cg.jl:19\\ntest set: Test Failed at /tmp/tmpkffs58cg.jl:23\\\
    n  Expression: candidate(\"bIt\") == 0\\n   Evaluated: 1 == 0\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpkffs58cg.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkffs58cg.jl:19\\ntest set: Test Failed at /tmp/tmpkffs58cg.jl:24\\\
    n  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\\n   Evaluated: 3 == 2\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkffs58cg.jl:24\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkffs58cg.jl:19\\ntest set: Test Failed at /tmp/tmpkffs58cg.jl:25\\\
    n  Expression: candidate(\"You and I are going for a walk\") == 0\\n   Evaluated:\
    \ 1 == 0\\nStacktrace:\\n [1] top-level scope at /tmp/tmpkffs58cg.jl:25\\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpkffs58cg.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for word in split(S, ['.', '?', '!'])\n        if word[1]\
    \ == 'I'\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb5_pd_8e.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Is the sky blue?\") == 0\n  BoundsError: attempt to\
    \ access SubString{String}\n    at index [1]\n  Stacktrace:\n   [1] checkbounds\
    \ at ./strings/basic.jl:194 [inlined]\n   [2] getindex(::SubString{String}, ::Int64)\
    \ at ./strings/substring.jl:79\n   [3] is_bored(::String) at /tmp/tmpb5_pd_8e.jl:15\n\
    \   [4] top-level scope at /tmp/tmpb5_pd_8e.jl:27\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpb5_pd_8e.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpb5_pd_8e.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  BoundsError: attempt to access SubString{String}\n    at\
    \ index [1]\n  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n\
    \   [2] getindex(::SubString{String}, ::Int64) at ./strings/substring.jl:79\n\
    \   [3] is_bored(::String) at /tmp/tmpb5_pd_8e.jl:15\n   [4] top-level scope at\
    \ /tmp/tmpb5_pd_8e.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpb5_pd_8e.jl:25\n  \ntest set: Test Failed at\
    \ /tmp/tmpb5_pd_8e.jl:30\n  Expression: candidate(\"I feel good today. I will\
    \ be productive. will kill It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpb5_pd_8e.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb5_pd_8e.jl:25\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    3     1      2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 1 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb5_pd_8e.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    boredoms = 0\n    for sentence in split(S, ['.', '?', '!'])\n        if\
    \ startswith(sentence, \"I\")\n            boredoms += 1\n        end\n    end\n\
    \    return boredoms\nend\nusing Test\n\n@testset begin\n\ncandidate = is_bored;\n\
    \t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\"\
    ) == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"bIt\")\
    \ == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0w115kml.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp0w115kml.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0w115kml.jl:25\ntest set: Test Failed at /tmp/tmp0w115kml.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp0w115kml.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0w115kml.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0w115kml.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6l_0am7q.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp6l_0am7q.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6l_0am7q.jl:25\ntest set: Test Failed at /tmp/tmp6l_0am7q.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6l_0am7q.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6l_0am7q.jl:25\ntest set: Test Failed at /tmp/tmp6l_0am7q.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6l_0am7q.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6l_0am7q.jl:25\ntest set: Test Failed at /tmp/tmp6l_0am7q.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp6l_0am7q.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6l_0am7q.jl:25\ntest set: Test Failed at /tmp/tmp6l_0am7q.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp6l_0am7q.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6l_0am7q.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6l_0am7q.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb8avz34f.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpb8avz34f.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb8avz34f.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb8avz34f.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for s in split(S, ['.', '?', '!'])\n        if startswith(s,\
    \ \"I\")\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfyshxf6b.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpfyshxf6b.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfyshxf6b.jl:25\ntest set: Test Failed at /tmp/tmpfyshxf6b.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpfyshxf6b.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfyshxf6b.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfyshxf6b.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    # your code here\n    return 0\nend\nusing Test\n\n@testset begin\n\n\
    candidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t@test(candidate(\"\
    Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\") == 1)\n\t@test(candidate(\"\
    bIt\") == 0)\n\t@test(candidate(\"I feel good today. I will be productive. will\
    \ kill It\") == 2)\n\t@test(candidate(\"You and I are going for a walk\") == 0)\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmp044xmu37.jl:23\n  Expression: candidate(\"\
    I love It !\") == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp044xmu37.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp044xmu37.jl:20\ntest set: Test Failed at /tmp/tmp044xmu37.jl:25\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp044xmu37.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp044xmu37.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp044xmu37.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7wvvlmzm.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp7wvvlmzm.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wvvlmzm.jl:25\ntest set: Test Failed at /tmp/tmp7wvvlmzm.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7wvvlmzm.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wvvlmzm.jl:25\ntest set: Test Failed at /tmp/tmp7wvvlmzm.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp7wvvlmzm.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wvvlmzm.jl:25\ntest set: Test Failed at /tmp/tmp7wvvlmzm.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmp7wvvlmzm.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wvvlmzm.jl:25\ntest set: Test Failed at /tmp/tmp7wvvlmzm.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp7wvvlmzm.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wvvlmzm.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7wvvlmzm.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in split(S, \".\")\n        if startswith(i, \"I\"\
    )\n            count += 1\n        end\n    end\n    return count\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\"\
    ) == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I\
    \ love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd39pkbnt.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpd39pkbnt.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd39pkbnt.jl:25\ntest set: Test Failed at /tmp/tmpd39pkbnt.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 1 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpd39pkbnt.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpd39pkbnt.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd39pkbnt.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq0wuy_h0.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpq0wuy_h0.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0wuy_h0.jl:25\ntest set: Test Failed at /tmp/tmpq0wuy_h0.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq0wuy_h0.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0wuy_h0.jl:25\ntest set: Test Failed at /tmp/tmpq0wuy_h0.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq0wuy_h0.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0wuy_h0.jl:25\ntest set: Test Failed at /tmp/tmpq0wuy_h0.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpq0wuy_h0.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0wuy_h0.jl:25\ntest set: Test Failed at /tmp/tmpq0wuy_h0.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpq0wuy_h0.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0wuy_h0.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq0wuy_h0.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4kpzmznr.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4kpzmznr.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4kpzmznr.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4kpzmznr.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I' && S[i-1]\
    \ == ' '\n            count += 1\n        end\n    end\n    return count\nend\n\
    using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello\
    \ world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
    I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I\
    \ feel good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
    You and I are going for a walk\") == 0)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmplshafw_v.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"Is the sky blue?\") == 0\n  BoundsError: attempt to\
    \ access String\n    at index [0]\n  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194\
    \ [inlined]\n   [2] codeunit at ./strings/string.jl:89 [inlined]\n   [3] getindex\
    \ at ./strings/string.jl:210 [inlined]\n   [4] is_bored(::String) at /tmp/tmplshafw_v.jl:15\n\
    \   [5] top-level scope at /tmp/tmplshafw_v.jl:27\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmplshafw_v.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmplshafw_v.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    I love It !\") == 1\n  BoundsError: attempt to access String\n    at index [0]\n\
    \  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n   [2]\
    \ codeunit at ./strings/string.jl:89 [inlined]\n   [3] getindex at ./strings/string.jl:210\
    \ [inlined]\n   [4] is_bored(::String) at /tmp/tmplshafw_v.jl:15\n   [5] top-level\
    \ scope at /tmp/tmplshafw_v.jl:28\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmplshafw_v.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmplshafw_v.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    I feel good today. I will be productive. will kill It\") == 2\n  BoundsError:\
    \ attempt to access String\n    at index [0]\n  Stacktrace:\n   [1] checkbounds\
    \ at ./strings/basic.jl:194 [inlined]\n   [2] codeunit at ./strings/string.jl:89\
    \ [inlined]\n   [3] getindex at ./strings/string.jl:210 [inlined]\n   [4] is_bored(::String)\
    \ at /tmp/tmplshafw_v.jl:15\n   [5] top-level scope at /tmp/tmplshafw_v.jl:30\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmplshafw_v.jl:25\n  \ntest set: Test Failed at\
    \ /tmp/tmplshafw_v.jl:31\n  Expression: candidate(\"You and I are going for a\
    \ walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmplshafw_v.jl:31\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplshafw_v.jl:25\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    2     1      3      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplshafw_v.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpketnnl0s.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpketnnl0s.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpketnnl0s.jl:25\ntest set: Test Failed at /tmp/tmpketnnl0s.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpketnnl0s.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpketnnl0s.jl:25\ntest set: Test Failed at /tmp/tmpketnnl0s.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpketnnl0s.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpketnnl0s.jl:25\ntest set: Test Failed at /tmp/tmpketnnl0s.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpketnnl0s.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpketnnl0s.jl:25\ntest set: Test Failed at /tmp/tmpketnnl0s.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpketnnl0s.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpketnnl0s.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpketnnl0s.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7mozrzby.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp7mozrzby.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7mozrzby.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7mozrzby.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi1t8f383.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpi1t8f383.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi1t8f383.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi1t8f383.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4p5jhw61.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4p5jhw61.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4p5jhw61.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4p5jhw61.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    return length(split(S, r\"\\bI\\b\")) - 1\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1q7240lr.jl:25\n  Expression: candidate(\"\
    You and I are going for a walk\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp1q7240lr.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1q7240lr.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    5     1      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1q7240lr.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
    \ \n    count = 0\n    for i in 1:length(S)\n        if S[i] == 'I'\n        \
    \    count += 1\n        end\n    end\n    return count\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_bored;\n\t@test(candidate(\"Hello world\") == 0)\n\t\
    @test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"I love It !\"\
    ) == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel good today.\
    \ I will be productive. will kill It\") == 2)\n\t@test(candidate(\"You and I are\
    \ going for a walk\") == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv75r18mt.jl:27\n  Expression: candidate(\"\
    Is the sky blue?\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpv75r18mt.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv75r18mt.jl:25\ntest set: Test Failed at /tmp/tmpv75r18mt.jl:28\n\
    \  Expression: candidate(\"I love It !\") == 1\n   Evaluated: 2 == 1\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv75r18mt.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv75r18mt.jl:25\ntest set: Test Failed at /tmp/tmpv75r18mt.jl:29\n\
    \  Expression: candidate(\"bIt\") == 0\n   Evaluated: 1 == 0\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpv75r18mt.jl:29\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv75r18mt.jl:25\ntest set: Test Failed at /tmp/tmpv75r18mt.jl:30\n\
    \  Expression: candidate(\"I feel good today. I will be productive. will kill\
    \ It\") == 2\n   Evaluated: 3 == 2\nStacktrace:\n [1] top-level scope at /tmp/tmpv75r18mt.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv75r18mt.jl:25\ntest set: Test Failed at /tmp/tmpv75r18mt.jl:31\n\
    \  Expression: candidate(\"You and I are going for a walk\") == 0\n   Evaluated:\
    \ 1 == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpv75r18mt.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv75r18mt.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv75r18mt.jl:23\n"
  exit_code: 1
  status: SyntaxError
