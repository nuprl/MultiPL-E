name: HumanEval_97_multiply
language: julia
results:
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmptohupek4.jl:21\\n  Expression: candidate(14,\
    \ -15) == 20\\n   Evaluated: -20 == 20\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmptohupek4.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmptohupek4.jl:17\\nTest Summary: | Pass  Fail \
    \ '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return mod(a,10)*mod(b,10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwnqih8m4.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] top-level scope at /tmp/tmpwnqih8m4.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnqih8m4.jl:17\ntest set: Test Failed at /tmp/tmpwnqih8m4.jl:19\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwnqih8m4.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnqih8m4.jl:17\ntest set: Test Failed at /tmp/tmpwnqih8m4.jl:21\n\
    \  Expression: candidate(14, -15) == 20\n   Evaluated: 0 == 20\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwnqih8m4.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnqih8m4.jl:17\ntest set: Test Failed at /tmp/tmpwnqih8m4.jl:22\n\
    \  Expression: candidate(76, 67) == 42\n   Evaluated: 2 == 42\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwnqih8m4.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnqih8m4.jl:17\ntest set: Test Failed at /tmp/tmpwnqih8m4.jl:23\n\
    \  Expression: candidate(17, 27) == 49\n   Evaluated: 9 == 49\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpwnqih8m4.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnqih8m4.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwnqih8m4.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return mod(a,10)*mod(b,10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpbx1quy6z.jl:21\\n  Expression: candidate(14,\
    \ -15) == 20\\n   Evaluated: -20 == 20\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpbx1quy6z.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpbx1quy6z.jl:17\\nTest Summary: | Pass  Fail \
    \ '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4bz08nus.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] top-level scope at /tmp/tmp4bz08nus.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4bz08nus.jl:17\ntest set: Test Failed at /tmp/tmp4bz08nus.jl:19\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4bz08nus.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4bz08nus.jl:17\ntest set: Test Failed at /tmp/tmp4bz08nus.jl:21\n\
    \  Expression: candidate(14, -15) == 20\n   Evaluated: 0 == 20\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4bz08nus.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4bz08nus.jl:17\ntest set: Test Failed at /tmp/tmp4bz08nus.jl:22\n\
    \  Expression: candidate(76, 67) == 42\n   Evaluated: 2 == 42\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4bz08nus.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4bz08nus.jl:17\ntest set: Test Failed at /tmp/tmp4bz08nus.jl:23\n\
    \  Expression: candidate(17, 27) == 49\n   Evaluated: 9 == 49\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4bz08nus.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4bz08nus.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4bz08nus.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjeyqvvaq.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmpjeyqvvaq.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjeyqvvaq.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjeyqvvaq.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsi7e9_lf.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmpsi7e9_lf.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsi7e9_lf.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsi7e9_lf.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpdypj3ni_.jl:21\\n  Expression: candidate(14,\
    \ -15) == 20\\n   Evaluated: -20 == 20\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpdypj3ni_.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpdypj3ni_.jl:17\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmw5huc8p.jl:18\\n  Expression: candidate(148,\
    \ 412) == 16\\n   Evaluated: 6 == 16\\nStacktrace:\\n [1] top-level scope at /tmp/tmpmw5huc8p.jl:18\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmw5huc8p.jl:17\\ntest set: Test Failed at /tmp/tmpmw5huc8p.jl:19\\\
    n  Expression: candidate(19, 28) == 72\\n   Evaluated: 2 == 72\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmw5huc8p.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmw5huc8p.jl:17\\ntest set: Test Failed at /tmp/tmpmw5huc8p.jl:21\\\
    n  Expression: candidate(14, -15) == 20\\n   Evaluated: 0 == 20\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmw5huc8p.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmw5huc8p.jl:17\\ntest set: Test Failed at /tmp/tmpmw5huc8p.jl:22\\\
    n  Expression: candidate(76, 67) == 42\\n   Evaluated: 2 == 42\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmw5huc8p.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmw5huc8p.jl:17\\ntest set: Test Failed at /tmp/tmpmw5huc8p.jl:23\\\
    n  Expression: candidate(17, 27) == 49\\n   Evaluated: 9 == 49\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpmw5huc8p.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmw5huc8p.jl:17\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    3     5      8\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpxxdarchx.jl:21\\n  Expression: candidate(14,\
    \ -15) == 20\\n   Evaluated: -20 == 20\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpxxdarchx.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpxxdarchx.jl:17\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    7     1      8\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_ai1oma1.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] top-level scope at /tmp/tmp_ai1oma1.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_ai1oma1.jl:17\ntest set: Test Failed at /tmp/tmp_ai1oma1.jl:19\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_ai1oma1.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_ai1oma1.jl:17\ntest set: Test Failed at /tmp/tmp_ai1oma1.jl:21\n\
    \  Expression: candidate(14, -15) == 20\n   Evaluated: 0 == 20\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ai1oma1.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_ai1oma1.jl:17\ntest set: Test Failed at /tmp/tmp_ai1oma1.jl:22\n\
    \  Expression: candidate(76, 67) == 42\n   Evaluated: 2 == 42\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_ai1oma1.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_ai1oma1.jl:17\ntest set: Test Failed at /tmp/tmp_ai1oma1.jl:23\n\
    \  Expression: candidate(17, 27) == 49\n   Evaluated: 9 == 49\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_ai1oma1.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_ai1oma1.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_ai1oma1.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnb6hdqek.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] top-level scope at /tmp/tmpnb6hdqek.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnb6hdqek.jl:17\ntest set: Test Failed at /tmp/tmpnb6hdqek.jl:19\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpnb6hdqek.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnb6hdqek.jl:17\ntest set: Test Failed at /tmp/tmpnb6hdqek.jl:21\n\
    \  Expression: candidate(14, -15) == 20\n   Evaluated: 0 == 20\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnb6hdqek.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnb6hdqek.jl:17\ntest set: Test Failed at /tmp/tmpnb6hdqek.jl:22\n\
    \  Expression: candidate(76, 67) == 42\n   Evaluated: 2 == 42\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpnb6hdqek.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnb6hdqek.jl:17\ntest set: Test Failed at /tmp/tmpnb6hdqek.jl:23\n\
    \  Expression: candidate(17, 27) == 49\n   Evaluated: 9 == 49\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpnb6hdqek.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnb6hdqek.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnb6hdqek.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp86dlzdoc.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmp86dlzdoc.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp86dlzdoc.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp86dlzdoc.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplviywsev.jl:18\\n  Expression: candidate(148,\
    \ 412) == 16\\n   Evaluated: 6 == 16\\nStacktrace:\\n [1] top-level scope at /tmp/tmplviywsev.jl:18\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplviywsev.jl:17\\ntest set: Test Failed at /tmp/tmplviywsev.jl:19\\\
    n  Expression: candidate(19, 28) == 72\\n   Evaluated: 2 == 72\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplviywsev.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplviywsev.jl:17\\ntest set: Test Failed at /tmp/tmplviywsev.jl:21\\\
    n  Expression: candidate(14, -15) == 20\\n   Evaluated: 0 == 20\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplviywsev.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplviywsev.jl:17\\ntest set: Test Failed at /tmp/tmplviywsev.jl:22\\\
    n  Expression: candidate(76, 67) == 42\\n   Evaluated: 2 == 42\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplviywsev.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplviywsev.jl:17\\ntest set: Test Failed at /tmp/tmplviywsev.jl:23\\\
    n  Expression: candidate(17, 27) == 49\\n   Evaluated: 9 == 49\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmplviywsev.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplviywsev.jl:17\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    3     5      8\\n'"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmplviywsev.jl:15\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return mod(a,10)*mod(b,10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz95s3lwv.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] top-level scope at /tmp/tmpz95s3lwv.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz95s3lwv.jl:17\ntest set: Test Failed at /tmp/tmpz95s3lwv.jl:19\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpz95s3lwv.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz95s3lwv.jl:17\ntest set: Test Failed at /tmp/tmpz95s3lwv.jl:21\n\
    \  Expression: candidate(14, -15) == 20\n   Evaluated: 0 == 20\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz95s3lwv.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz95s3lwv.jl:17\ntest set: Test Failed at /tmp/tmpz95s3lwv.jl:22\n\
    \  Expression: candidate(76, 67) == 42\n   Evaluated: 2 == 42\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpz95s3lwv.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz95s3lwv.jl:17\ntest set: Test Failed at /tmp/tmpz95s3lwv.jl:23\n\
    \  Expression: candidate(17, 27) == 49\n   Evaluated: 9 == 49\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpz95s3lwv.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz95s3lwv.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz95s3lwv.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)*abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp4a24ci7n.jl:18\\n  Expression: candidate(148,\
    \ 412) == 16\\n   Evaluated: 6 == 16\\nStacktrace:\\n [1] top-level scope at /tmp/tmp4a24ci7n.jl:18\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4a24ci7n.jl:17\\ntest set: Test Failed at /tmp/tmp4a24ci7n.jl:19\\\
    n  Expression: candidate(19, 28) == 72\\n   Evaluated: 2 == 72\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4a24ci7n.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4a24ci7n.jl:17\\ntest set: Test Failed at /tmp/tmp4a24ci7n.jl:21\\\
    n  Expression: candidate(14, -15) == 20\\n   Evaluated: 0 == 20\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4a24ci7n.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4a24ci7n.jl:17\\ntest set: Test Failed at /tmp/tmp4a24ci7n.jl:22\\\
    n  Expression: candidate(76, 67) == 42\\n   Evaluated: 2 == 42\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4a24ci7n.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4a24ci7n.jl:17\\ntest set: Test Failed at /tmp/tmp4a24ci7n.jl:23\\\
    n  Expression: candidate(17, 27) == 49\\n   Evaluated: 9 == 49\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmp4a24ci7n.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp4a24ci7n.jl:17\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    3     5      8\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a) % 10 * abs(b) % 10\nend\nusing Test\n\n@testset begin\n\n\
    candidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19,\
    \ 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15)\
    \ == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\
    \t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg71vd0fx.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] top-level scope at /tmp/tmpg71vd0fx.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg71vd0fx.jl:17\ntest set: Test Failed at /tmp/tmpg71vd0fx.jl:19\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpg71vd0fx.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg71vd0fx.jl:17\ntest set: Test Failed at /tmp/tmpg71vd0fx.jl:21\n\
    \  Expression: candidate(14, -15) == 20\n   Evaluated: 0 == 20\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg71vd0fx.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg71vd0fx.jl:17\ntest set: Test Failed at /tmp/tmpg71vd0fx.jl:22\n\
    \  Expression: candidate(76, 67) == 42\n   Evaluated: 2 == 42\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpg71vd0fx.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg71vd0fx.jl:17\ntest set: Test Failed at /tmp/tmpg71vd0fx.jl:23\n\
    \  Expression: candidate(17, 27) == 49\n   Evaluated: 9 == 49\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpg71vd0fx.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg71vd0fx.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg71vd0fx.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkqqutml5.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmpkqqutml5.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkqqutml5.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkqqutml5.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return mod(a,10)*mod(b,10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl3_xga4j.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmpl3_xga4j.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl3_xga4j.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl3_xga4j.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpr6rif7rd.jl:21\\n  Expression: candidate(14,\
    \ -15) == 20\\n   Evaluated: -20 == 20\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpr6rif7rd.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpr6rif7rd.jl:17\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz47468t6.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmpz47468t6.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz47468t6.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz47468t6.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw4b8xfaf.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmpw4b8xfaf.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw4b8xfaf.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw4b8xfaf.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp56g2gk1d.jl:21\\n  Expression: candidate(14,\
    \ -15) == 20\\n   Evaluated: -20 == 20\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmp56g2gk1d.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp56g2gk1d.jl:17\\nTest Summary: | Pass  Fail \
    \ '"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpmxf_ov6g.jl:21\\n  Expression: candidate(14,\
    \ -15) == 20\\n   Evaluated: -20 == 20\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpmxf_ov6g.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpmxf_ov6g.jl:17\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdxmo_b8v.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmpdxmo_b8v.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdxmo_b8v.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdxmo_b8v.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa7gxv12h.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] top-level scope at /tmp/tmpa7gxv12h.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa7gxv12h.jl:17\ntest set: Test Failed at /tmp/tmpa7gxv12h.jl:19\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpa7gxv12h.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa7gxv12h.jl:17\ntest set: Test Failed at /tmp/tmpa7gxv12h.jl:21\n\
    \  Expression: candidate(14, -15) == 20\n   Evaluated: 0 == 20\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa7gxv12h.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa7gxv12h.jl:17\ntest set: Test Failed at /tmp/tmpa7gxv12h.jl:22\n\
    \  Expression: candidate(76, 67) == 42\n   Evaluated: 2 == 42\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpa7gxv12h.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa7gxv12h.jl:17\ntest set: Test Failed at /tmp/tmpa7gxv12h.jl:23\n\
    \  Expression: candidate(17, 27) == 49\n   Evaluated: 9 == 49\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpa7gxv12h.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa7gxv12h.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa7gxv12h.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10) * (b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpv47_ie4l.jl:21\\n  Expression: candidate(14,\
    \ -15) == 20\\n   Evaluated: -20 == 20\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpv47_ie4l.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv47_ie4l.jl:17\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    7     1      8\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10) * (b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg3u70ay6.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmpg3u70ay6.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpg3u70ay6.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg3u70ay6.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_gn5_cjk.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] top-level scope at /tmp/tmp_gn5_cjk.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_gn5_cjk.jl:17\ntest set: Test Failed at /tmp/tmp_gn5_cjk.jl:19\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_gn5_cjk.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_gn5_cjk.jl:17\ntest set: Test Failed at /tmp/tmp_gn5_cjk.jl:21\n\
    \  Expression: candidate(14, -15) == 20\n   Evaluated: 0 == 20\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_gn5_cjk.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_gn5_cjk.jl:17\ntest set: Test Failed at /tmp/tmp_gn5_cjk.jl:22\n\
    \  Expression: candidate(76, 67) == 42\n   Evaluated: 2 == 42\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_gn5_cjk.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_gn5_cjk.jl:17\ntest set: Test Failed at /tmp/tmp_gn5_cjk.jl:23\n\
    \  Expression: candidate(17, 27) == 49\n   Evaluated: 9 == 49\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_gn5_cjk.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_gn5_cjk.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_gn5_cjk.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb4q4mee2.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] top-level scope at /tmp/tmpb4q4mee2.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb4q4mee2.jl:17\ntest set: Test Failed at /tmp/tmpb4q4mee2.jl:19\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpb4q4mee2.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb4q4mee2.jl:17\ntest set: Test Failed at /tmp/tmpb4q4mee2.jl:21\n\
    \  Expression: candidate(14, -15) == 20\n   Evaluated: 0 == 20\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb4q4mee2.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb4q4mee2.jl:17\ntest set: Test Failed at /tmp/tmpb4q4mee2.jl:22\n\
    \  Expression: candidate(76, 67) == 42\n   Evaluated: 2 == 42\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpb4q4mee2.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb4q4mee2.jl:17\ntest set: Test Failed at /tmp/tmpb4q4mee2.jl:23\n\
    \  Expression: candidate(17, 27) == 49\n   Evaluated: 9 == 49\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpb4q4mee2.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpb4q4mee2.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb4q4mee2.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqugr3hl8.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] top-level scope at /tmp/tmpqugr3hl8.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqugr3hl8.jl:17\ntest set: Test Failed at /tmp/tmpqugr3hl8.jl:19\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpqugr3hl8.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqugr3hl8.jl:17\ntest set: Test Failed at /tmp/tmpqugr3hl8.jl:21\n\
    \  Expression: candidate(14, -15) == 20\n   Evaluated: 0 == 20\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqugr3hl8.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqugr3hl8.jl:17\ntest set: Test Failed at /tmp/tmpqugr3hl8.jl:22\n\
    \  Expression: candidate(76, 67) == 42\n   Evaluated: 2 == 42\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpqugr3hl8.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqugr3hl8.jl:17\ntest set: Test Failed at /tmp/tmpqugr3hl8.jl:23\n\
    \  Expression: candidate(17, 27) == 49\n   Evaluated: 9 == 49\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpqugr3hl8.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqugr3hl8.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqugr3hl8.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return mod(a,10)*mod(b,10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpyo2uifjj.jl:18\\n  Expression: candidate(148,\
    \ 412) == 16\\n   Evaluated: 6 == 16\\nStacktrace:\\n [1] top-level scope at /tmp/tmpyo2uifjj.jl:18\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyo2uifjj.jl:17\\ntest set: Test Failed at /tmp/tmpyo2uifjj.jl:19\\\
    n  Expression: candidate(19, 28) == 72\\n   Evaluated: 2 == 72\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpyo2uifjj.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyo2uifjj.jl:17\\ntest set: Test Failed at /tmp/tmpyo2uifjj.jl:21\\\
    n  Expression: candidate(14, -15) == 20\\n   Evaluated: 0 == 20\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpyo2uifjj.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyo2uifjj.jl:17\\ntest set: Test Failed at /tmp/tmpyo2uifjj.jl:22\\\
    n  Expression: candidate(76, 67) == 42\\n   Evaluated: 2 == 42\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpyo2uifjj.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyo2uifjj.jl:17\\ntest set: Test Failed at /tmp/tmpyo2uifjj.jl:23\\\
    n  Expression: candidate(17, 27) == 49\\n   Evaluated: 9 == 49\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpyo2uifjj.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyo2uifjj.jl:17\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    3     5      8\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpwp_ntsd8.jl:18\\n  Expression: candidate(148,\
    \ 412) == 16\\n   Evaluated: 6 == 16\\nStacktrace:\\n [1] top-level scope at /tmp/tmpwp_ntsd8.jl:18\\\
    n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwp_ntsd8.jl:17\\ntest set: Test Failed at /tmp/tmpwp_ntsd8.jl:19\\\
    n  Expression: candidate(19, 28) == 72\\n   Evaluated: 2 == 72\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpwp_ntsd8.jl:19\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwp_ntsd8.jl:17\\ntest set: Test Failed at /tmp/tmpwp_ntsd8.jl:21\\\
    n  Expression: candidate(14, -15) == 20\\n   Evaluated: 0 == 20\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpwp_ntsd8.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwp_ntsd8.jl:17\\ntest set: Test Failed at /tmp/tmpwp_ntsd8.jl:22\\\
    n  Expression: candidate(76, 67) == 42\\n   Evaluated: 2 == 42\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpwp_ntsd8.jl:22\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwp_ntsd8.jl:17\\ntest set: Test Failed at /tmp/tmpwp_ntsd8.jl:23\\\
    n  Expression: candidate(17, 27) == 49\\n   Evaluated: 9 == 49\\nStacktrace:\\\
    n [1] top-level scope at /tmp/tmpwp_ntsd8.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpwp_ntsd8.jl:17\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt7ujaa6m.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] top-level scope at /tmp/tmpt7ujaa6m.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt7ujaa6m.jl:17\ntest set: Test Failed at /tmp/tmpt7ujaa6m.jl:19\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpt7ujaa6m.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt7ujaa6m.jl:17\ntest set: Test Failed at /tmp/tmpt7ujaa6m.jl:21\n\
    \  Expression: candidate(14, -15) == 20\n   Evaluated: 0 == 20\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt7ujaa6m.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt7ujaa6m.jl:17\ntest set: Test Failed at /tmp/tmpt7ujaa6m.jl:22\n\
    \  Expression: candidate(76, 67) == 42\n   Evaluated: 2 == 42\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpt7ujaa6m.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt7ujaa6m.jl:17\ntest set: Test Failed at /tmp/tmpt7ujaa6m.jl:23\n\
    \  Expression: candidate(17, 27) == 49\n   Evaluated: 9 == 49\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpt7ujaa6m.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt7ujaa6m.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt7ujaa6m.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a_unit = a % 10\n    b_unit = b % 10\n    return a_unit * b_unit\nend\n\
    using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
    \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851)\
    \ == 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\
    \t@test(candidate(17, 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0,\
    \ 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpyvhx6uo9.jl:23\\n  Expression: candidate(14,\
    \ -15) == 20\\n   Evaluated: -20 == 20\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpyvhx6uo9.jl:23\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpyvhx6uo9.jl:19\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return mod(a,10)*mod(b,10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmpv6i02hvg.jl:21\\n  Expression: candidate(14,\
    \ -15) == 20\\n   Evaluated: -20 == 20\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmpv6i02hvg.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmpv6i02hvg.jl:17\\n'"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmplqz17q05.jl:21\\n  Expression: candidate(14,\
    \ -15) == 20\\n   Evaluated: -20 == 20\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmplqz17q05.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmplqz17q05.jl:17\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    7     1      8\\n'"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0olait13.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmp0olait13.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0olait13.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0olait13.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiusro309.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmpiusro309.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiusro309.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiusro309.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp301r_qqz.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmp301r_qqz.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp301r_qqz.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp301r_qqz.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "b'test set: Test Failed at /tmp/tmp_4o5nnl6.jl:21\\n  Expression: candidate(14,\
    \ -15) == 20\\n   Evaluated: -20 == 20\\nStacktrace:\\n [1] top-level scope at\
    \ /tmp/tmp_4o5nnl6.jl:21\\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\\\
    n [3] top-level scope at /tmp/tmp_4o5nnl6.jl:17\\nTest Summary: | Pass  Fail \
    \ Total\\ntest set      |    7     1      8\\n'"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return mod(a,10)*mod(b,10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return mod(a,10)*mod(b,10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return abs(a)%10 * abs(b)%10\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmzuj2drg.jl:18\n  Expression: candidate(148,\
    \ 412) == 16\n   Evaluated: 6 == 16\nStacktrace:\n [1] top-level scope at /tmp/tmpmzuj2drg.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmzuj2drg.jl:17\ntest set: Test Failed at /tmp/tmpmzuj2drg.jl:19\n\
    \  Expression: candidate(19, 28) == 72\n   Evaluated: 2 == 72\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmzuj2drg.jl:19\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmzuj2drg.jl:17\ntest set: Test Failed at /tmp/tmpmzuj2drg.jl:21\n\
    \  Expression: candidate(14, -15) == 20\n   Evaluated: 0 == 20\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmzuj2drg.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmzuj2drg.jl:17\ntest set: Test Failed at /tmp/tmpmzuj2drg.jl:22\n\
    \  Expression: candidate(76, 67) == 42\n   Evaluated: 2 == 42\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmzuj2drg.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmzuj2drg.jl:17\ntest set: Test Failed at /tmp/tmpmzuj2drg.jl:23\n\
    \  Expression: candidate(17, 27) == 49\n   Evaluated: 9 == 49\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpmzuj2drg.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmzuj2drg.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     5      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmzuj2drg.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph4er_gih.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmph4er_gih.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph4er_gih.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph4er_gih.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl6suzf56.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmpl6suzf56.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl6suzf56.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl6suzf56.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a%10)*(b%10)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm45zklgy.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmpm45zklgy.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm45zklgy.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm45zklgy.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a%10)*(b%10)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412) == 16)\n\
    \t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14,\
    \ -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) ==\
    \ 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    return (a % 10) * (b % 10)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = multiply;\n\t@test(candidate(148, 412) == 16)\n\t@test(candidate(19, 28) ==\
    \ 72)\n\t@test(candidate(2020, 1851) == 0)\n\t@test(candidate(14, -15) == 20)\n\
    \t@test(candidate(76, 67) == 42)\n\t@test(candidate(17, 27) == 49)\n\t@test(candidate(0,\
    \ 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgqp3fu_2.jl:21\n  Expression: candidate(14,\
    \ -15) == 20\n   Evaluated: -20 == 20\nStacktrace:\n [1] top-level scope at /tmp/tmpgqp3fu_2.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgqp3fu_2.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    7     1      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 1 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgqp3fu_2.jl:15\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Complete the function that takes two integers and returns \n   \
    \ the product of their unit digits.\n    Assume the input is always valid.\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64\
    \ \n    a = abs(a)\n    b = abs(b)\n    return (a % 10) * (b % 10)\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148, 412)\
    \ == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) == 0)\n\
    \t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
    \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    8      8\n"
  exit_code: 0
  status: OK
