name: HumanEval_67_fruit_distribution
language: julia
results:
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvswxyngg.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpvswxyngg.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpvswxyngg.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvswxyngg.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpvswxyngg.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpvswxyngg.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpvswxyngg.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvswxyngg.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpvswxyngg.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph7wnfse6.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmph7wnfse6.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmph7wnfse6.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph7wnfse6.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmph7wnfse6.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmph7wnfse6.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmph7wnfse6.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph7wnfse6.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmph7wnfse6.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy5vvdkb1.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpy5vvdkb1.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5vvdkb1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy5vvdkb1.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy5vvdkb1.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5vvdkb1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy5vvdkb1.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy5vvdkb1.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5vvdkb1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy5vvdkb1.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy5vvdkb1.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5vvdkb1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy5vvdkb1.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy5vvdkb1.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy5vvdkb1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpy5vvdkb1.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy5vvdkb1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp62hq421n.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp62hq421n.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp62hq421n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp62hq421n.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp62hq421n.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp62hq421n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp62hq421n.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp62hq421n.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp62hq421n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp62hq421n.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp62hq421n.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp62hq421n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp62hq421n.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp62hq421n.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp62hq421n.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp62hq421n.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp62hq421n.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp09lf4568.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp09lf4568.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp09lf4568.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp09lf4568.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp09lf4568.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp09lf4568.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp09lf4568.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp09lf4568.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp09lf4568.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqvs5w80f.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpqvs5w80f.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpqvs5w80f.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqvs5w80f.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqvs5w80f.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpqvs5w80f.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpqvs5w80f.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqvs5w80f.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqvs5w80f.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_a1o6prw.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_a1o6prw.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a1o6prw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_a1o6prw.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a1o6prw.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a1o6prw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_a1o6prw.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a1o6prw.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a1o6prw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_a1o6prw.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a1o6prw.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a1o6prw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_a1o6prw.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a1o6prw.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a1o6prw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_a1o6prw.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_a1o6prw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsx3rx7y1.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpsx3rx7y1.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpsx3rx7y1.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsx3rx7y1.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpsx3rx7y1.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpsx3rx7y1.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpsx3rx7y1.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsx3rx7y1.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpsx3rx7y1.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpldmncvn5.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpldmncvn5.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpldmncvn5.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpldmncvn5.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpldmncvn5.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpldmncvn5.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpldmncvn5.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpldmncvn5.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpldmncvn5.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4h0baiky.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp4h0baiky.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp4h0baiky.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4h0baiky.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4h0baiky.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp4h0baiky.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp4h0baiky.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4h0baiky.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4h0baiky.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7zapmwo9.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp7zapmwo9.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7zapmwo9.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7zapmwo9.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7zapmwo9.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp7zapmwo9.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp7zapmwo9.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7zapmwo9.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7zapmwo9.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp93shdgzc.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp93shdgzc.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93shdgzc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp93shdgzc.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93shdgzc.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93shdgzc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp93shdgzc.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93shdgzc.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93shdgzc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp93shdgzc.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93shdgzc.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93shdgzc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp93shdgzc.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93shdgzc.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93shdgzc.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp93shdgzc.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp93shdgzc.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfyta7qj4.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpfyta7qj4.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpfyta7qj4.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfyta7qj4.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfyta7qj4.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpfyta7qj4.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpfyta7qj4.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfyta7qj4.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfyta7qj4.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp_u4tpif.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpp_u4tpif.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_u4tpif.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp_u4tpif.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp_u4tpif.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_u4tpif.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp_u4tpif.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp_u4tpif.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_u4tpif.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp_u4tpif.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp_u4tpif.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_u4tpif.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp_u4tpif.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp_u4tpif.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_u4tpif.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp_u4tpif.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp_u4tpif.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnwfdl0zs.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnwfdl0zs.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnwfdl0zs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnwfdl0zs.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnwfdl0zs.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnwfdl0zs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnwfdl0zs.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnwfdl0zs.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnwfdl0zs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnwfdl0zs.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnwfdl0zs.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnwfdl0zs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnwfdl0zs.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnwfdl0zs.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnwfdl0zs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnwfdl0zs.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnwfdl0zs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code goes here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples\
    \ and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21)\
    \ == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
    1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplgbipfkp.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmplgbipfkp.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplgbipfkp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplgbipfkp.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplgbipfkp.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplgbipfkp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplgbipfkp.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplgbipfkp.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplgbipfkp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplgbipfkp.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplgbipfkp.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplgbipfkp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplgbipfkp.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplgbipfkp.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplgbipfkp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplgbipfkp.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplgbipfkp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9kfv2s5j.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp9kfv2s5j.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp9kfv2s5j.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9kfv2s5j.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp9kfv2s5j.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp9kfv2s5j.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp9kfv2s5j.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9kfv2s5j.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp9kfv2s5j.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2jsg5f1d.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2jsg5f1d.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2jsg5f1d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2jsg5f1d.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2jsg5f1d.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2jsg5f1d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2jsg5f1d.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2jsg5f1d.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2jsg5f1d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2jsg5f1d.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2jsg5f1d.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2jsg5f1d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2jsg5f1d.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2jsg5f1d.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2jsg5f1d.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2jsg5f1d.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2jsg5f1d.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpolzhcd1n.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpolzhcd1n.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpolzhcd1n.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpolzhcd1n.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpolzhcd1n.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpolzhcd1n.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpolzhcd1n.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpolzhcd1n.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpolzhcd1n.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7bw_dada.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp7bw_dada.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7bw_dada.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7bw_dada.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7bw_dada.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp7bw_dada.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp7bw_dada.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7bw_dada.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7bw_dada.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph420lfo8.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmph420lfo8.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph420lfo8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph420lfo8.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph420lfo8.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph420lfo8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph420lfo8.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph420lfo8.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph420lfo8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph420lfo8.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph420lfo8.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph420lfo8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph420lfo8.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph420lfo8.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph420lfo8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph420lfo8.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph420lfo8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpol1ai3ni.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpol1ai3ni.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpol1ai3ni.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpol1ai3ni.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpol1ai3ni.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpol1ai3ni.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpol1ai3ni.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpol1ai3ni.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpol1ai3ni.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoau8u1is.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpoau8u1is.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpoau8u1is.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoau8u1is.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpoau8u1is.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpoau8u1is.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpoau8u1is.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoau8u1is.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpoau8u1is.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1pmjczwd.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp1pmjczwd.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp1pmjczwd.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1pmjczwd.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp1pmjczwd.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp1pmjczwd.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp1pmjczwd.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1pmjczwd.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp1pmjczwd.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp53pjwug2.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp53pjwug2.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp53pjwug2.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp53pjwug2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp53pjwug2.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp53pjwug2.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp53pjwug2.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp53pjwug2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp53pjwug2.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzjrdtkqn.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzjrdtkqn.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzjrdtkqn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzjrdtkqn.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzjrdtkqn.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzjrdtkqn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzjrdtkqn.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzjrdtkqn.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzjrdtkqn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzjrdtkqn.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzjrdtkqn.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzjrdtkqn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzjrdtkqn.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzjrdtkqn.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzjrdtkqn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzjrdtkqn.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzjrdtkqn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo3gdilxd.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpo3gdilxd.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpo3gdilxd.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo3gdilxd.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpo3gdilxd.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpo3gdilxd.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpo3gdilxd.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo3gdilxd.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpo3gdilxd.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl4gfcl1w.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpl4gfcl1w.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl4gfcl1w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl4gfcl1w.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl4gfcl1w.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl4gfcl1w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl4gfcl1w.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl4gfcl1w.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl4gfcl1w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl4gfcl1w.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl4gfcl1w.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl4gfcl1w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl4gfcl1w.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl4gfcl1w.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl4gfcl1w.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl4gfcl1w.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl4gfcl1w.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp56nrgtwj.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp56nrgtwj.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp56nrgtwj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp56nrgtwj.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp56nrgtwj.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp56nrgtwj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp56nrgtwj.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp56nrgtwj.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp56nrgtwj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp56nrgtwj.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp56nrgtwj.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp56nrgtwj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp56nrgtwj.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp56nrgtwj.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp56nrgtwj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp56nrgtwj.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp56nrgtwj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpsy7y11by.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpsy7y11by.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpsy7y11by.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsy7y11by.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpsy7y11by.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpsy7y11by.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpsy7y11by.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpsy7y11by.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpsy7y11by.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplne4d2w6.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmplne4d2w6.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmplne4d2w6.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplne4d2w6.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmplne4d2w6.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmplne4d2w6.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmplne4d2w6.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplne4d2w6.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmplne4d2w6.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph24tk_1e.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmph24tk_1e.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph24tk_1e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph24tk_1e.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph24tk_1e.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph24tk_1e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph24tk_1e.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph24tk_1e.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph24tk_1e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph24tk_1e.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph24tk_1e.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph24tk_1e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph24tk_1e.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph24tk_1e.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph24tk_1e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph24tk_1e.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph24tk_1e.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi6in_8rk.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpi6in_8rk.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpi6in_8rk.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi6in_8rk.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpi6in_8rk.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpi6in_8rk.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpi6in_8rk.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi6in_8rk.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpi6in_8rk.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl97sc1_b.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpl97sc1_b.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl97sc1_b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl97sc1_b.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl97sc1_b.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl97sc1_b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl97sc1_b.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl97sc1_b.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl97sc1_b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl97sc1_b.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl97sc1_b.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl97sc1_b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl97sc1_b.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl97sc1_b.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl97sc1_b.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl97sc1_b.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl97sc1_b.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkge787eh.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpkge787eh.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkge787eh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkge787eh.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkge787eh.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkge787eh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkge787eh.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkge787eh.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkge787eh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkge787eh.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkge787eh.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkge787eh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkge787eh.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkge787eh.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkge787eh.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpkge787eh.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkge787eh.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0uish0ui.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp0uish0ui.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp0uish0ui.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0uish0ui.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp0uish0ui.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp0uish0ui.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp0uish0ui.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0uish0ui.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp0uish0ui.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnwzacd1l.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpnwzacd1l.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpnwzacd1l.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnwzacd1l.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpnwzacd1l.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpnwzacd1l.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpnwzacd1l.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnwzacd1l.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpnwzacd1l.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqfe41aec.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqfe41aec.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfe41aec.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfe41aec.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqfe41aec.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfe41aec.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfe41aec.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqfe41aec.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfe41aec.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfe41aec.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqfe41aec.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfe41aec.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfe41aec.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqfe41aec.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqfe41aec.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqfe41aec.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqfe41aec.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplv0a6j08.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmplv0a6j08.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmplv0a6j08.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplv0a6j08.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmplv0a6j08.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmplv0a6j08.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmplv0a6j08.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplv0a6j08.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmplv0a6j08.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpph5sz4z_.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpph5sz4z_.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpph5sz4z_.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpph5sz4z_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpph5sz4z_.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpph5sz4z_.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpph5sz4z_.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpph5sz4z_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpph5sz4z_.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptt4bi4wg.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmptt4bi4wg.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmptt4bi4wg.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptt4bi4wg.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmptt4bi4wg.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmptt4bi4wg.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmptt4bi4wg.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptt4bi4wg.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmptt4bi4wg.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_h79j_2m.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp_h79j_2m.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp_h79j_2m.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_h79j_2m.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_h79j_2m.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp_h79j_2m.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp_h79j_2m.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_h79j_2m.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_h79j_2m.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfkv29k77.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpfkv29k77.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfkv29k77.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfkv29k77.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfkv29k77.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfkv29k77.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfkv29k77.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfkv29k77.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfkv29k77.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfkv29k77.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfkv29k77.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfkv29k77.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfkv29k77.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfkv29k77.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfkv29k77.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpfkv29k77.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfkv29k77.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjc1iguqu.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjc1iguqu.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc1iguqu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjc1iguqu.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjc1iguqu.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc1iguqu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjc1iguqu.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjc1iguqu.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc1iguqu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjc1iguqu.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjc1iguqu.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc1iguqu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjc1iguqu.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjc1iguqu.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjc1iguqu.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjc1iguqu.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjc1iguqu.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb9h7c5ip.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpb9h7c5ip.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb9h7c5ip.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb9h7c5ip.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb9h7c5ip.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb9h7c5ip.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb9h7c5ip.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb9h7c5ip.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb9h7c5ip.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb9h7c5ip.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb9h7c5ip.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb9h7c5ip.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb9h7c5ip.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb9h7c5ip.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb9h7c5ip.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpb9h7c5ip.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb9h7c5ip.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwub1aa4g.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpwub1aa4g.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpwub1aa4g.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwub1aa4g.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpwub1aa4g.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpwub1aa4g.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpwub1aa4g.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwub1aa4g.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpwub1aa4g.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2qi2eb0u.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp2qi2eb0u.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp2qi2eb0u.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2qi2eb0u.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp2qi2eb0u.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp2qi2eb0u.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp2qi2eb0u.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2qi2eb0u.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp2qi2eb0u.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdocrwct9.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpdocrwct9.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpdocrwct9.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdocrwct9.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpdocrwct9.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpdocrwct9.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpdocrwct9.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdocrwct9.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpdocrwct9.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6wk2vyft.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp6wk2vyft.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp6wk2vyft.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6wk2vyft.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp6wk2vyft.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp6wk2vyft.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp6wk2vyft.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6wk2vyft.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp6wk2vyft.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_03j9e2i.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp_03j9e2i.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp_03j9e2i.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_03j9e2i.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_03j9e2i.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp_03j9e2i.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp_03j9e2i.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_03j9e2i.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_03j9e2i.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphz7qw9we.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmphz7qw9we.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmphz7qw9we.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphz7qw9we.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmphz7qw9we.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmphz7qw9we.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmphz7qw9we.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphz7qw9we.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmphz7qw9we.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8uj41i_e.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp8uj41i_e.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8uj41i_e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8uj41i_e.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8uj41i_e.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8uj41i_e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8uj41i_e.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8uj41i_e.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8uj41i_e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8uj41i_e.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8uj41i_e.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8uj41i_e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8uj41i_e.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8uj41i_e.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8uj41i_e.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp8uj41i_e.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8uj41i_e.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl0qfvn0d.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpl0qfvn0d.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpl0qfvn0d.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl0qfvn0d.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpl0qfvn0d.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpl0qfvn0d.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpl0qfvn0d.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpl0qfvn0d.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpl0qfvn0d.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp591z_nso.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp591z_nso.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp591z_nso.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp591z_nso.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp591z_nso.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp591z_nso.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp591z_nso.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp591z_nso.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp591z_nso.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfbj1gtvd.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpfbj1gtvd.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpfbj1gtvd.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfbj1gtvd.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfbj1gtvd.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpfbj1gtvd.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpfbj1gtvd.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfbj1gtvd.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfbj1gtvd.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmfhmzhp2.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpmfhmzhp2.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpmfhmzhp2.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmfhmzhp2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpmfhmzhp2.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpmfhmzhp2.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpmfhmzhp2.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmfhmzhp2.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpmfhmzhp2.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_3l5gu72.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp_3l5gu72.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp_3l5gu72.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_3l5gu72.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_3l5gu72.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp_3l5gu72.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp_3l5gu72.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_3l5gu72.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_3l5gu72.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbt93nj13.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbt93nj13.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbt93nj13.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbt93nj13.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbt93nj13.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbt93nj13.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbt93nj13.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbt93nj13.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbt93nj13.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbt93nj13.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbt93nj13.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbt93nj13.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbt93nj13.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbt93nj13.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbt93nj13.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbt93nj13.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbt93nj13.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmrkk3s2i.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmrkk3s2i.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmrkk3s2i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmrkk3s2i.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmrkk3s2i.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmrkk3s2i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmrkk3s2i.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmrkk3s2i.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmrkk3s2i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmrkk3s2i.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmrkk3s2i.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmrkk3s2i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmrkk3s2i.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmrkk3s2i.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmrkk3s2i.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmrkk3s2i.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmrkk3s2i.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5yfeqvbm.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp5yfeqvbm.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp5yfeqvbm.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5yfeqvbm.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp5yfeqvbm.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp5yfeqvbm.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp5yfeqvbm.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5yfeqvbm.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp5yfeqvbm.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpge3z_fum.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpge3z_fum.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpge3z_fum.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpge3z_fum.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpge3z_fum.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpge3z_fum.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpge3z_fum.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpge3z_fum.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpge3z_fum.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdrbrdgom.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpdrbrdgom.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdrbrdgom.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdrbrdgom.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdrbrdgom.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdrbrdgom.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdrbrdgom.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdrbrdgom.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdrbrdgom.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdrbrdgom.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdrbrdgom.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdrbrdgom.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdrbrdgom.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdrbrdgom.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdrbrdgom.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpdrbrdgom.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdrbrdgom.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmprbzundsb.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmprbzundsb.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmprbzundsb.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprbzundsb.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmprbzundsb.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmprbzundsb.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmprbzundsb.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmprbzundsb.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmprbzundsb.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_hzdvp8m.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_hzdvp8m.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hzdvp8m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_hzdvp8m.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_hzdvp8m.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hzdvp8m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_hzdvp8m.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_hzdvp8m.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hzdvp8m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_hzdvp8m.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_hzdvp8m.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hzdvp8m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_hzdvp8m.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_hzdvp8m.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_hzdvp8m.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_hzdvp8m.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_hzdvp8m.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg37rsuvd.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpg37rsuvd.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg37rsuvd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg37rsuvd.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg37rsuvd.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg37rsuvd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg37rsuvd.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg37rsuvd.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg37rsuvd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg37rsuvd.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg37rsuvd.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg37rsuvd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg37rsuvd.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg37rsuvd.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg37rsuvd.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpg37rsuvd.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg37rsuvd.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    apples = parse(Int64, split(s, \" \")[1])\n    oranges\
    \ = parse(Int64, split(s, \" \")[4])\n    return n - apples - oranges\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"\
    5 apples and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 21) == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
    1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl8m4llet.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpl8m4llet.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8m4llet.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl8m4llet.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl8m4llet.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8m4llet.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl8m4llet.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl8m4llet.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8m4llet.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl8m4llet.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl8m4llet.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8m4llet.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl8m4llet.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl8m4llet.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl8m4llet.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpl8m4llet.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl8m4llet.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmvo3zv31.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpmvo3zv31.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvo3zv31.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmvo3zv31.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmvo3zv31.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvo3zv31.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmvo3zv31.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmvo3zv31.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvo3zv31.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmvo3zv31.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmvo3zv31.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvo3zv31.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmvo3zv31.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmvo3zv31.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmvo3zv31.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpmvo3zv31.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmvo3zv31.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpenumugo4.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpenumugo4.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpenumugo4.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpenumugo4.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpenumugo4.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpenumugo4.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpenumugo4.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpenumugo4.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpenumugo4.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpqfyedp09.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpqfyedp09.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpqfyedp09.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqfyedp09.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqfyedp09.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpqfyedp09.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpqfyedp09.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpqfyedp09.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpqfyedp09.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6pk_90wn.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6pk_90wn.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6pk_90wn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6pk_90wn.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6pk_90wn.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6pk_90wn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6pk_90wn.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6pk_90wn.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6pk_90wn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6pk_90wn.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6pk_90wn.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6pk_90wn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6pk_90wn.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6pk_90wn.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6pk_90wn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6pk_90wn.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6pk_90wn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps5b7eo1s.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmps5b7eo1s.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmps5b7eo1s.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmps5b7eo1s.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmps5b7eo1s.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmps5b7eo1s.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmps5b7eo1s.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmps5b7eo1s.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmps5b7eo1s.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3majy6yx.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp3majy6yx.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3majy6yx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3majy6yx.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3majy6yx.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3majy6yx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3majy6yx.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3majy6yx.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3majy6yx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3majy6yx.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3majy6yx.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3majy6yx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3majy6yx.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3majy6yx.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3majy6yx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp3majy6yx.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3majy6yx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzin22fb7.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzin22fb7.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzin22fb7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzin22fb7.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzin22fb7.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzin22fb7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzin22fb7.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzin22fb7.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzin22fb7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzin22fb7.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzin22fb7.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzin22fb7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzin22fb7.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzin22fb7.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzin22fb7.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzin22fb7.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzin22fb7.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code goes here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples\
    \ and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21)\
    \ == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
    1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbfx1dnnj.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbfx1dnnj.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbfx1dnnj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbfx1dnnj.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbfx1dnnj.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbfx1dnnj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbfx1dnnj.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbfx1dnnj.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbfx1dnnj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbfx1dnnj.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbfx1dnnj.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbfx1dnnj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbfx1dnnj.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbfx1dnnj.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbfx1dnnj.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbfx1dnnj.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbfx1dnnj.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_gbucfkw.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_gbucfkw.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gbucfkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_gbucfkw.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gbucfkw.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gbucfkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_gbucfkw.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gbucfkw.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gbucfkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_gbucfkw.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gbucfkw.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gbucfkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_gbucfkw.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gbucfkw.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gbucfkw.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_gbucfkw.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_gbucfkw.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf4p449me.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpf4p449me.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf4p449me.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpf4p449me.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf4p449me.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf4p449me.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpf4p449me.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf4p449me.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf4p449me.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpf4p449me.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf4p449me.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf4p449me.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpf4p449me.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf4p449me.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf4p449me.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpf4p449me.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf4p449me.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgv8l8s1v.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpgv8l8s1v.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpgv8l8s1v.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgv8l8s1v.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpgv8l8s1v.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpgv8l8s1v.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpgv8l8s1v.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgv8l8s1v.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpgv8l8s1v.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptg11z0m0.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\n\
    \    ...\n  Stacktrace:\n   [1] fruit_distribution(s::String, n::Int64)\n    \
    \ @ Main /tmp/tmptg11z0m0.jl:15\n   [2] macro expansion\n     @ /tmp/tmptg11z0m0.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptg11z0m0.jl:20\ntest set:\
    \ Error During Test at /tmp/tmptg11z0m0.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n    ...\n  Stacktrace:\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmptg11z0m0.jl:15\n   [2] macro expansion\n    \
    \ @ /tmp/tmptg11z0m0.jl:22 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmptg11z0m0.jl:20\ntest set:\
    \ Error During Test at /tmp/tmptg11z0m0.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptg11z0m0.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb5hqi0qa.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpb5hqi0qa.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpb5hqi0qa.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb5hqi0qa.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpb5hqi0qa.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpb5hqi0qa.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpb5hqi0qa.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb5hqi0qa.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpb5hqi0qa.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpevuc85p3.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpevuc85p3.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpevuc85p3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpevuc85p3.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpevuc85p3.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpevuc85p3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpevuc85p3.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpevuc85p3.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpevuc85p3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpevuc85p3.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpevuc85p3.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpevuc85p3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpevuc85p3.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpevuc85p3.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpevuc85p3.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpevuc85p3.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpevuc85p3.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplej5uddi.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmplej5uddi.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmplej5uddi.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplej5uddi.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmplej5uddi.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmplej5uddi.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmplej5uddi.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplej5uddi.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmplej5uddi.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    #your code here\nend\nusing Test\n\n@testset begin\n\n\
    candidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpp65a44ik.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpp65a44ik.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpp65a44ik.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp65a44ik.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpp65a44ik.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpp65a44ik.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpp65a44ik.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpp65a44ik.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpp65a44ik.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg_my06mp.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpg_my06mp.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpg_my06mp.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg_my06mp.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpg_my06mp.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpg_my06mp.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpg_my06mp.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg_my06mp.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpg_my06mp.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpncxjev4h.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpncxjev4h.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpncxjev4h.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpncxjev4h.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpncxjev4h.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpncxjev4h.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpncxjev4h.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpncxjev4h.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpncxjev4h.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9r544z1k.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp9r544z1k.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp9r544z1k.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9r544z1k.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp9r544z1k.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp9r544z1k.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp9r544z1k.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9r544z1k.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp9r544z1k.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfrwpzd9l.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpfrwpzd9l.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpfrwpzd9l.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfrwpzd9l.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfrwpzd9l.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpfrwpzd9l.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpfrwpzd9l.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfrwpzd9l.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfrwpzd9l.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp18cdw9lx.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp18cdw9lx.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp18cdw9lx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp18cdw9lx.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp18cdw9lx.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp18cdw9lx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp18cdw9lx.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp18cdw9lx.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp18cdw9lx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp18cdw9lx.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp18cdw9lx.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp18cdw9lx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp18cdw9lx.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp18cdw9lx.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp18cdw9lx.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp18cdw9lx.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp18cdw9lx.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy3yxj_5p.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpy3yxj_5p.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpy3yxj_5p.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy3yxj_5p.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpy3yxj_5p.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpy3yxj_5p.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpy3yxj_5p.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy3yxj_5p.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpy3yxj_5p.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3o3yyxd8.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp3o3yyxd8.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp3o3yyxd8.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3o3yyxd8.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp3o3yyxd8.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp3o3yyxd8.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp3o3yyxd8.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3o3yyxd8.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp3o3yyxd8.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjsrf5_un.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjsrf5_un.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsrf5_un.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjsrf5_un.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjsrf5_un.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsrf5_un.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjsrf5_un.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjsrf5_un.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsrf5_un.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjsrf5_un.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjsrf5_un.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsrf5_un.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjsrf5_un.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjsrf5_un.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjsrf5_un.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjsrf5_un.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjsrf5_un.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp69c1jvad.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp69c1jvad.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp69c1jvad.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp69c1jvad.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp69c1jvad.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp69c1jvad.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp69c1jvad.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp69c1jvad.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp69c1jvad.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2ol6l8xy.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2ol6l8xy.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ol6l8xy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2ol6l8xy.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2ol6l8xy.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ol6l8xy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2ol6l8xy.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2ol6l8xy.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ol6l8xy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2ol6l8xy.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2ol6l8xy.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ol6l8xy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2ol6l8xy.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2ol6l8xy.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2ol6l8xy.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2ol6l8xy.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2ol6l8xy.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpedkv3y9a.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpedkv3y9a.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpedkv3y9a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpedkv3y9a.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpedkv3y9a.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpedkv3y9a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpedkv3y9a.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpedkv3y9a.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpedkv3y9a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpedkv3y9a.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpedkv3y9a.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpedkv3y9a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpedkv3y9a.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpedkv3y9a.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpedkv3y9a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpedkv3y9a.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpedkv3y9a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7i2oupk5.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp7i2oupk5.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7i2oupk5.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7i2oupk5.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7i2oupk5.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp7i2oupk5.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp7i2oupk5.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7i2oupk5.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7i2oupk5.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6d95nutz.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp6d95nutz.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp6d95nutz.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6d95nutz.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp6d95nutz.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp6d95nutz.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp6d95nutz.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6d95nutz.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp6d95nutz.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpttavodki.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpttavodki.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpttavodki.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpttavodki.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpttavodki.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpttavodki.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpttavodki.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpttavodki.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpttavodki.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpttavodki.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpttavodki.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpttavodki.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpttavodki.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpttavodki.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpttavodki.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpttavodki.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpttavodki.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_5_j3snc.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp_5_j3snc.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp_5_j3snc.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_5_j3snc.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_5_j3snc.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp_5_j3snc.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp_5_j3snc.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_5_j3snc.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_5_j3snc.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy8wzcc2t.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpy8wzcc2t.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpy8wzcc2t.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy8wzcc2t.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpy8wzcc2t.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpy8wzcc2t.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpy8wzcc2t.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy8wzcc2t.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpy8wzcc2t.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfejstrms.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpfejstrms.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpfejstrms.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfejstrms.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfejstrms.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpfejstrms.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpfejstrms.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfejstrms.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfejstrms.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp58_th2jn.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp58_th2jn.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58_th2jn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp58_th2jn.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp58_th2jn.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58_th2jn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp58_th2jn.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp58_th2jn.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58_th2jn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp58_th2jn.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp58_th2jn.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58_th2jn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp58_th2jn.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp58_th2jn.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp58_th2jn.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp58_th2jn.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp58_th2jn.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2vvwwnnp.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp2vvwwnnp.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2vvwwnnp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2vvwwnnp.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2vvwwnnp.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2vvwwnnp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2vvwwnnp.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2vvwwnnp.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2vvwwnnp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2vvwwnnp.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2vvwwnnp.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2vvwwnnp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2vvwwnnp.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2vvwwnnp.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2vvwwnnp.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp2vvwwnnp.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2vvwwnnp.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzb45rruk.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpzb45rruk.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpzb45rruk.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzb45rruk.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpzb45rruk.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpzb45rruk.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpzb45rruk.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzb45rruk.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpzb45rruk.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp23ji72on.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp23ji72on.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp23ji72on.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp23ji72on.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp23ji72on.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp23ji72on.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp23ji72on.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp23ji72on.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp23ji72on.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5hmi8m8r.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp5hmi8m8r.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp5hmi8m8r.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5hmi8m8r.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp5hmi8m8r.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp5hmi8m8r.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp5hmi8m8r.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5hmi8m8r.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp5hmi8m8r.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkm1noldu.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpkm1noldu.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpkm1noldu.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkm1noldu.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpkm1noldu.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpkm1noldu.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpkm1noldu.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkm1noldu.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpkm1noldu.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjvmbj5ty.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpjvmbj5ty.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvmbj5ty.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjvmbj5ty.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjvmbj5ty.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvmbj5ty.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjvmbj5ty.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjvmbj5ty.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvmbj5ty.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjvmbj5ty.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjvmbj5ty.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvmbj5ty.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjvmbj5ty.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpjvmbj5ty.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjvmbj5ty.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpjvmbj5ty.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjvmbj5ty.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5rsd6li4.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp5rsd6li4.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5rsd6li4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5rsd6li4.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5rsd6li4.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5rsd6li4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5rsd6li4.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5rsd6li4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5rsd6li4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5rsd6li4.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5rsd6li4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5rsd6li4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5rsd6li4.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5rsd6li4.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5rsd6li4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp5rsd6li4.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5rsd6li4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqc0zm3h8.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpqc0zm3h8.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqc0zm3h8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqc0zm3h8.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqc0zm3h8.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqc0zm3h8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqc0zm3h8.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqc0zm3h8.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqc0zm3h8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqc0zm3h8.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqc0zm3h8.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqc0zm3h8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqc0zm3h8.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqc0zm3h8.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqc0zm3h8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpqc0zm3h8.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqc0zm3h8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwksn_06z.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpwksn_06z.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpwksn_06z.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwksn_06z.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpwksn_06z.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpwksn_06z.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpwksn_06z.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwksn_06z.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpwksn_06z.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpczycnscl.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpczycnscl.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpczycnscl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpczycnscl.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpczycnscl.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpczycnscl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpczycnscl.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpczycnscl.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpczycnscl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpczycnscl.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpczycnscl.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpczycnscl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpczycnscl.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpczycnscl.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpczycnscl.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpczycnscl.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpczycnscl.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuh8arufq.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\n\
    \    ...\n  Stacktrace:\n   [1] fruit_distribution(s::String, n::Int64)\n    \
    \ @ Main /tmp/tmpuh8arufq.jl:15\n   [2] macro expansion\n     @ /tmp/tmpuh8arufq.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpuh8arufq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuh8arufq.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n    ...\n  Stacktrace:\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpuh8arufq.jl:15\n   [2] macro expansion\n    \
    \ @ /tmp/tmpuh8arufq.jl:22 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpuh8arufq.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpuh8arufq.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuh8arufq.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphg2_03nt.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmphg2_03nt.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmphg2_03nt.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphg2_03nt.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmphg2_03nt.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmphg2_03nt.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmphg2_03nt.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphg2_03nt.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmphg2_03nt.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz_9rufig.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpz_9rufig.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpz_9rufig.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz_9rufig.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpz_9rufig.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpz_9rufig.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpz_9rufig.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz_9rufig.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpz_9rufig.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwtiy0s9a.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpwtiy0s9a.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtiy0s9a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwtiy0s9a.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwtiy0s9a.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtiy0s9a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwtiy0s9a.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwtiy0s9a.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtiy0s9a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwtiy0s9a.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwtiy0s9a.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtiy0s9a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwtiy0s9a.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwtiy0s9a.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtiy0s9a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpwtiy0s9a.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwtiy0s9a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbn0xde7k.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpbn0xde7k.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpbn0xde7k.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbn0xde7k.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbn0xde7k.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpbn0xde7k.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpbn0xde7k.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbn0xde7k.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbn0xde7k.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc1i0nvd5.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpc1i0nvd5.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpc1i0nvd5.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc1i0nvd5.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpc1i0nvd5.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpc1i0nvd5.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpc1i0nvd5.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc1i0nvd5.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpc1i0nvd5.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code goes here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples\
    \ and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21)\
    \ == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
    1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpml34qdq_.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpml34qdq_.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpml34qdq_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpml34qdq_.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpml34qdq_.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpml34qdq_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpml34qdq_.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpml34qdq_.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpml34qdq_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpml34qdq_.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpml34qdq_.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpml34qdq_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpml34qdq_.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpml34qdq_.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpml34qdq_.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpml34qdq_.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpml34qdq_.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptt8dioqs.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmptt8dioqs.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmptt8dioqs.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptt8dioqs.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmptt8dioqs.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmptt8dioqs.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmptt8dioqs.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptt8dioqs.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmptt8dioqs.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmphp659w67.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmphp659w67.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmphp659w67.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphp659w67.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmphp659w67.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmphp659w67.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmphp659w67.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmphp659w67.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmphp659w67.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx7rps1i1.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpx7rps1i1.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx7rps1i1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx7rps1i1.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx7rps1i1.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx7rps1i1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx7rps1i1.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx7rps1i1.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx7rps1i1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx7rps1i1.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx7rps1i1.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx7rps1i1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx7rps1i1.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx7rps1i1.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx7rps1i1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpx7rps1i1.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx7rps1i1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpioanezmv.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpioanezmv.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpioanezmv.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpioanezmv.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpioanezmv.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpioanezmv.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpioanezmv.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpioanezmv.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpioanezmv.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7t8qrxr5.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp7t8qrxr5.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7t8qrxr5.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7t8qrxr5.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7t8qrxr5.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp7t8qrxr5.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp7t8qrxr5.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7t8qrxr5.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7t8qrxr5.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ndwuq5z.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp0ndwuq5z.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ndwuq5z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0ndwuq5z.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0ndwuq5z.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ndwuq5z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0ndwuq5z.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0ndwuq5z.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ndwuq5z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0ndwuq5z.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0ndwuq5z.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ndwuq5z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0ndwuq5z.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0ndwuq5z.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0ndwuq5z.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp0ndwuq5z.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ndwuq5z.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph3fofk5o.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmph3fofk5o.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmph3fofk5o.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph3fofk5o.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmph3fofk5o.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmph3fofk5o.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmph3fofk5o.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph3fofk5o.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmph3fofk5o.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpyxa3w2pn.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpyxa3w2pn.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpyxa3w2pn.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyxa3w2pn.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpyxa3w2pn.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpyxa3w2pn.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpyxa3w2pn.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpyxa3w2pn.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpyxa3w2pn.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpd7bhe7am.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpd7bhe7am.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpd7bhe7am.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpd7bhe7am.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpd7bhe7am.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpd7bhe7am.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpd7bhe7am.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpd7bhe7am.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpd7bhe7am.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj1f2m1b8.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpj1f2m1b8.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj1f2m1b8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj1f2m1b8.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj1f2m1b8.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj1f2m1b8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj1f2m1b8.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj1f2m1b8.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj1f2m1b8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj1f2m1b8.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj1f2m1b8.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj1f2m1b8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj1f2m1b8.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj1f2m1b8.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj1f2m1b8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpj1f2m1b8.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj1f2m1b8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwdvs01fm.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpwdvs01fm.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpwdvs01fm.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwdvs01fm.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpwdvs01fm.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpwdvs01fm.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpwdvs01fm.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwdvs01fm.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpwdvs01fm.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7lomz8y_.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp7lomz8y_.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7lomz8y_.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7lomz8y_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7lomz8y_.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp7lomz8y_.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp7lomz8y_.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7lomz8y_.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7lomz8y_.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd8ut7m8o.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpd8ut7m8o.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd8ut7m8o.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd8ut7m8o.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd8ut7m8o.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd8ut7m8o.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd8ut7m8o.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd8ut7m8o.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd8ut7m8o.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd8ut7m8o.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd8ut7m8o.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd8ut7m8o.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd8ut7m8o.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd8ut7m8o.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd8ut7m8o.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpd8ut7m8o.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd8ut7m8o.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvrcrgc4a.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpvrcrgc4a.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvrcrgc4a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvrcrgc4a.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvrcrgc4a.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvrcrgc4a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvrcrgc4a.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvrcrgc4a.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvrcrgc4a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvrcrgc4a.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvrcrgc4a.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvrcrgc4a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvrcrgc4a.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvrcrgc4a.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvrcrgc4a.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpvrcrgc4a.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvrcrgc4a.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgnu3xy9u.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpgnu3xy9u.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgnu3xy9u.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgnu3xy9u.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgnu3xy9u.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgnu3xy9u.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgnu3xy9u.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgnu3xy9u.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgnu3xy9u.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgnu3xy9u.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgnu3xy9u.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgnu3xy9u.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgnu3xy9u.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgnu3xy9u.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgnu3xy9u.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpgnu3xy9u.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgnu3xy9u.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph43s1xdm.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmph43s1xdm.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph43s1xdm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph43s1xdm.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph43s1xdm.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph43s1xdm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph43s1xdm.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph43s1xdm.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph43s1xdm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph43s1xdm.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph43s1xdm.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph43s1xdm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph43s1xdm.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph43s1xdm.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph43s1xdm.jl:21\ntest set: Test\
    \ Failed at /tmp/tmph43s1xdm.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph43s1xdm.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpurje8gcg.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpurje8gcg.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpurje8gcg.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpurje8gcg.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpurje8gcg.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpurje8gcg.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpurje8gcg.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpurje8gcg.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpurje8gcg.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph78o86n9.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmph78o86n9.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmph78o86n9.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph78o86n9.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmph78o86n9.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmph78o86n9.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmph78o86n9.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph78o86n9.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmph78o86n9.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptmcpl9j3.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmptmcpl9j3.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmptmcpl9j3.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptmcpl9j3.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmptmcpl9j3.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmptmcpl9j3.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmptmcpl9j3.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptmcpl9j3.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmptmcpl9j3.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphz3eln7l.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphz3eln7l.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphz3eln7l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphz3eln7l.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphz3eln7l.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphz3eln7l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphz3eln7l.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphz3eln7l.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphz3eln7l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphz3eln7l.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphz3eln7l.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphz3eln7l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphz3eln7l.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphz3eln7l.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphz3eln7l.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphz3eln7l.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphz3eln7l.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprwomt5k1.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmprwomt5k1.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwomt5k1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprwomt5k1.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprwomt5k1.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwomt5k1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprwomt5k1.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprwomt5k1.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwomt5k1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprwomt5k1.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprwomt5k1.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwomt5k1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprwomt5k1.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprwomt5k1.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprwomt5k1.jl:21\ntest set: Test\
    \ Failed at /tmp/tmprwomt5k1.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprwomt5k1.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4au0bdc3.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp4au0bdc3.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp4au0bdc3.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4au0bdc3.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4au0bdc3.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp4au0bdc3.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp4au0bdc3.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4au0bdc3.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4au0bdc3.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpoistv6ov.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpoistv6ov.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpoistv6ov.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoistv6ov.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpoistv6ov.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpoistv6ov.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpoistv6ov.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpoistv6ov.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpoistv6ov.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfzwu28_h.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpfzwu28_h.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpfzwu28_h.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfzwu28_h.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfzwu28_h.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpfzwu28_h.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpfzwu28_h.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfzwu28_h.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfzwu28_h.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwr47agxk.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpwr47agxk.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpwr47agxk.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwr47agxk.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpwr47agxk.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpwr47agxk.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpwr47agxk.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwr47agxk.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpwr47agxk.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1m8dv9rj.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp1m8dv9rj.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp1m8dv9rj.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1m8dv9rj.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp1m8dv9rj.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp1m8dv9rj.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp1m8dv9rj.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1m8dv9rj.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp1m8dv9rj.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdp7ilyp6.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpdp7ilyp6.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpdp7ilyp6.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdp7ilyp6.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpdp7ilyp6.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpdp7ilyp6.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpdp7ilyp6.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdp7ilyp6.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpdp7ilyp6.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpv9le2gus.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpv9le2gus.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpv9le2gus.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv9le2gus.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpv9le2gus.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpv9le2gus.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpv9le2gus.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpv9le2gus.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpv9le2gus.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfvzrc3zy.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpfvzrc3zy.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpfvzrc3zy.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfvzrc3zy.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfvzrc3zy.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpfvzrc3zy.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpfvzrc3zy.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpfvzrc3zy.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpfvzrc3zy.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnxivhmi9.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpnxivhmi9.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpnxivhmi9.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnxivhmi9.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpnxivhmi9.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpnxivhmi9.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpnxivhmi9.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnxivhmi9.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpnxivhmi9.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpt30jz8d1.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpt30jz8d1.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpt30jz8d1.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt30jz8d1.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpt30jz8d1.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpt30jz8d1.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpt30jz8d1.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpt30jz8d1.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpt30jz8d1.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbfttn98q.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpbfttn98q.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpbfttn98q.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbfttn98q.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbfttn98q.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpbfttn98q.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpbfttn98q.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbfttn98q.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpbfttn98q.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_vpslly4.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp_vpslly4.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp_vpslly4.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_vpslly4.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_vpslly4.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp_vpslly4.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp_vpslly4.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_vpslly4.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_vpslly4.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6vzwfe82.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp6vzwfe82.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vzwfe82.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6vzwfe82.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6vzwfe82.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vzwfe82.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6vzwfe82.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6vzwfe82.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vzwfe82.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6vzwfe82.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6vzwfe82.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vzwfe82.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6vzwfe82.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6vzwfe82.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vzwfe82.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp6vzwfe82.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6vzwfe82.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8ryvof4a.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp8ryvof4a.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp8ryvof4a.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8ryvof4a.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp8ryvof4a.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp8ryvof4a.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp8ryvof4a.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8ryvof4a.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp8ryvof4a.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp6n8f6f8s.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp6n8f6f8s.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp6n8f6f8s.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6n8f6f8s.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp6n8f6f8s.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp6n8f6f8s.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp6n8f6f8s.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp6n8f6f8s.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp6n8f6f8s.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmph5ccs2nq.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmph5ccs2nq.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmph5ccs2nq.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph5ccs2nq.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmph5ccs2nq.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmph5ccs2nq.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmph5ccs2nq.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmph5ccs2nq.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmph5ccs2nq.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptoz_g03z.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmptoz_g03z.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmptoz_g03z.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptoz_g03z.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmptoz_g03z.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmptoz_g03z.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmptoz_g03z.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptoz_g03z.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmptoz_g03z.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdxuzrn9o.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpdxuzrn9o.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpdxuzrn9o.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdxuzrn9o.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpdxuzrn9o.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpdxuzrn9o.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpdxuzrn9o.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdxuzrn9o.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpdxuzrn9o.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphj2yfc13.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmphj2yfc13.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphj2yfc13.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphj2yfc13.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphj2yfc13.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphj2yfc13.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphj2yfc13.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphj2yfc13.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphj2yfc13.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphj2yfc13.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphj2yfc13.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphj2yfc13.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphj2yfc13.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphj2yfc13.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphj2yfc13.jl:21\ntest set: Test\
    \ Failed at /tmp/tmphj2yfc13.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphj2yfc13.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpayhhs7nb.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpayhhs7nb.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpayhhs7nb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpayhhs7nb.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpayhhs7nb.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpayhhs7nb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpayhhs7nb.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpayhhs7nb.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpayhhs7nb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpayhhs7nb.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpayhhs7nb.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpayhhs7nb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpayhhs7nb.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpayhhs7nb.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpayhhs7nb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpayhhs7nb.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpayhhs7nb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_a3424zi.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_a3424zi.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a3424zi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_a3424zi.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a3424zi.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a3424zi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_a3424zi.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a3424zi.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a3424zi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_a3424zi.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a3424zi.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a3424zi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_a3424zi.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_a3424zi.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_a3424zi.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_a3424zi.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_a3424zi.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpeav1093l.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpeav1093l.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpeav1093l.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpeav1093l.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpeav1093l.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpeav1093l.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpeav1093l.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpeav1093l.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpeav1093l.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9dx33vwq.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp9dx33vwq.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp9dx33vwq.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9dx33vwq.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp9dx33vwq.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp9dx33vwq.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp9dx33vwq.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9dx33vwq.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp9dx33vwq.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpkbhjzwcp.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpkbhjzwcp.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpkbhjzwcp.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkbhjzwcp.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpkbhjzwcp.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpkbhjzwcp.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpkbhjzwcp.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpkbhjzwcp.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpkbhjzwcp.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp53delj3f.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp53delj3f.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp53delj3f.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp53delj3f.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp53delj3f.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp53delj3f.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp53delj3f.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp53delj3f.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp53delj3f.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5e0un4kb.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp5e0un4kb.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp5e0un4kb.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5e0un4kb.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp5e0un4kb.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp5e0un4kb.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp5e0un4kb.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5e0un4kb.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp5e0un4kb.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1255q2v5.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp1255q2v5.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1255q2v5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1255q2v5.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1255q2v5.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1255q2v5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1255q2v5.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1255q2v5.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1255q2v5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1255q2v5.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1255q2v5.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1255q2v5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1255q2v5.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1255q2v5.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1255q2v5.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp1255q2v5.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1255q2v5.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoegz6dk2.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpoegz6dk2.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoegz6dk2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpoegz6dk2.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoegz6dk2.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoegz6dk2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpoegz6dk2.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoegz6dk2.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoegz6dk2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpoegz6dk2.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoegz6dk2.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoegz6dk2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpoegz6dk2.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoegz6dk2.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoegz6dk2.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpoegz6dk2.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoegz6dk2.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp862ihyhf.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp862ihyhf.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp862ihyhf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp862ihyhf.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp862ihyhf.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp862ihyhf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp862ihyhf.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp862ihyhf.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp862ihyhf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp862ihyhf.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp862ihyhf.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp862ihyhf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp862ihyhf.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp862ihyhf.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp862ihyhf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp862ihyhf.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp862ihyhf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp93chg911.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp93chg911.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93chg911.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp93chg911.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93chg911.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93chg911.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp93chg911.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93chg911.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93chg911.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp93chg911.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93chg911.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93chg911.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp93chg911.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp93chg911.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp93chg911.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp93chg911.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp93chg911.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplkqumwzf.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmplkqumwzf.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkqumwzf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplkqumwzf.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplkqumwzf.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkqumwzf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplkqumwzf.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplkqumwzf.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkqumwzf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplkqumwzf.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplkqumwzf.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkqumwzf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplkqumwzf.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplkqumwzf.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplkqumwzf.jl:21\ntest set: Test\
    \ Failed at /tmp/tmplkqumwzf.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplkqumwzf.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_gvl5mjs.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp_gvl5mjs.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gvl5mjs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_gvl5mjs.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gvl5mjs.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gvl5mjs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_gvl5mjs.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gvl5mjs.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gvl5mjs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_gvl5mjs.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gvl5mjs.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gvl5mjs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_gvl5mjs.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_gvl5mjs.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gvl5mjs.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp_gvl5mjs.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_gvl5mjs.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpd7nb2o33.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpd7nb2o33.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpd7nb2o33.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpd7nb2o33.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpd7nb2o33.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpd7nb2o33.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpd7nb2o33.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpd7nb2o33.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpd7nb2o33.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcbyo1zx3.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpcbyo1zx3.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpcbyo1zx3.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcbyo1zx3.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpcbyo1zx3.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpcbyo1zx3.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpcbyo1zx3.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcbyo1zx3.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpcbyo1zx3.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return n - parse(Int64, split(s,\
    \ \" \")[1]) - parse(Int64, split(s, \" \")[4])\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp55xbzdas.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp55xbzdas.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp55xbzdas.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55xbzdas.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp55xbzdas.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp55xbzdas.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55xbzdas.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp55xbzdas.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp55xbzdas.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55xbzdas.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp55xbzdas.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp55xbzdas.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55xbzdas.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp55xbzdas.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp55xbzdas.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55xbzdas.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp55xbzdas.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzauyue0t.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpzauyue0t.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzauyue0t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzauyue0t.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzauyue0t.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzauyue0t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzauyue0t.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzauyue0t.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzauyue0t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzauyue0t.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzauyue0t.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzauyue0t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzauyue0t.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzauyue0t.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzauyue0t.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpzauyue0t.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzauyue0t.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4cjswypv.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp4cjswypv.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp4cjswypv.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4cjswypv.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4cjswypv.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp4cjswypv.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp4cjswypv.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4cjswypv.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4cjswypv.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2u0kf124.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp2u0kf124.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp2u0kf124.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2u0kf124.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp2u0kf124.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp2u0kf124.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp2u0kf124.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2u0kf124.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp2u0kf124.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp4_xzh1jh.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp4_xzh1jh.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp4_xzh1jh.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4_xzh1jh.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4_xzh1jh.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp4_xzh1jh.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp4_xzh1jh.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp4_xzh1jh.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp4_xzh1jh.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp52f8drf4.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp52f8drf4.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp52f8drf4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp52f8drf4.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp52f8drf4.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp52f8drf4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp52f8drf4.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp52f8drf4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp52f8drf4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp52f8drf4.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp52f8drf4.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp52f8drf4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp52f8drf4.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp52f8drf4.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp52f8drf4.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp52f8drf4.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp52f8drf4.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp05klnxit.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp05klnxit.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp05klnxit.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp05klnxit.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp05klnxit.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp05klnxit.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp05klnxit.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp05klnxit.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp05klnxit.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnozoe2uh.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpnozoe2uh.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpnozoe2uh.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnozoe2uh.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpnozoe2uh.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpnozoe2uh.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpnozoe2uh.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnozoe2uh.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpnozoe2uh.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn6owtoc6.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpn6owtoc6.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpn6owtoc6.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn6owtoc6.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpn6owtoc6.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpn6owtoc6.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpn6owtoc6.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn6owtoc6.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpn6owtoc6.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbgfleo7x.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpbgfleo7x.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbgfleo7x.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbgfleo7x.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbgfleo7x.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbgfleo7x.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbgfleo7x.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbgfleo7x.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbgfleo7x.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbgfleo7x.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbgfleo7x.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbgfleo7x.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbgfleo7x.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbgfleo7x.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbgfleo7x.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpbgfleo7x.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbgfleo7x.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn2g24wgp.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpn2g24wgp.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpn2g24wgp.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn2g24wgp.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpn2g24wgp.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpn2g24wgp.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpn2g24wgp.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpn2g24wgp.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpn2g24wgp.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpztk_hsho.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpztk_hsho.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpztk_hsho.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpztk_hsho.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpztk_hsho.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpztk_hsho.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpztk_hsho.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpztk_hsho.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpztk_hsho.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpztk_hsho.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpztk_hsho.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpztk_hsho.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpztk_hsho.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpztk_hsho.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpztk_hsho.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpztk_hsho.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpztk_hsho.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # YOUR CODE HERE\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2nfyfqvr.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp2nfyfqvr.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp2nfyfqvr.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2nfyfqvr.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp2nfyfqvr.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp2nfyfqvr.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp2nfyfqvr.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2nfyfqvr.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp2nfyfqvr.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp_ihheabj.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp_ihheabj.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp_ihheabj.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_ihheabj.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_ihheabj.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp_ihheabj.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp_ihheabj.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp_ihheabj.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp_ihheabj.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo1ft7zg8.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpo1ft7zg8.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1ft7zg8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo1ft7zg8.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo1ft7zg8.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1ft7zg8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo1ft7zg8.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo1ft7zg8.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1ft7zg8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo1ft7zg8.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo1ft7zg8.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1ft7zg8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo1ft7zg8.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo1ft7zg8.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo1ft7zg8.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpo1ft7zg8.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo1ft7zg8.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7f8ihx6i.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp7f8ihx6i.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7f8ihx6i.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7f8ihx6i.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7f8ihx6i.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp7f8ihx6i.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp7f8ihx6i.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7f8ihx6i.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7f8ihx6i.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpi1f2wm0u.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpi1f2wm0u.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpi1f2wm0u.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi1f2wm0u.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpi1f2wm0u.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpi1f2wm0u.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpi1f2wm0u.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpi1f2wm0u.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpi1f2wm0u.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp_s1skxk.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpp_s1skxk.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_s1skxk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp_s1skxk.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp_s1skxk.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_s1skxk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp_s1skxk.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp_s1skxk.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_s1skxk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp_s1skxk.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp_s1skxk.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_s1skxk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp_s1skxk.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp_s1skxk.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp_s1skxk.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpp_s1skxk.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp_s1skxk.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpw3ihipzk.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmpw3ihipzk.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpw3ihipzk.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw3ihipzk.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpw3ihipzk.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmpw3ihipzk.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmpw3ihipzk.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpw3ihipzk.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmpw3ihipzk.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnsu0p_o9.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpnsu0p_o9.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnsu0p_o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnsu0p_o9.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnsu0p_o9.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnsu0p_o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnsu0p_o9.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnsu0p_o9.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnsu0p_o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnsu0p_o9.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnsu0p_o9.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnsu0p_o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnsu0p_o9.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnsu0p_o9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnsu0p_o9.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpnsu0p_o9.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnsu0p_o9.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\n    return 0\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6\
    \ oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\
    \t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1\
    \ apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp55rsozeb.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmp55rsozeb.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp55rsozeb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55rsozeb.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp55rsozeb.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp55rsozeb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55rsozeb.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp55rsozeb.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp55rsozeb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55rsozeb.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp55rsozeb.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp55rsozeb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55rsozeb.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp55rsozeb.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp55rsozeb.jl:21\ntest set: Test\
    \ Failed at /tmp/tmp55rsozeb.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp55rsozeb.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmppetux4_h.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmppetux4_h.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmppetux4_h.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppetux4_h.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmppetux4_h.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmppetux4_h.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmppetux4_h.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmppetux4_h.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmppetux4_h.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7aczzdp0.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\\n\
    \  MethodError: Cannot `convert` an object of type Nothing to an object of type\
    \ Int64\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T) where\
    \ T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where T<:Number\
    \ at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision) where\
    \ T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\\n     @ Main /tmp/tmp7aczzdp0.jl:15\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7aczzdp0.jl:21 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7aczzdp0.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7aczzdp0.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\\n  \
    \  convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\\\
    n    ...\\n  Stacktrace:\\n   [1] fruit_distribution(s::String, n::Int64)\\n \
    \    @ Main /tmp/tmp7aczzdp0.jl:15\\n   [2] macro expansion\\n     @ /tmp/tmp7aczzdp0.jl:22\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7aczzdp0.jl:20\\ntest set:\
    \ Error During Test at /tmp/tmp7aczzdp0.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\\n  Closest candidates\
    \ are:\\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\\
    n    convert(::Type{T}, !"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code goes here\n    return 0\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples\
    \ and 6 oranges\", 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21)\
    \ == 10)\n\t@test(candidate(\"0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"\
    1 apples and 0 oranges\", 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\"\
    , 100) == 95)\n\t@test(candidate(\"2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"\
    1 apples and 100 oranges\", 120) == 19)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaub6zmfq.jl:22\n  Expression: candidate(\"\
    5 apples and 6 oranges\", 19) == 8\n   Evaluated: 0 == 8\nStacktrace:\n [1] macro\
    \ expansion\n   @ /tmp/tmpaub6zmfq.jl:22 [inlined]\n [2] macro expansion\n   @\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaub6zmfq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpaub6zmfq.jl:23\n  Expression: candidate(\"5 apples and 6 oranges\"\
    , 21) == 10\n   Evaluated: 0 == 10\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaub6zmfq.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaub6zmfq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpaub6zmfq.jl:24\n  Expression: candidate(\"0 apples and 1 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaub6zmfq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaub6zmfq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpaub6zmfq.jl:25\n  Expression: candidate(\"1 apples and 0 oranges\"\
    , 3) == 2\n   Evaluated: 0 == 2\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaub6zmfq.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaub6zmfq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpaub6zmfq.jl:26\n  Expression: candidate(\"2 apples and 3 oranges\"\
    , 100) == 95\n   Evaluated: 0 == 95\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaub6zmfq.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaub6zmfq.jl:21\ntest set: Test\
    \ Failed at /tmp/tmpaub6zmfq.jl:28\n  Expression: candidate(\"1 apples and 100\
    \ oranges\", 120) == 19\n   Evaluated: 0 == 19\nStacktrace:\n [1] macro expansion"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaub6zmfq.jl:19\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpskqf26u4.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\n\
    \    ...\n  Stacktrace:\n   [1] fruit_distribution(s::String, n::Int64)\n    \
    \ @ Main /tmp/tmpskqf26u4.jl:15\n   [2] macro expansion\n     @ /tmp/tmpskqf26u4.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpskqf26u4.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpskqf26u4.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n    ...\n  Stacktrace:\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpskqf26u4.jl:15\n   [2] macro expansion\n    \
    \ @ /tmp/tmpskqf26u4.jl:22 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpskqf26u4.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpskqf26u4.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpskqf26u4.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    In this task, you will be given a string that represents a\
    \ number of apples and oranges \n    that are distributed in a basket of fruit\
    \ this basket contains \n    apples, oranges, and mango fruits. Given the string\
    \ that represents the total number of \n    the oranges and apples and an integer\
    \ that represent the total number of the fruits \n    in the basket return the\
    \ number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"\
    5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples\
    \ and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3\
    \ oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and\
    \ 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\nfunction fruit_distribution(s::String,\
    \ n::Int64)::Int64 \n    # your code here\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = fruit_distribution;\n\t@test(candidate(\"5 apples and 6 oranges\"\
    , 19) == 8)\n\t@test(candidate(\"5 apples and 6 oranges\", 21) == 10)\n\t@test(candidate(\"\
    0 apples and 1 oranges\", 3) == 2)\n\t@test(candidate(\"1 apples and 0 oranges\"\
    , 3) == 2)\n\t@test(candidate(\"2 apples and 3 oranges\", 100) == 95)\n\t@test(candidate(\"\
    2 apples and 3 oranges\", 5) == 0)\n\t@test(candidate(\"1 apples and 100 oranges\"\
    , 120) == 19)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpe5_k1cfp.jl:21\n  Test threw exception\n\
    \  Expression: candidate(\"5 apples and 6 oranges\", 19) == 8\n  MethodError:\
    \ Cannot `convert` an object of type Nothing to an object of type Int64\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n\
    \    convert(::Type{T}, !Matched::Number) where T<:Number at number.jl:7\n   \
    \ convert(::Type{T}, !Matched::Base.TwicePrecision) where T<:Number at twiceprecision.jl:250\n\
    \    ...\n  Stacktrace:\n   [1] fruit_distribution(s::String, n::Int64)\n    \
    \ @ Main /tmp/tmpe5_k1cfp.jl:15\n   [2] macro expansion\n     @ /tmp/tmpe5_k1cfp.jl:21\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe5_k1cfp.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpe5_k1cfp.jl:22\n  Test threw exception\n  Expression:\
    \ candidate(\"5 apples and 6 oranges\", 21) == 10\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\n    ...\n  Stacktrace:\n   [1] fruit_distribution(s::String,\
    \ n::Int64)\n     @ Main /tmp/tmpe5_k1cfp.jl:15\n   [2] macro expansion\n    \
    \ @ /tmp/tmpe5_k1cfp.jl:22 [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpe5_k1cfp.jl:20\ntest set:\
    \ Error During Test at /tmp/tmpe5_k1cfp.jl:23\n  Test threw exception\n  Expression:\
    \ candidate(\"0 apples and 1 oranges\", 3) == 2\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Int64\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.j"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe5_k1cfp.jl:18\n"
  exit_code: 1
  status: SyntaxError
