name: HumanEval_76_is_simple_power
language: julia
results:
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x == n^(round(log(x)/log(n)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnf_wgzvn.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpnf_wgzvn.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpnf_wgzvn.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnf_wgzvn.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnf_wgzvn.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpnf_wgzvn.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpnf_wgzvn.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnf_wgzvn.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnf_wgzvn.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpnf_wgzvn.jl:13\n   [3] macro expansion\n     @ /tmp/tmpnf_wgzvn.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnf_wgzvn.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnf_wgzvn.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpnf_wgzvn.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpnf_wgzvn.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnf_wgzvn.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6zilakvz.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp6zilakvz.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp6zilakvz.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6zilakvz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6zilakvz.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp6zilakvz.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp6zilakvz.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6zilakvz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6zilakvz.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp6zilakvz.jl:13\n   [3] macro expansion\n     @ /tmp/tmp6zilakvz.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6zilakvz.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6zilakvz.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp6zilakvz.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp6zilakvz.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6zilakvz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1 && n == 1\n        return true\n    elseif x == 1 && n != 1\n        return\
    \ false\n    elseif x == n\n        return true\n    elseif x % n != 0\n     \
    \   return false\n    else\n        return is_simple_power(x/n, n)\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz02pva61.jl:30\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpz02pva61.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpz02pva61.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpz02pva61.jl:30 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz02pva61.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpz02pva61.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpz02pva61.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpz02pva61.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpz02pva61.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz02pva61.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpz02pva61.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpz02pva61.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpz02pva61.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpz02pva61.jl:33 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz02pva61.jl:29\\ntest set:\
    \ Error During Test at /tmp/tmpz02pva61.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && (x % (n^2) != 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpibf04j79.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpibf04j79.jl:20 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpibf04j79.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpibf04j79.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpibf04j79.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpibf04j79.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpibf04j79.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpibf04j79.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpibf04j79.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpibf04j79.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpibf04j79.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpibf04j79.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpibf04j79.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpibf04j79.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpibf04j79.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpibf04j79.jl:28\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpibf04j79.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pac"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibf04j79.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x == n^(round(log(x)/log(n)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdwh0rjrl.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpdwh0rjrl.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpdwh0rjrl.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdwh0rjrl.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpdwh0rjrl.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpdwh0rjrl.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpdwh0rjrl.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdwh0rjrl.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpdwh0rjrl.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpdwh0rjrl.jl:13\n   [3] macro expansion\n     @ /tmp/tmpdwh0rjrl.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdwh0rjrl.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpdwh0rjrl.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpdwh0rjrl.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpdwh0rjrl.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdwh0rjrl.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjnxadwx9.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpjnxadwx9.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpjnxadwx9.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjnxadwx9.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjnxadwx9.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpjnxadwx9.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpjnxadwx9.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjnxadwx9.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjnxadwx9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpjnxadwx9.jl:13\n   [3] macro expansion\n     @ /tmp/tmpjnxadwx9.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpjnxadwx9.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpjnxadwx9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpjnxadwx9.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpjnxadwx9.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjnxadwx9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^round(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7a3zfjt0.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp7a3zfjt0.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp7a3zfjt0.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a3zfjt0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7a3zfjt0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp7a3zfjt0.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp7a3zfjt0.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a3zfjt0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7a3zfjt0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp7a3zfjt0.jl:13\n   [3] macro expansion\n     @ /tmp/tmp7a3zfjt0.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7a3zfjt0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7a3zfjt0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp7a3zfjt0.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp7a3zfjt0.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7a3zfjt0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ == n^(Int64(log(x)/log(n))))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcque9l2g.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpcque9l2g.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpcque9l2g.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcque9l2g.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpcque9l2g.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpcque9l2g.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpcque9l2g.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcque9l2g.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpcque9l2g.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpcque9l2g.jl:13\n   [3] macro expansion\n     @ /tmp/tmpcque9l2g.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcque9l2g.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpcque9l2g.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpcque9l2g.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpcque9l2g.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcque9l2g.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7233qf9c.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp7233qf9c.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp7233qf9c.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7233qf9c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7233qf9c.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp7233qf9c.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp7233qf9c.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7233qf9c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7233qf9c.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp7233qf9c.jl:13\n   [3] macro expansion\n     @ /tmp/tmp7233qf9c.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp7233qf9c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp7233qf9c.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp7233qf9c.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp7233qf9c.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7233qf9c.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn1g1ysja.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpn1g1ysja.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpn1g1ysja.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn1g1ysja.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpn1g1ysja.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpn1g1ysja.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpn1g1ysja.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn1g1ysja.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpn1g1ysja.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpn1g1ysja.jl:13\n   [3] macro expansion\n     @ /tmp/tmpn1g1ysja.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpn1g1ysja.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpn1g1ysja.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpn1g1ysja.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpn1g1ysja.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn1g1ysja.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpezw4ij7u.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpezw4ij7u.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpezw4ij7u.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpezw4ij7u.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpezw4ij7u.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpezw4ij7u.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpezw4ij7u.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpezw4ij7u.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpezw4ij7u.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpezw4ij7u.jl:13\n   [3] macro expansion\n     @ /tmp/tmpezw4ij7u.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpezw4ij7u.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpezw4ij7u.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpezw4ij7u.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpezw4ij7u.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpezw4ij7u.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x == n\n        return true\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8www0emf.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp8www0emf.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp8www0emf.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8www0emf.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8www0emf.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp8www0emf.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp8www0emf.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp8www0emf.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp8www0emf.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8www0emf.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp8www0emf.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp8www0emf.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp8www0emf.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp8www0emf.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8www0emf.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp8www0emf.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpj51zv8vt.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpj51zv8vt.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpj51zv8vt.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpj51zv8vt.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj51zv8vt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpj51zv8vt.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpj51zv8vt.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpj51zv8vt.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpj51zv8vt.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj51zv8vt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpj51zv8vt.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpj51zv8vt.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpj51zv8vt.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpj51zv8vt.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpj51zv8vt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpj51zv8vt.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x%n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3vfe3dbv.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp3vfe3dbv.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp3vfe3dbv.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3vfe3dbv.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3vfe3dbv.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp3vfe3dbv.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp3vfe3dbv.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp3vfe3dbv.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp3vfe3dbv.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3vfe3dbv.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp3vfe3dbv.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp3vfe3dbv.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp3vfe3dbv.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp3vfe3dbv.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3vfe3dbv.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp3vfe3dbv.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxp2zrlei.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpxp2zrlei.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpxp2zrlei.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxp2zrlei.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxp2zrlei.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpxp2zrlei.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpxp2zrlei.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxp2zrlei.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxp2zrlei.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpxp2zrlei.jl:13\n   [3] macro expansion\n     @ /tmp/tmpxp2zrlei.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxp2zrlei.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxp2zrlei.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpxp2zrlei.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpxp2zrlei.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxp2zrlei.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_sr67bc3.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp_sr67bc3.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp_sr67bc3.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_sr67bc3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_sr67bc3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp_sr67bc3.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp_sr67bc3.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_sr67bc3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_sr67bc3.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp_sr67bc3.jl:13\n   [3] macro expansion\n     @ /tmp/tmp_sr67bc3.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp_sr67bc3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp_sr67bc3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp_sr67bc3.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp_sr67bc3.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_sr67bc3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1\n        return true\n    end\n    if x == 1\n        return true\n    end\n\
    \    if x == n\n        return true\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp73ev92zb.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp73ev92zb.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp73ev92zb.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmp73ev92zb.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp73ev92zb.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp73ev92zb.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp73ev92zb.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp73ev92zb.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp73ev92zb.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp73ev92zb.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp73ev92zb.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp73ev92zb.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp73ev92zb.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp73ev92zb.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp73ev92zb.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp73ev92zb.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo5rst_50.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpo5rst_50.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpo5rst_50.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo5rst_50.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpo5rst_50.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpo5rst_50.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpo5rst_50.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo5rst_50.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpo5rst_50.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpo5rst_50.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpo5rst_50.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpo5rst_50.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpo5rst_50.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpo5rst_50.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpo5rst_50.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpo5rst_50.jl:17\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ % n == 0 ? is_simple_power(x/n, n) : x == 1\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp37ih0uix.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp37ih0uix.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp37ih0uix.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmp37ih0uix.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp37ih0uix.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp37ih0uix.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp37ih0uix.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp37ih0uix.jl:13\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp37ih0uix.jl:22 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp37ih0uix.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp37ih0uix.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp37ih0uix.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp37ih0uix.jl:13\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp37ih0uix.jl:23 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp37ih0uix.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp37ih0uix.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpubgjas25.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpubgjas25.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpubgjas25.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpubgjas25.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpubgjas25.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpubgjas25.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpubgjas25.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpubgjas25.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpubgjas25.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpubgjas25.jl:13\n   [3] macro expansion\n     @ /tmp/tmpubgjas25.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpubgjas25.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpubgjas25.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpubgjas25.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpubgjas25.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpubgjas25.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpd_ga9a3u.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpd_ga9a3u.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpd_ga9a3u.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd_ga9a3u.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpd_ga9a3u.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpd_ga9a3u.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpd_ga9a3u.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd_ga9a3u.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpd_ga9a3u.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpd_ga9a3u.jl:13\n   [3] macro expansion\n     @ /tmp/tmpd_ga9a3u.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpd_ga9a3u.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpd_ga9a3u.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpd_ga9a3u.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpd_ga9a3u.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd_ga9a3u.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmperemmx4m.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmperemmx4m.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmperemmx4m.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmperemmx4m.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmperemmx4m.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmperemmx4m.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmperemmx4m.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmperemmx4m.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmperemmx4m.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmperemmx4m.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmperemmx4m.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmperemmx4m.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmperemmx4m.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmperemmx4m.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmperemmx4m.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmperemmx4m.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb7nswm21.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpb7nswm21.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb7nswm21.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpb7nswm21.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb7nswm21.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb7nswm21.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb7nswm21.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(floor(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n^floor(log(x)/log(n))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj1qdj0nk.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpj1qdj0nk.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpj1qdj0nk.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj1qdj0nk.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpj1qdj0nk.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpj1qdj0nk.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpj1qdj0nk.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj1qdj0nk.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpj1qdj0nk.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpj1qdj0nk.jl:13\n   [3] macro expansion\n     @ /tmp/tmpj1qdj0nk.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpj1qdj0nk.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpj1qdj0nk.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpj1qdj0nk.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpj1qdj0nk.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj1qdj0nk.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpklk77onb.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpklk77onb.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpklk77onb.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpklk77onb.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpklk77onb.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpklk77onb.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpklk77onb.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpklk77onb.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpklk77onb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpklk77onb.jl:13\n   [3] macro expansion\n     @ /tmp/tmpklk77onb.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpklk77onb.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpklk77onb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpklk77onb.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpklk77onb.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpklk77onb.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpeymbjckt.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpeymbjckt.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpeymbjckt.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpeymbjckt.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpeymbjckt.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpeymbjckt.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpeymbjckt.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpeymbjckt.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpeymbjckt.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpeymbjckt.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpeymbjckt.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpeymbjckt.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpeymbjckt.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpeymbjckt.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpeymbjckt.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzrbf2iz4.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpzrbf2iz4.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpzrbf2iz4.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpzrbf2iz4.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzrbf2iz4.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpzrbf2iz4.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpzrbf2iz4.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpzrbf2iz4.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpzrbf2iz4.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzrbf2iz4.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpzrbf2iz4.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpzrbf2iz4.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpzrbf2iz4.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpzrbf2iz4.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzrbf2iz4.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpzrbf2iz4.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9owtdaam.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp9owtdaam.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp9owtdaam.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9owtdaam.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9owtdaam.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp9owtdaam.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp9owtdaam.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9owtdaam.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9owtdaam.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp9owtdaam.jl:13\n   [3] macro expansion\n     @ /tmp/tmp9owtdaam.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9owtdaam.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9owtdaam.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp9owtdaam.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp9owtdaam.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9owtdaam.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeofyw13e.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpeofyw13e.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpeofyw13e.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeofyw13e.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpeofyw13e.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpeofyw13e.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpeofyw13e.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeofyw13e.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpeofyw13e.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpeofyw13e.jl:13\n   [3] macro expansion\n     @ /tmp/tmpeofyw13e.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpeofyw13e.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpeofyw13e.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpeofyw13e.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpeofyw13e.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeofyw13e.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x == n^(round(log(x)/log(n)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^round(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    # your code\
    \ here\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmm1546um.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpmm1546um.jl:14\\n\
    \   [2] macro expansion\\n     @ /tmp/tmpmm1546um.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmm1546um.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpmm1546um.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(143214, 16) == false\\n  MethodError: Cannot `convert` an object of\
    \ type Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpmm1546um.jl:14\\n\
    \   [2] macro expansion\\n     @ /tmp/tmpmm1546um.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmm1546um.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpmm1546um.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: Cannot `convert` an object of type\
    \ Nothing to an object of type Bool\\n  Closest candidates are:\\n    convert(::Type{T},\
    \ !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number)\
    \ where T<:Number at number.jl:7\\n    convert(::Typ"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgzn76ify.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpgzn76ify.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpgzn76ify.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgzn76ify.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgzn76ify.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpgzn76ify.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpgzn76ify.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgzn76ify.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgzn76ify.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpgzn76ify.jl:13\n   [3] macro expansion\n     @ /tmp/tmpgzn76ify.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpgzn76ify.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpgzn76ify.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpgzn76ify.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpgzn76ify.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgzn76ify.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^floor(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x == n\n        return true\n    end\n    if n == 0\n        return false\n\
    \    end\n    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0fkxa2i1.jl:35\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp0fkxa2i1.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp0fkxa2i1.jl:28\\\
    n   [2] macro expansion\\n     @ /tmp/tmp0fkxa2i1.jl:35 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0fkxa2i1.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp0fkxa2i1.jl:37\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp0fkxa2i1.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp0fkxa2i1.jl:28\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp0fkxa2i1.jl:37 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0fkxa2i1.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp0fkxa2i1.jl:38\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp0fkxa2i1.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp0fkxa2i1.jl:28\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp0fkxa2i1.jl:38 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp0fkxa2i1.jl:34\\ntest set:\
    \ Error During Test at /tmp/tmp0fkxa2i1.jl:39\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9ycjldfx.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp9ycjldfx.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp9ycjldfx.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ycjldfx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9ycjldfx.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp9ycjldfx.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp9ycjldfx.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ycjldfx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9ycjldfx.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp9ycjldfx.jl:13\n   [3] macro expansion\n     @ /tmp/tmp9ycjldfx.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9ycjldfx.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9ycjldfx.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp9ycjldfx.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp9ycjldfx.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ycjldfx.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpivm8ysli.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpivm8ysli.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpivm8ysli.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpivm8ysli.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpivm8ysli.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpivm8ysli.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpivm8ysli.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpivm8ysli.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpivm8ysli.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpivm8ysli.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpivm8ysli.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpivm8ysli.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpivm8ysli.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpivm8ysli.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpivm8ysli.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpivm8ysli.jl:17\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt9jr04_4.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpt9jr04_4.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpt9jr04_4.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt9jr04_4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpt9jr04_4.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpt9jr04_4.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpt9jr04_4.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt9jr04_4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpt9jr04_4.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpt9jr04_4.jl:13\n   [3] macro expansion\n     @ /tmp/tmpt9jr04_4.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpt9jr04_4.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpt9jr04_4.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpt9jr04_4.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpt9jr04_4.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt9jr04_4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpebonl8gl.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpebonl8gl.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpebonl8gl.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpebonl8gl.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpebonl8gl.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpebonl8gl.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpebonl8gl.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpebonl8gl.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpebonl8gl.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpebonl8gl.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpebonl8gl.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpebonl8gl.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpebonl8gl.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpebonl8gl.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpebonl8gl.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpebonl8gl.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    x == n^(Int64(log(x)/log(n)))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpemha1vox.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpemha1vox.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpemha1vox.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpemha1vox.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpemha1vox.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpemha1vox.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpemha1vox.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpemha1vox.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpemha1vox.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpemha1vox.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpemha1vox.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpemha1vox.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpemha1vox.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpemha1vox.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpemha1vox.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x == n\n        return true\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpez35defa.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpez35defa.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpez35defa.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpez35defa.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpez35defa.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpez35defa.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpez35defa.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpez35defa.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpez35defa.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpez35defa.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpez35defa.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpez35defa.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpez35defa.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpez35defa.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpez35defa.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpez35defa.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x == n\n        return true\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp2eqw4fou.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp2eqw4fou.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp2eqw4fou.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmp2eqw4fou.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2eqw4fou.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp2eqw4fou.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp2eqw4fou.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp2eqw4fou.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp2eqw4fou.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2eqw4fou.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp2eqw4fou.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp2eqw4fou.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp2eqw4fou.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp2eqw4fou.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp2eqw4fou.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp2eqw4fou.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplor8h6ru.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmplor8h6ru.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmplor8h6ru.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmplor8h6ru.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplor8h6ru.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmplor8h6ru.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmplor8h6ru.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmplor8h6ru.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmplor8h6ru.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplor8h6ru.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmplor8h6ru.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmplor8h6ru.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmplor8h6ru.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmplor8h6ru.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplor8h6ru.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmplor8h6ru.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x < n\n        return false\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3pxiveyu.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp3pxiveyu.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp3pxiveyu.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3pxiveyu.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3pxiveyu.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp3pxiveyu.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp3pxiveyu.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp3pxiveyu.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp3pxiveyu.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3pxiveyu.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp3pxiveyu.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp3pxiveyu.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp3pxiveyu.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp3pxiveyu.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3pxiveyu.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp3pxiveyu.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && (x / n % n == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1062jrtd.jl:25\n  Expression: candidate(24,\
    \ 2) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1062jrtd.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1062jrtd.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1062jrtd.jl:26\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1062jrtd.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1062jrtd.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp1062jrtd.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1062jrtd.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1062jrtd.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     3     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1062jrtd.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^round(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9rcvngc7.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp9rcvngc7.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp9rcvngc7.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9rcvngc7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9rcvngc7.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp9rcvngc7.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp9rcvngc7.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9rcvngc7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9rcvngc7.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp9rcvngc7.jl:13\n   [3] macro expansion\n     @ /tmp/tmp9rcvngc7.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp9rcvngc7.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp9rcvngc7.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp9rcvngc7.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp9rcvngc7.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9rcvngc7.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && (x / n % n == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5swkr6tc.jl:25\n  Expression: candidate(24,\
    \ 2) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5swkr6tc.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5swkr6tc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp5swkr6tc.jl:26\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5swkr6tc.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5swkr6tc.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp5swkr6tc.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5swkr6tc.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5swkr6tc.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     3     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5swkr6tc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp0n__zl2d.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp0n__zl2d.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp0n__zl2d.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0n__zl2d.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp0n__zl2d.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp0n__zl2d.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp0n__zl2d.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0n__zl2d.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp0n__zl2d.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp0n__zl2d.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp0n__zl2d.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp0n__zl2d.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp0n__zl2d.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp0n__zl2d.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp0n__zl2d.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmphgk5msn3.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmphgk5msn3.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmphgk5msn3.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgk5msn3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmphgk5msn3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmphgk5msn3.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmphgk5msn3.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgk5msn3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmphgk5msn3.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmphgk5msn3.jl:13\n   [3] macro expansion\n     @ /tmp/tmphgk5msn3.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmphgk5msn3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmphgk5msn3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmphgk5msn3.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmphgk5msn3.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphgk5msn3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1\n        return true\n    end\n    if x == 1\n        return true\n    end\n\
    \    if x == n\n        return true\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3vmhnyz5.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp3vmhnyz5.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp3vmhnyz5.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmp3vmhnyz5.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3vmhnyz5.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp3vmhnyz5.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp3vmhnyz5.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp3vmhnyz5.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp3vmhnyz5.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3vmhnyz5.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp3vmhnyz5.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp3vmhnyz5.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp3vmhnyz5.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp3vmhnyz5.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3vmhnyz5.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp3vmhnyz5.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwkse_d2w.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpwkse_d2w.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpwkse_d2w.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwkse_d2w.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpwkse_d2w.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpwkse_d2w.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpwkse_d2w.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwkse_d2w.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpwkse_d2w.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpwkse_d2w.jl:13\n   [3] macro expansion\n     @ /tmp/tmpwkse_d2w.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpwkse_d2w.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpwkse_d2w.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpwkse_d2w.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpwkse_d2w.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwkse_d2w.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzcbzm_b1.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpzcbzm_b1.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpzcbzm_b1.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpzcbzm_b1.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzcbzm_b1.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpzcbzm_b1.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpzcbzm_b1.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpzcbzm_b1.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpzcbzm_b1.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzcbzm_b1.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpzcbzm_b1.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpzcbzm_b1.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpzcbzm_b1.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpzcbzm_b1.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzcbzm_b1.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpzcbzm_b1.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1a65tqnm.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp1a65tqnm.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp1a65tqnm.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1a65tqnm.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp1a65tqnm.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp1a65tqnm.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp1a65tqnm.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1a65tqnm.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp1a65tqnm.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp1a65tqnm.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp1a65tqnm.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp1a65tqnm.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp1a65tqnm.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp1a65tqnm.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp1a65tqnm.jl:27 [inlined]\\n   [4] mac"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && (x % (n^2) != 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa2pqw2_r.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa2pqw2_r.jl:20 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2pqw2_r.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa2pqw2_r.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2pqw2_r.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2pqw2_r.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa2pqw2_r.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2pqw2_r.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2pqw2_r.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa2pqw2_r.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2pqw2_r.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2pqw2_r.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa2pqw2_r.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2pqw2_r.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2pqw2_r.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpa2pqw2_r.jl:28\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2pqw2_r.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pac"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2pqw2_r.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgszp1fdt.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpgszp1fdt.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpgszp1fdt.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgszp1fdt.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgszp1fdt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpgszp1fdt.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpgszp1fdt.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpgszp1fdt.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpgszp1fdt.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgszp1fdt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpgszp1fdt.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpgszp1fdt.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpgszp1fdt.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpgszp1fdt.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgszp1fdt.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpgszp1fdt.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^Int(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdkxcxqa8.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpdkxcxqa8.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpdkxcxqa8.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdkxcxqa8.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpdkxcxqa8.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpdkxcxqa8.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpdkxcxqa8.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdkxcxqa8.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpdkxcxqa8.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpdkxcxqa8.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpdkxcxqa8.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdkxcxqa8.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpdkxcxqa8.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpdkxcxqa8.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpdkxcxqa8.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdzele64y.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpdzele64y.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpdzele64y.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdzele64y.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpdzele64y.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpdzele64y.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpdzele64y.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdzele64y.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpdzele64y.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpdzele64y.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpdzele64y.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpdzele64y.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpdzele64y.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpdzele64y.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpdzele64y.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpn3bdexo6.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpn3bdexo6.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpn3bdexo6.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpn3bdexo6.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpn3bdexo6.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpn3bdexo6.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpn3bdexo6.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpn3bdexo6.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpn3bdexo6.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpn3bdexo6.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpn3bdexo6.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpn3bdexo6.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpn3bdexo6.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpn3bdexo6.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpn3bdexo6.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1\n        return true\n    end\n    if x == 1\n        return true\n    end\n\
    \    if x == n\n        return true\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpeg3cyw45.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpeg3cyw45.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpeg3cyw45.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpeg3cyw45.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpeg3cyw45.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpeg3cyw45.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpeg3cyw45.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpeg3cyw45.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpeg3cyw45.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpeg3cyw45.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpeg3cyw45.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpeg3cyw45.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpeg3cyw45.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpeg3cyw45.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpeg3cyw45.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpeg3cyw45.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && (x % (n^2) != 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvxh1s_ij.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvxh1s_ij.jl:20 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxh1s_ij.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvxh1s_ij.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxh1s_ij.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxh1s_ij.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvxh1s_ij.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxh1s_ij.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxh1s_ij.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvxh1s_ij.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxh1s_ij.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxh1s_ij.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvxh1s_ij.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxh1s_ij.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxh1s_ij.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvxh1s_ij.jl:28\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvxh1s_ij.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pac"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvxh1s_ij.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp41e2e22s.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp41e2e22s.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp41e2e22s.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp41e2e22s.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp41e2e22s.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp41e2e22s.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp41e2e22s.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp41e2e22s.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp41e2e22s.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp41e2e22s.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp41e2e22s.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmp41e2e22s.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmp41e2e22s.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp41e2e22s.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmp41e2e22s.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    if x == n\n        return\
    \ true\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb07v9h1n.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpb07v9h1n.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpb07v9h1n.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpb07v9h1n.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb07v9h1n.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpb07v9h1n.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpb07v9h1n.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpb07v9h1n.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpb07v9h1n.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb07v9h1n.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpb07v9h1n.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpb07v9h1n.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpb07v9h1n.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpb07v9h1n.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb07v9h1n.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpb07v9h1n.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpse2gvxue.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpse2gvxue.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpse2gvxue.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpse2gvxue.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpse2gvxue.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpse2gvxue.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpse2gvxue.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    # your code\
    \ here\n    return false\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd5dx_y9j.jl:21\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd5dx_y9j.jl:21 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd5dx_y9j.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpd5dx_y9j.jl:23\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd5dx_y9j.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd5dx_y9j.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpd5dx_y9j.jl:24\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd5dx_y9j.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd5dx_y9j.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpd5dx_y9j.jl:25\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd5dx_y9j.jl:25\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd5dx_y9j.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpd5dx_y9j.jl:29\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd5dx_y9j.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd5dx_y9j.jl:20\ntest set: Test\
    \ Failed at /tmp/tmpd5dx_y9j.jl:30\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd5dx_y9j.jl:30\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pack"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd5dx_y9j.jl:18\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyb_4vv6t.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyb_4vv6t.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyb_4vv6t.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpyb_4vv6t.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyb_4vv6t.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyb_4vv6t.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyb_4vv6t.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && (x % (n^2) != 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc_qm5b1o.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc_qm5b1o.jl:20 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_qm5b1o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpc_qm5b1o.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc_qm5b1o.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_qm5b1o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpc_qm5b1o.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc_qm5b1o.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_qm5b1o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpc_qm5b1o.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc_qm5b1o.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_qm5b1o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpc_qm5b1o.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc_qm5b1o.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_qm5b1o.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpc_qm5b1o.jl:28\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc_qm5b1o.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pac"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_qm5b1o.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph_tkh_c5.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmph_tkh_c5.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph_tkh_c5.jl:19\ntest set: Test\
    \ Failed at /tmp/tmph_tkh_c5.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph_tkh_c5.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph_tkh_c5.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph_tkh_c5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    is_simple_power(x/n, n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7d3alu5n.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp7d3alu5n.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp7d3alu5n.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7d3alu5n.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7d3alu5n.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp7d3alu5n.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp7d3alu5n.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp7d3alu5n.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7d3alu5n.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7d3alu5n.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp7d3alu5n.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp7d3alu5n.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp7d3alu5n.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7d3alu5n.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7d3alu5n.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp7d3alu5n.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjap1gjm2.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpjap1gjm2.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpjap1gjm2.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjap1gjm2.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpjap1gjm2.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpjap1gjm2.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpjap1gjm2.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjap1gjm2.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpjap1gjm2.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpjap1gjm2.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpjap1gjm2.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpjap1gjm2.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpjap1gjm2.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpjap1gjm2.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpjap1gjm2.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x == n\n        return true\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpc3d3fp0l.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpc3d3fp0l.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpc3d3fp0l.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpc3d3fp0l.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc3d3fp0l.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpc3d3fp0l.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpc3d3fp0l.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpc3d3fp0l.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpc3d3fp0l.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc3d3fp0l.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpc3d3fp0l.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpc3d3fp0l.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpc3d3fp0l.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpc3d3fp0l.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpc3d3fp0l.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpc3d3fp0l.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && (x % (n^2) != 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt3_b4y3u.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt3_b4y3u.jl:20 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt3_b4y3u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpt3_b4y3u.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt3_b4y3u.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt3_b4y3u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpt3_b4y3u.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt3_b4y3u.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt3_b4y3u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpt3_b4y3u.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt3_b4y3u.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt3_b4y3u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpt3_b4y3u.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt3_b4y3u.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt3_b4y3u.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpt3_b4y3u.jl:28\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt3_b4y3u.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pac"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt3_b4y3u.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    is_simple_power(x/n, n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpjwgvnkzs.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpjwgvnkzs.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpjwgvnkzs.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpjwgvnkzs.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjwgvnkzs.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpjwgvnkzs.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpjwgvnkzs.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpjwgvnkzs.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpjwgvnkzs.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjwgvnkzs.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpjwgvnkzs.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpjwgvnkzs.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpjwgvnkzs.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpjwgvnkzs.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpjwgvnkzs.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpjwgvnkzs.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x < n\n        return false\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwy5dfogd.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpwy5dfogd.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpwy5dfogd.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwy5dfogd.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwy5dfogd.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpwy5dfogd.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpwy5dfogd.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpwy5dfogd.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpwy5dfogd.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwy5dfogd.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpwy5dfogd.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpwy5dfogd.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpwy5dfogd.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpwy5dfogd.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwy5dfogd.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpwy5dfogd.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpinjjpvqq.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpinjjpvqq.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpinjjpvqq.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpinjjpvqq.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpinjjpvqq.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpinjjpvqq.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpinjjpvqq.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpinjjpvqq.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpinjjpvqq.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpinjjpvqq.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpinjjpvqq.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpinjjpvqq.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpinjjpvqq.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpinjjpvqq.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpinjjpvqq.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpr7bb1jd3.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpr7bb1jd3.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpr7bb1jd3.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpr7bb1jd3.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr7bb1jd3.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpr7bb1jd3.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpr7bb1jd3.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpr7bb1jd3.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpr7bb1jd3.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr7bb1jd3.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpr7bb1jd3.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpr7bb1jd3.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpr7bb1jd3.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpr7bb1jd3.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpr7bb1jd3.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpr7bb1jd3.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwviiclhz.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwviiclhz.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwviiclhz.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpwviiclhz.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwviiclhz.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwviiclhz.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwviiclhz.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp6iimyq0j.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp6iimyq0j.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp6iimyq0j.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6iimyq0j.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6iimyq0j.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp6iimyq0j.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp6iimyq0j.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6iimyq0j.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6iimyq0j.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp6iimyq0j.jl:13\n   [3] macro expansion\n     @ /tmp/tmp6iimyq0j.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp6iimyq0j.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp6iimyq0j.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp6iimyq0j.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp6iimyq0j.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6iimyq0j.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ == n^(round(log(x)/log(n))))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x % n != 0\n        return false\n \
    \   end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpz72nq7vp.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpz72nq7vp.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpz72nq7vp.jl:19\\\
    n   [2] macro expansion\\n     @ /tmp/tmpz72nq7vp.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz72nq7vp.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpz72nq7vp.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpz72nq7vp.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpz72nq7vp.jl:19\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpz72nq7vp.jl:28 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz72nq7vp.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpz72nq7vp.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpz72nq7vp.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpz72nq7vp.jl:19\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpz72nq7vp.jl:29 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpz72nq7vp.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpz72nq7vp.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptmimfa_0.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptmimfa_0.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmimfa_0.jl:19\ntest set: Test\
    \ Failed at /tmp/tmptmimfa_0.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptmimfa_0.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptmimfa_0.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptmimfa_0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && (x / n % n == 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3tshl7k9.jl:25\n  Expression: candidate(24,\
    \ 2) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3tshl7k9.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3tshl7k9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3tshl7k9.jl:26\n  Expression: candidate(128, 4) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3tshl7k9.jl:26\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3tshl7k9.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp3tshl7k9.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3tshl7k9.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3tshl7k9.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    7     3     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 7 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3tshl7k9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpx1ylkd97.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpx1ylkd97.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpx1ylkd97.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpx1ylkd97.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx1ylkd97.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpx1ylkd97.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpx1ylkd97.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpx1ylkd97.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpx1ylkd97.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx1ylkd97.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpx1ylkd97.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpx1ylkd97.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpx1ylkd97.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpx1ylkd97.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpx1ylkd97.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpx1ylkd97.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr8oxc3ab.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr8oxc3ab.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr8oxc3ab.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpr8oxc3ab.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr8oxc3ab.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr8oxc3ab.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr8oxc3ab.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^Int(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpehck83bq.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpehck83bq.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpehck83bq.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpehck83bq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpehck83bq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpehck83bq.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpehck83bq.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpehck83bq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpehck83bq.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpehck83bq.jl:13\n   [3] macro expansion\n     @ /tmp/tmpehck83bq.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpehck83bq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpehck83bq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpehck83bq.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpehck83bq.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpehck83bq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkw27v9dc.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpkw27v9dc.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpkw27v9dc.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkw27v9dc.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpkw27v9dc.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpkw27v9dc.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpkw27v9dc.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkw27v9dc.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpkw27v9dc.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpkw27v9dc.jl:13\n   [3] macro expansion\n     @ /tmp/tmpkw27v9dc.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkw27v9dc.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpkw27v9dc.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpkw27v9dc.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpkw27v9dc.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkw27v9dc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyvvcusq3.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyvvcusq3.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyvvcusq3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpyvvcusq3.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyvvcusq3.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyvvcusq3.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyvvcusq3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x == n\n        return true\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo44h76rj.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpo44h76rj.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpo44h76rj.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpo44h76rj.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo44h76rj.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpo44h76rj.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpo44h76rj.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpo44h76rj.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpo44h76rj.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo44h76rj.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpo44h76rj.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpo44h76rj.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpo44h76rj.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpo44h76rj.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo44h76rj.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpo44h76rj.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    is_simple_power(x/n, n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpy8mezwb_.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpy8mezwb_.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpy8mezwb_.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpy8mezwb_.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy8mezwb_.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpy8mezwb_.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpy8mezwb_.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpy8mezwb_.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpy8mezwb_.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy8mezwb_.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpy8mezwb_.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpy8mezwb_.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpy8mezwb_.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpy8mezwb_.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpy8mezwb_.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpy8mezwb_.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptqz6l38q.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmptqz6l38q.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmptqz6l38q.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmptqz6l38q.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptqz6l38q.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmptqz6l38q.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmptqz6l38q.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmptqz6l38q.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmptqz6l38q.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptqz6l38q.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmptqz6l38q.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmptqz6l38q.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmptqz6l38q.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmptqz6l38q.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptqz6l38q.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmptqz6l38q.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && (x / n == 1)\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo2pn3iuq.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo2pn3iuq.jl:20 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo2pn3iuq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo2pn3iuq.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo2pn3iuq.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo2pn3iuq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo2pn3iuq.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo2pn3iuq.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo2pn3iuq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo2pn3iuq.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo2pn3iuq.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo2pn3iuq.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpo2pn3iuq.jl:29\n  Expression: candidate(1, 12) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo2pn3iuq.jl:29\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo2pn3iuq.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    5     5     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo2pn3iuq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpfs7r4zn5.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpfs7r4zn5.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpfs7r4zn5.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfs7r4zn5.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpfs7r4zn5.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpfs7r4zn5.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpfs7r4zn5.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfs7r4zn5.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpfs7r4zn5.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpfs7r4zn5.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpfs7r4zn5.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpfs7r4zn5.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpfs7r4zn5.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpfs7r4zn5.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpfs7r4zn5.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptkgxnlbp.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmptkgxnlbp.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmptkgxnlbp.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptkgxnlbp.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmptkgxnlbp.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmptkgxnlbp.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmptkgxnlbp.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptkgxnlbp.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmptkgxnlbp.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmptkgxnlbp.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmptkgxnlbp.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmptkgxnlbp.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmptkgxnlbp.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmptkgxnlbp.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmptkgxnlbp.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(int(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpribfcjo4.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  UndefVarError: int not\
    \ defined\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64, n::Int64)\\n    \
    \ @ Main /tmp/tmpribfcjo4.jl:13\\n   [2] macro expansion\\n     @ /tmp/tmpribfcjo4.jl:20\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpribfcjo4.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpribfcjo4.jl:21\\n  Test threw exception\\n  Expression:\
    \ candidate(143214, 16) == false\\n  UndefVarError: int not defined\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpribfcjo4.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpribfcjo4.jl:21 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpribfcjo4.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpribfcjo4.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  UndefVarError: int not defined\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpribfcjo4.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpribfcjo4.jl:22 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpribfcjo4.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpribfcjo4.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  UndefVarError: int not defined\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpribfcjo4.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpribfcjo4.jl:23 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpribfcjo4.jl:19\\ntest set:\
    \ Error During Test at /tm"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp233allz9.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp233allz9.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp233allz9.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp233allz9.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp233allz9.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp233allz9.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp233allz9.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp233allz9.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp233allz9.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp233allz9.jl:13\n   [3] macro expansion\n     @ /tmp/tmp233allz9.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp233allz9.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp233allz9.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp233allz9.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp233allz9.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp233allz9.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x\
    \ / n, n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo2i_8py0.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpo2i_8py0.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpo2i_8py0.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpo2i_8py0.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo2i_8py0.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpo2i_8py0.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpo2i_8py0.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpo2i_8py0.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpo2i_8py0.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo2i_8py0.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpo2i_8py0.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpo2i_8py0.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpo2i_8py0.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpo2i_8py0.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo2i_8py0.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpo2i_8py0.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp9207yjlo.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp9207yjlo.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp9207yjlo.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmp9207yjlo.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9207yjlo.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp9207yjlo.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp9207yjlo.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp9207yjlo.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp9207yjlo.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9207yjlo.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp9207yjlo.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp9207yjlo.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp9207yjlo.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp9207yjlo.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp9207yjlo.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp9207yjlo.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2_3dv0up.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp2_3dv0up.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp2_3dv0up.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2_3dv0up.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp2_3dv0up.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp2_3dv0up.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp2_3dv0up.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2_3dv0up.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp2_3dv0up.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp2_3dv0up.jl:13\n   [3] macro expansion\n     @ /tmp/tmp2_3dv0up.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2_3dv0up.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp2_3dv0up.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp2_3dv0up.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp2_3dv0up.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2_3dv0up.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4q3y60iw.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp4q3y60iw.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp4q3y60iw.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4q3y60iw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp4q3y60iw.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp4q3y60iw.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp4q3y60iw.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4q3y60iw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp4q3y60iw.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp4q3y60iw.jl:13\n   [3] macro expansion\n     @ /tmp/tmp4q3y60iw.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4q3y60iw.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp4q3y60iw.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp4q3y60iw.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp4q3y60iw.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4q3y60iw.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppbtz0ro3.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppbtz0ro3.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppbtz0ro3.jl:19\ntest set: Test\
    \ Failed at /tmp/tmppbtz0ro3.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmppbtz0ro3.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppbtz0ro3.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppbtz0ro3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && (x % (n^2) != 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvvp0w2wy.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvvp0w2wy.jl:20 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvp0w2wy.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvvp0w2wy.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvvp0w2wy.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvp0w2wy.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvvp0w2wy.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvvp0w2wy.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvp0w2wy.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvvp0w2wy.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvvp0w2wy.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvp0w2wy.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvvp0w2wy.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvvp0w2wy.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvvp0w2wy.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpvvp0w2wy.jl:28\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvvp0w2wy.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pac"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvvp0w2wy.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgeey_s8o.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpgeey_s8o.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpgeey_s8o.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgeey_s8o.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgeey_s8o.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpgeey_s8o.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpgeey_s8o.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpgeey_s8o.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpgeey_s8o.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgeey_s8o.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpgeey_s8o.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpgeey_s8o.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpgeey_s8o.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpgeey_s8o.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgeey_s8o.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpgeey_s8o.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpevv_d7vq.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpevv_d7vq.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpevv_d7vq.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpevv_d7vq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpevv_d7vq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpevv_d7vq.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpevv_d7vq.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpevv_d7vq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpevv_d7vq.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpevv_d7vq.jl:13\n   [3] macro expansion\n     @ /tmp/tmpevv_d7vq.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpevv_d7vq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpevv_d7vq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpevv_d7vq.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpevv_d7vq.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpevv_d7vq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoz105wil.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpoz105wil.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpoz105wil.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoz105wil.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpoz105wil.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpoz105wil.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpoz105wil.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoz105wil.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpoz105wil.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpoz105wil.jl:13\n   [3] macro expansion\n     @ /tmp/tmpoz105wil.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpoz105wil.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpoz105wil.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpoz105wil.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpoz105wil.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoz105wil.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    is_simple_power(x/n, n)\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpm0lfktwx.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpm0lfktwx.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpm0lfktwx.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpm0lfktwx.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm0lfktwx.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpm0lfktwx.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpm0lfktwx.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpm0lfktwx.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpm0lfktwx.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm0lfktwx.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpm0lfktwx.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpm0lfktwx.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpm0lfktwx.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpm0lfktwx.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpm0lfktwx.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpm0lfktwx.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpl55nkp0y.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpl55nkp0y.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpl55nkp0y.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl55nkp0y.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpl55nkp0y.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpl55nkp0y.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpl55nkp0y.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl55nkp0y.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpl55nkp0y.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpl55nkp0y.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpl55nkp0y.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpl55nkp0y.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpl55nkp0y.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpl55nkp0y.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpl55nkp0y.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyonnt9ok.jl:26\n  Expression: candidate(128,\
    \ 4) == false\n   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyonnt9ok.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyonnt9ok.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpyonnt9ok.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyonnt9ok.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyonnt9ok.jl:19\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    8     2     10\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 8 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyonnt9ok.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmps1_mhyso.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmps1_mhyso.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmps1_mhyso.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps1_mhyso.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmps1_mhyso.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmps1_mhyso.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmps1_mhyso.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps1_mhyso.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmps1_mhyso.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmps1_mhyso.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmps1_mhyso.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmps1_mhyso.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmps1_mhyso.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmps1_mhyso.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmps1_mhyso.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmps1_mhyso.jl:17\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^Int(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwl26ffoi.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpwl26ffoi.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpwl26ffoi.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwl26ffoi.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpwl26ffoi.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpwl26ffoi.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpwl26ffoi.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwl26ffoi.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpwl26ffoi.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpwl26ffoi.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpwl26ffoi.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwl26ffoi.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpwl26ffoi.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpwl26ffoi.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpwl26ffoi.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpmffbe0gc.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpmffbe0gc.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpmffbe0gc.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpmffbe0gc.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmffbe0gc.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpmffbe0gc.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpmffbe0gc.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpmffbe0gc.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpmffbe0gc.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmffbe0gc.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpmffbe0gc.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpmffbe0gc.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpmffbe0gc.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpmffbe0gc.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpmffbe0gc.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpmffbe0gc.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x == n\n        return true\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpg8pcdlm5.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpg8pcdlm5.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpg8pcdlm5.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpg8pcdlm5.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg8pcdlm5.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpg8pcdlm5.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpg8pcdlm5.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpg8pcdlm5.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpg8pcdlm5.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg8pcdlm5.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpg8pcdlm5.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpg8pcdlm5.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpg8pcdlm5.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpg8pcdlm5.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpg8pcdlm5.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpg8pcdlm5.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptt_on68r.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmptt_on68r.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmptt_on68r.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptt_on68r.jl:19\ntest set:\
    \ Error During Test at /tmp/tmptt_on68r.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmptt_on68r.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmptt_on68r.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptt_on68r.jl:19\ntest set:\
    \ Error During Test at /tmp/tmptt_on68r.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmptt_on68r.jl:13\n   [3] macro expansion\n     @ /tmp/tmptt_on68r.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmptt_on68r.jl:19\ntest set:\
    \ Error During Test at /tmp/tmptt_on68r.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmptt_on68r.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmptt_on68r.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptt_on68r.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^Int(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnb7u_92k.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpnb7u_92k.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpnb7u_92k.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnb7u_92k.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnb7u_92k.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpnb7u_92k.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpnb7u_92k.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnb7u_92k.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnb7u_92k.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpnb7u_92k.jl:13\n   [3] macro expansion\n     @ /tmp/tmpnb7u_92k.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpnb7u_92k.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpnb7u_92k.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpnb7u_92k.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpnb7u_92k.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnb7u_92k.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^round(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x == n\n        return true\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpap3g4wdf.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpap3g4wdf.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpap3g4wdf.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpap3g4wdf.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpap3g4wdf.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpap3g4wdf.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpap3g4wdf.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpap3g4wdf.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpap3g4wdf.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpap3g4wdf.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpap3g4wdf.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpap3g4wdf.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpap3g4wdf.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpap3g4wdf.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpap3g4wdf.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpap3g4wdf.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ % n == 0) && (x % (n^2) != 0)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxdxf2k6x.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxdxf2k6x.jl:20 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdxf2k6x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxdxf2k6x.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdxf2k6x.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdxf2k6x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxdxf2k6x.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdxf2k6x.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdxf2k6x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxdxf2k6x.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdxf2k6x.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdxf2k6x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxdxf2k6x.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdxf2k6x.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxdxf2k6x.jl:19\ntest set: Test\
    \ Failed at /tmp/tmpxdxf2k6x.jl:28\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxdxf2k6x.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pac"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxdxf2k6x.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n\n        return true\n    elseif x % n != 0\n        return false\n    else\n\
    \        return is_simple_power(x/n, n)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpeagbgntk.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpeagbgntk.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpeagbgntk.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpeagbgntk.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpeagbgntk.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpeagbgntk.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpeagbgntk.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpeagbgntk.jl:18\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpeagbgntk.jl:28 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpeagbgntk.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpeagbgntk.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpeagbgntk.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpeagbgntk.jl:18\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpeagbgntk.jl:29 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpeagbgntk.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpeagbgntk.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpgtt92ai4.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpgtt92ai4.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpgtt92ai4.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpgtt92ai4.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgtt92ai4.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpgtt92ai4.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpgtt92ai4.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpgtt92ai4.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpgtt92ai4.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgtt92ai4.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpgtt92ai4.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpgtt92ai4.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpgtt92ai4.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpgtt92ai4.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpgtt92ai4.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpgtt92ai4.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpvwbq1sot.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpvwbq1sot.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpvwbq1sot.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpvwbq1sot.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvwbq1sot.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpvwbq1sot.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpvwbq1sot.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpvwbq1sot.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpvwbq1sot.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvwbq1sot.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpvwbq1sot.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpvwbq1sot.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpvwbq1sot.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpvwbq1sot.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpvwbq1sot.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpvwbq1sot.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpcmp364eq.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpcmp364eq.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpcmp364eq.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcmp364eq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpcmp364eq.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpcmp364eq.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpcmp364eq.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcmp364eq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpcmp364eq.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpcmp364eq.jl:13\n   [3] macro expansion\n     @ /tmp/tmpcmp364eq.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpcmp364eq.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpcmp364eq.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpcmp364eq.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpcmp364eq.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcmp364eq.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x < n\n        return false\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmptug7wxsn.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmptug7wxsn.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmptug7wxsn.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmptug7wxsn.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptug7wxsn.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmptug7wxsn.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmptug7wxsn.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmptug7wxsn.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmptug7wxsn.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptug7wxsn.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmptug7wxsn.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmptug7wxsn.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmptug7wxsn.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmptug7wxsn.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmptug7wxsn.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmptug7wxsn.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxg1zd067.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpxg1zd067.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpxg1zd067.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxg1zd067.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxg1zd067.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpxg1zd067.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpxg1zd067.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxg1zd067.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxg1zd067.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpxg1zd067.jl:13\n   [3] macro expansion\n     @ /tmp/tmpxg1zd067.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpxg1zd067.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpxg1zd067.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpxg1zd067.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpxg1zd067.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxg1zd067.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^round(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcc647pum.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpcc647pum.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpcc647pum.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcc647pum.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpcc647pum.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpcc647pum.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpcc647pum.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcc647pum.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpcc647pum.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpcc647pum.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpcc647pum.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpcc647pum.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpcc647pum.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpcc647pum.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpcc647pum.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp61vcqak3.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp61vcqak3.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp61vcqak3.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61vcqak3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp61vcqak3.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp61vcqak3.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp61vcqak3.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61vcqak3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp61vcqak3.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp61vcqak3.jl:13\n   [3] macro expansion\n     @ /tmp/tmp61vcqak3.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp61vcqak3.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp61vcqak3.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp61vcqak3.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp61vcqak3.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp61vcqak3.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x == n\n        return true\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpbdryd87p.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpbdryd87p.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpbdryd87p.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpbdryd87p.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbdryd87p.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpbdryd87p.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpbdryd87p.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpbdryd87p.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpbdryd87p.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbdryd87p.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpbdryd87p.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpbdryd87p.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpbdryd87p.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpbdryd87p.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpbdryd87p.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpbdryd87p.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n\n        return true\n    elseif x % n != 0\n        return false\n    else\n\
    \        return is_simple_power(x/n, n)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf7stmrnq.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpf7stmrnq.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpf7stmrnq.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpf7stmrnq.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf7stmrnq.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpf7stmrnq.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpf7stmrnq.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpf7stmrnq.jl:18\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpf7stmrnq.jl:28 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf7stmrnq.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpf7stmrnq.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpf7stmrnq.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpf7stmrnq.jl:18\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpf7stmrnq.jl:29 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf7stmrnq.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpf7stmrnq.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp5wx8j52d.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp5wx8j52d.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp5wx8j52d.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5wx8j52d.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp5wx8j52d.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp5wx8j52d.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp5wx8j52d.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5wx8j52d.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp5wx8j52d.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp5wx8j52d.jl:13\n   [3] macro expansion\n     @ /tmp/tmp5wx8j52d.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp5wx8j52d.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp5wx8j52d.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp5wx8j52d.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp5wx8j52d.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5wx8j52d.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvoruxno0.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpvoruxno0.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpvoruxno0.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvoruxno0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpvoruxno0.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpvoruxno0.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpvoruxno0.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvoruxno0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpvoruxno0.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpvoruxno0.jl:13\n   [3] macro expansion\n     @ /tmp/tmpvoruxno0.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpvoruxno0.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpvoruxno0.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpvoruxno0.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpvoruxno0.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvoruxno0.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7yeiz2b7.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp7yeiz2b7.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp7yeiz2b7.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7yeiz2b7.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7yeiz2b7.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp7yeiz2b7.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp7yeiz2b7.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp7yeiz2b7.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7yeiz2b7.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7yeiz2b7.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp7yeiz2b7.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp7yeiz2b7.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp7yeiz2b7.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7yeiz2b7.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7yeiz2b7.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp7yeiz2b7.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(floor(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkdkxay0c.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpkdkxay0c.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpkdkxay0c.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkdkxay0c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpkdkxay0c.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpkdkxay0c.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpkdkxay0c.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkdkxay0c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpkdkxay0c.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpkdkxay0c.jl:13\n   [3] macro expansion\n     @ /tmp/tmpkdkxay0c.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpkdkxay0c.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpkdkxay0c.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpkdkxay0c.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpkdkxay0c.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkdkxay0c.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsystl2ee.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpsystl2ee.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpsystl2ee.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsystl2ee.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsystl2ee.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpsystl2ee.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpsystl2ee.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsystl2ee.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsystl2ee.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpsystl2ee.jl:13\n   [3] macro expansion\n     @ /tmp/tmpsystl2ee.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpsystl2ee.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpsystl2ee.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpsystl2ee.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpsystl2ee.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsystl2ee.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpb5hr8_gg.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpb5hr8_gg.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpb5hr8_gg.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpb5hr8_gg.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb5hr8_gg.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpb5hr8_gg.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpb5hr8_gg.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpb5hr8_gg.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpb5hr8_gg.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb5hr8_gg.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpb5hr8_gg.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpb5hr8_gg.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpb5hr8_gg.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpb5hr8_gg.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpb5hr8_gg.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpb5hr8_gg.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x < n\n        return false\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpewo050ap.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpewo050ap.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpewo050ap.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpewo050ap.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpewo050ap.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpewo050ap.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpewo050ap.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpewo050ap.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpewo050ap.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpewo050ap.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpewo050ap.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpewo050ap.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpewo050ap.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpewo050ap.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpewo050ap.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpewo050ap.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpg9vbqomc.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpg9vbqomc.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpg9vbqomc.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg9vbqomc.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpg9vbqomc.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpg9vbqomc.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpg9vbqomc.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg9vbqomc.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpg9vbqomc.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpg9vbqomc.jl:13\n   [3] macro expansion\n     @ /tmp/tmpg9vbqomc.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpg9vbqomc.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpg9vbqomc.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpg9vbqomc.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpg9vbqomc.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg9vbqomc.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk09mq21v.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpk09mq21v.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpk09mq21v.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk09mq21v.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpk09mq21v.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpk09mq21v.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpk09mq21v.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk09mq21v.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpk09mq21v.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpk09mq21v.jl:13\n   [3] macro expansion\n     @ /tmp/tmpk09mq21v.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpk09mq21v.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpk09mq21v.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpk09mq21v.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpk09mq21v.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk09mq21v.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp1mz80nni.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp1mz80nni.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp1mz80nni.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmp1mz80nni.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1mz80nni.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1mz80nni.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp1mz80nni.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp1mz80nni.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp1mz80nni.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1mz80nni.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1mz80nni.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp1mz80nni.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp1mz80nni.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp1mz80nni.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp1mz80nni.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp1mz80nni.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^round(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return (x\
    \ == n^(Int64(log(x)/log(n))))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpfxr302jb.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpfxr302jb.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpfxr302jb.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfxr302jb.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpfxr302jb.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpfxr302jb.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpfxr302jb.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfxr302jb.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpfxr302jb.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpfxr302jb.jl:13\n   [3] macro expansion\n     @ /tmp/tmpfxr302jb.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpfxr302jb.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpfxr302jb.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpfxr302jb.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpfxr302jb.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfxr302jb.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdfz8hgr_.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpdfz8hgr_.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpdfz8hgr_.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdfz8hgr_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpdfz8hgr_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpdfz8hgr_.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpdfz8hgr_.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdfz8hgr_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpdfz8hgr_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpdfz8hgr_.jl:13\n   [3] macro expansion\n     @ /tmp/tmpdfz8hgr_.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpdfz8hgr_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpdfz8hgr_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpdfz8hgr_.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpdfz8hgr_.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdfz8hgr_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x==1\n\
    \        return true\n    elseif n==1\n        return false\n    elseif x%n==0\n\
    \        return is_simple_power(x/n, n)\n    else\n        return false\n    end\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmplhszq8g_.jl:28\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmplhszq8g_.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmplhszq8g_.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmplhszq8g_.jl:28 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplhszq8g_.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmplhszq8g_.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmplhszq8g_.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmplhszq8g_.jl:18\\n   [2] macro expansion\\n \
    \    @ /tmp/tmplhszq8g_.jl:30 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplhszq8g_.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmplhszq8g_.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmplhszq8g_.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmplhszq8g_.jl:18\\n   [2] macro expansion\\n \
    \    @ /tmp/tmplhszq8g_.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmplhszq8g_.jl:27\\ntest set:\
    \ Error During Test at /tmp/tmplhszq8g_.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x < n\n        return false\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp5v92ev51.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp5v92ev51.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp5v92ev51.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmp5v92ev51.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5v92ev51.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp5v92ev51.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp5v92ev51.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp5v92ev51.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp5v92ev51.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5v92ev51.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp5v92ev51.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp5v92ev51.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp5v92ev51.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp5v92ev51.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp5v92ev51.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmp5v92ev51.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3txwsl55.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp3txwsl55.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp3txwsl55.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3txwsl55.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3txwsl55.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp3txwsl55.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp3txwsl55.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3txwsl55.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3txwsl55.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp3txwsl55.jl:13\n   [3] macro expansion\n     @ /tmp/tmp3txwsl55.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp3txwsl55.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp3txwsl55.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp3txwsl55.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp3txwsl55.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3txwsl55.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4tyi6i_k.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp4tyi6i_k.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp4tyi6i_k.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4tyi6i_k.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp4tyi6i_k.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp4tyi6i_k.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp4tyi6i_k.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4tyi6i_k.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp4tyi6i_k.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp4tyi6i_k.jl:13\n   [3] macro expansion\n     @ /tmp/tmp4tyi6i_k.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp4tyi6i_k.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp4tyi6i_k.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp4tyi6i_k.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp4tyi6i_k.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4tyi6i_k.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^Int(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzfdh4g5r.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpzfdh4g5r.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpzfdh4g5r.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzfdh4g5r.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpzfdh4g5r.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpzfdh4g5r.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpzfdh4g5r.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzfdh4g5r.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpzfdh4g5r.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpzfdh4g5r.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpzfdh4g5r.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzfdh4g5r.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpzfdh4g5r.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpzfdh4g5r.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpzfdh4g5r.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\\nin expression starting at /tmp/tmpzfdh4g5r.jl:17\\n'"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^Int(log(x)/log(n))\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\
    \t@test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t\
    @test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16,\
    \ 4) == true)\n\t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) ==\
    \ false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1, 1) == true)\n\
    \t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo65qiyb_.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpo65qiyb_.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpo65qiyb_.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo65qiyb_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpo65qiyb_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpo65qiyb_.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpo65qiyb_.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo65qiyb_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpo65qiyb_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpo65qiyb_.jl:13\n   [3] macro expansion\n     @ /tmp/tmpo65qiyb_.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo65qiyb_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpo65qiyb_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpo65qiyb_.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpo65qiyb_.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo65qiyb_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzz9zyoe5.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpzz9zyoe5.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpzz9zyoe5.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzz9zyoe5.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpzz9zyoe5.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpzz9zyoe5.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpzz9zyoe5.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzz9zyoe5.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpzz9zyoe5.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpzz9zyoe5.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpzz9zyoe5.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpzz9zyoe5.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpzz9zyoe5.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpzz9zyoe5.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpzz9zyoe5.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp8baa_l2t.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp8baa_l2t.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp8baa_l2t.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmp8baa_l2t.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8baa_l2t.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp8baa_l2t.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp8baa_l2t.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp8baa_l2t.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp8baa_l2t.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8baa_l2t.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp8baa_l2t.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp8baa_l2t.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp8baa_l2t.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp8baa_l2t.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp8baa_l2t.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp8baa_l2t.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp193on7c5.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp193on7c5.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp193on7c5.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp193on7c5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp193on7c5.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp193on7c5.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp193on7c5.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp193on7c5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp193on7c5.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp193on7c5.jl:13\n   [3] macro expansion\n     @ /tmp/tmp193on7c5.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp193on7c5.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp193on7c5.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp193on7c5.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp193on7c5.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp193on7c5.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ % n == 0 && x % (n^2) != 0\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp36kx43z4.jl:20\n  Expression: candidate(16,\
    \ 2) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp36kx43z4.jl:20 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36kx43z4.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp36kx43z4.jl:22\n  Expression: candidate(4, 2) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp36kx43z4.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36kx43z4.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp36kx43z4.jl:23\n  Expression: candidate(9, 3) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp36kx43z4.jl:23\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36kx43z4.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp36kx43z4.jl:24\n  Expression: candidate(16, 4) == true\n \
    \  Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp36kx43z4.jl:24\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36kx43z4.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp36kx43z4.jl:27\n  Expression: candidate(12, 6) == false\n\
    \   Evaluated: true == false\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp36kx43z4.jl:27\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp36kx43z4.jl:19\ntest set: Test\
    \ Failed at /tmp/tmp36kx43z4.jl:28\n  Expression: candidate(1, 1) == true\n  \
    \ Evaluated: false == true\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp36kx43z4.jl:28\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/pac"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 7 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp36kx43z4.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwk71gtv1.jl:21\\n  Test threw\
    \ exception\\n  Expression: candidate(143214, 16) == false\\n  InexactError: Int64(4.281953251437325)\\\
    n  Stacktrace:\\n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpwk71gtv1.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpwk71gtv1.jl:21 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwk71gtv1.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpwk71gtv1.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(24, 2) == false\\n  InexactError: Int64(4.584962500721157)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpwk71gtv1.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpwk71gtv1.jl:25 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwk71gtv1.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpwk71gtv1.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(128, 4) == false\\n  InexactError: Int64(3.5)\\n  Stacktrace:\\n \
    \  [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpwk71gtv1.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpwk71gtv1.jl:26 [inlined]\\n   [4] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [5] top-level scope\\n     @ /tmp/tmpwk71gtv1.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpwk71gtv1.jl:27\\n  Test threw exception\\n  Expression:\
    \ candidate(12, 6) == false\\n  InexactError: Int64(1.3868528072345416)\\n  Stacktrace:\\\
    n   [1] Int64\\n     @ ./float.jl:723 [inlined]\\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpwk71gtv1.jl:13\\n   [3] macro expansion\\n \
    \    @ /tmp/tmpwk71gtv1.jl:27 [inlined]\\n   [4] mac"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2pv9rzfh.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp2pv9rzfh.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp2pv9rzfh.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2pv9rzfh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp2pv9rzfh.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp2pv9rzfh.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp2pv9rzfh.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2pv9rzfh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp2pv9rzfh.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmp2pv9rzfh.jl:13\n   [3] macro expansion\n     @ /tmp/tmp2pv9rzfh.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmp2pv9rzfh.jl:19\ntest set:\
    \ Error During Test at /tmp/tmp2pv9rzfh.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmp2pv9rzfh.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmp2pv9rzfh.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2pv9rzfh.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbjlzhgg_.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpbjlzhgg_.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpbjlzhgg_.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbjlzhgg_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbjlzhgg_.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpbjlzhgg_.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpbjlzhgg_.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbjlzhgg_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbjlzhgg_.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpbjlzhgg_.jl:13\n   [3] macro expansion\n     @ /tmp/tmpbjlzhgg_.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpbjlzhgg_.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpbjlzhgg_.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpbjlzhgg_.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpbjlzhgg_.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbjlzhgg_.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpo01kwtjj.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpo01kwtjj.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpo01kwtjj.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo01kwtjj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpo01kwtjj.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpo01kwtjj.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpo01kwtjj.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo01kwtjj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpo01kwtjj.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpo01kwtjj.jl:13\n   [3] macro expansion\n     @ /tmp/tmpo01kwtjj.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpo01kwtjj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpo01kwtjj.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpo01kwtjj.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpo01kwtjj.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo01kwtjj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpwi_rbqe9.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpwi_rbqe9.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpwi_rbqe9.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmpwi_rbqe9.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwi_rbqe9.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpwi_rbqe9.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpwi_rbqe9.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpwi_rbqe9.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpwi_rbqe9.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwi_rbqe9.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpwi_rbqe9.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpwi_rbqe9.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpwi_rbqe9.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpwi_rbqe9.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpwi_rbqe9.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmpwi_rbqe9.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if x == n\n        return true\n    end\n\
    \    if x % n != 0\n        return false\n    end\n    return is_simple_power(x/n,\
    \ n)\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16,\
    \ 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2)\
    \ == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp7kvnvq0x.jl:29\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmp7kvnvq0x.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmp7kvnvq0x.jl:22\\\
    n   [2] macro expansion\\n     @ /tmp/tmp7kvnvq0x.jl:29 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7kvnvq0x.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp7kvnvq0x.jl:31\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp7kvnvq0x.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp7kvnvq0x.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7kvnvq0x.jl:31 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7kvnvq0x.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp7kvnvq0x.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmp7kvnvq0x.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmp7kvnvq0x.jl:22\\n   [2] macro expansion\\n \
    \    @ /tmp/tmp7kvnvq0x.jl:32 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp7kvnvq0x.jl:28\\ntest set:\
    \ Error During Test at /tmp/tmp7kvnvq0x.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ % n == 0 && is_simple_power(x/n, n)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpdzaiun4u.jl:20\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpdzaiun4u.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpdzaiun4u.jl:13\\\
    n   [2] macro expansion\\n     @ /tmp/tmpdzaiun4u.jl:20 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdzaiun4u.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpdzaiun4u.jl:22\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpdzaiun4u.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpdzaiun4u.jl:13\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpdzaiun4u.jl:22 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdzaiun4u.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpdzaiun4u.jl:23\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpdzaiun4u.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpdzaiun4u.jl:13\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpdzaiun4u.jl:23 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpdzaiun4u.jl:19\\ntest set:\
    \ Error During Test at /tmp/tmpdzaiun4u.jl:24\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ 1\n        return true\n    end\n    if n == 1\n        return false\n    end\n\
    \    if x == n\n        return true\n    end\n    if x % n != 0\n        return\
    \ false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpf7bq5g2r.jl:32\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpf7bq5g2r.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpf7bq5g2r.jl:25\\\
    n   [2] macro expansion\\n     @ /tmp/tmpf7bq5g2r.jl:32 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf7bq5g2r.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpf7bq5g2r.jl:34\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpf7bq5g2r.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpf7bq5g2r.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpf7bq5g2r.jl:34 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf7bq5g2r.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpf7bq5g2r.jl:35\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpf7bq5g2r.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpf7bq5g2r.jl:25\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpf7bq5g2r.jl:35 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpf7bq5g2r.jl:31\\ntest set:\
    \ Error During Test at /tmp/tmpf7bq5g2r.jl:36\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: "b'ERROR: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if n ==\
    \ 1\n        return true\n    end\n    if x == 1\n        return true\n    end\n\
    \    if x == n\n        return true\n    end\n    if x == 0\n        return false\n\
    \    end\n    if x < n\n        return false\n    end\n    if x % n != 0\n   \
    \     return false\n    end\n    return is_simple_power(x/n, n)\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) ==\
    \ true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\
    \t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24,\
    \ 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6)\
    \ == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\n\
    end\n"
  stdout: "b'test set: Error During Test at /tmp/tmpcid_l2en.jl:38\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpcid_l2en.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpcid_l2en.jl:31\\\
    n   [2] macro expansion\\n     @ /tmp/tmpcid_l2en.jl:38 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcid_l2en.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpcid_l2en.jl:40\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpcid_l2en.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpcid_l2en.jl:31\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpcid_l2en.jl:40 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcid_l2en.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpcid_l2en.jl:41\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpcid_l2en.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpcid_l2en.jl:31\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpcid_l2en.jl:41 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpcid_l2en.jl:37\\ntest set:\
    \ Error During Test at /tmp/tmpcid_l2en.jl:42\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: "b'ERROR: LoadError: '"
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(round(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(Int64(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpao923pdj.jl:21\n  Test threw exception\n\
    \  Expression: candidate(143214, 16) == false\n  InexactError: Int64(4.281953251437325)\n\
    \  Stacktrace:\n   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpao923pdj.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpao923pdj.jl:21 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpao923pdj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpao923pdj.jl:25\n  Test threw exception\n  Expression:\
    \ candidate(24, 2) == false\n  InexactError: Int64(4.584962500721157)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpao923pdj.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpao923pdj.jl:25 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpao923pdj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpao923pdj.jl:26\n  Test threw exception\n  Expression:\
    \ candidate(128, 4) == false\n  InexactError: Int64(3.5)\n  Stacktrace:\n   [1]\
    \ Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64, n::Int64)\n\
    \     @ Main /tmp/tmpao923pdj.jl:13\n   [3] macro expansion\n     @ /tmp/tmpao923pdj.jl:26\
    \ [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [5] top-level scope\n     @ /tmp/tmpao923pdj.jl:19\ntest set:\
    \ Error During Test at /tmp/tmpao923pdj.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(12, 6) == false\n  InexactError: Int64(1.3868528072345416)\n  Stacktrace:\n\
    \   [1] Int64\n     @ ./float.jl:723 [inlined]\n   [2] is_simple_power(x::Int64,\
    \ n::Int64)\n     @ Main /tmp/tmpao923pdj.jl:13\n   [3] macro expansion\n    \
    \ @ /tmp/tmpao923pdj.jl:27 [inlined]\n   [4] macro expansion\n     @ /buildworker/worker/package_linux64/bu"
  stderr: "ERROR: LoadError: Some tests did not pass: 5 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpao923pdj.jl:17\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n\n        return true\n    elseif x % n != 0\n        return false\n    else\n\
    \        return is_simple_power(x/n, n)\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t\
    @test(candidate(143214, 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9,\
    \ 3) == true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) ==\
    \ false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\
    \t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpk_lw8uwh.jl:26\\n  Test threw\
    \ exception\\n  Expression: candidate(16, 2) == true\\n  MethodError: no method\
    \ matching is_simple_power(::Float64, ::Int64)\\n  Closest candidates are:\\n\
    \    is_simple_power(!Matched::Int64, ::Int64) at /tmp/tmpk_lw8uwh.jl:12\\n  Stacktrace:\\\
    n   [1] is_simple_power(x::Int64, n::Int64)\\n     @ Main /tmp/tmpk_lw8uwh.jl:18\\\
    n   [2] macro expansion\\n     @ /tmp/tmpk_lw8uwh.jl:26 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk_lw8uwh.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpk_lw8uwh.jl:28\\n  Test threw exception\\n  Expression:\
    \ candidate(4, 2) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpk_lw8uwh.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpk_lw8uwh.jl:18\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpk_lw8uwh.jl:28 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk_lw8uwh.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpk_lw8uwh.jl:29\\n  Test threw exception\\n  Expression:\
    \ candidate(9, 3) == true\\n  MethodError: no method matching is_simple_power(::Float64,\
    \ ::Int64)\\n  Closest candidates are:\\n    is_simple_power(!Matched::Int64,\
    \ ::Int64) at /tmp/tmpk_lw8uwh.jl:12\\n  Stacktrace:\\n   [1] is_simple_power(x::Int64,\
    \ n::Int64)\\n     @ Main /tmp/tmpk_lw8uwh.jl:18\\n   [2] macro expansion\\n \
    \    @ /tmp/tmpk_lw8uwh.jl:29 [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpk_lw8uwh.jl:25\\ntest set:\
    \ Error During Test at /tmp/tmpk_lw8uwh.jl:30\\n  Test threw exception\\n  Expression:\
    \ candidate(16, 4) == true\\n  MethodErro"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    return x\
    \ == n^(floor(log(x)/log(n)))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = is_simple_power;\n\t@test(candidate(16, 2) == true)\n\t@test(candidate(143214,\
    \ 16) == false)\n\t@test(candidate(4, 2) == true)\n\t@test(candidate(9, 3) ==\
    \ true)\n\t@test(candidate(16, 4) == true)\n\t@test(candidate(24, 2) == false)\n\
    \t@test(candidate(128, 4) == false)\n\t@test(candidate(12, 6) == false)\n\t@test(candidate(1,\
    \ 1) == true)\n\t@test(candidate(1, 12) == true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
- program: "\"\"\"Your task is to write a function that returns true if a number x\
    \ is a simple\n    power of n and false in other cases.\n    x is a simple power\
    \ of n if n**int=x\n    For example:\n    is_simple_power(1, 4) => true\n    is_simple_power(2,\
    \ 2) => true\n    is_simple_power(8, 2) => true\n    is_simple_power(3, 2) =>\
    \ false\n    is_simple_power(3, 1) => false\n    is_simple_power(5, 3) => false\n\
    \    \"\"\"\nfunction is_simple_power(x::Int64, n::Int64)::Bool \n    if x ==\
    \ n^(round(log(x)/log(n)))\n        return true\n    else\n        return false\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = is_simple_power;\n\t\
    @test(candidate(16, 2) == true)\n\t@test(candidate(143214, 16) == false)\n\t@test(candidate(4,\
    \ 2) == true)\n\t@test(candidate(9, 3) == true)\n\t@test(candidate(16, 4) == true)\n\
    \t@test(candidate(24, 2) == false)\n\t@test(candidate(128, 4) == false)\n\t@test(candidate(12,\
    \ 6) == false)\n\t@test(candidate(1, 1) == true)\n\t@test(candidate(1, 12) ==\
    \ true)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |   10     10\n"
  exit_code: 0
  status: OK
