name: HumanEval_54_same_chars
language: julia
results:
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfrxyp8ln.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfrxyp8ln.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfrxyp8ln.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfrxyp8ln.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpfrxyp8ln.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfrxyp8ln.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfrxyp8ln.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfrxyp8ln.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfrxyp8ln.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfrxyp8ln.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if !(s0[i]\
    \ in s1)\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt88dbzml.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpt88dbzml.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt88dbzml.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt88dbzml.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpt88dbzml.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt88dbzml.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpt88dbzml.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt88dbzml.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt88dbzml.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt88dbzml.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps49841t1.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps49841t1.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps49841t1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmps49841t1.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmps49841t1.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps49841t1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmps49841t1.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps49841t1.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps49841t1.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps49841t1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnt28g1r1.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpnt28g1r1.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnt28g1r1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnt28g1r1.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpnt28g1r1.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnt28g1r1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnt28g1r1.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnt28g1r1.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnt28g1r1.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnt28g1r1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp973r8z7m.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp973r8z7m.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp973r8z7m.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp973r8z7m.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp973r8z7m.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp973r8z7m.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp973r8z7m.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp973r8z7m.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp973r8z7m.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp973r8z7m.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxxabixz1.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxxabixz1.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxabixz1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxxabixz1.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpxxabixz1.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxabixz1.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxxabixz1.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxxabixz1.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxxabixz1.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxxabixz1.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmwh4ewo7.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmwh4ewo7.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwh4ewo7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmwh4ewo7.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpmwh4ewo7.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwh4ewo7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmwh4ewo7.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmwh4ewo7.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwh4ewo7.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwh4ewo7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptky94oci.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptky94oci.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptky94oci.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptky94oci.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmptky94oci.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptky94oci.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptky94oci.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptky94oci.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptky94oci.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptky94oci.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu4z0581p.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpu4z0581p.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu4z0581p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpu4z0581p.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpu4z0581p.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu4z0581p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpu4z0581p.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpu4z0581p.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu4z0581p.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu4z0581p.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa8t145k6.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa8t145k6.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa8t145k6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa8t145k6.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpa8t145k6.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa8t145k6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpa8t145k6.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpa8t145k6.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa8t145k6.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa8t145k6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6vrg92k7.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6vrg92k7.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vrg92k7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6vrg92k7.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp6vrg92k7.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vrg92k7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6vrg92k7.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6vrg92k7.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6vrg92k7.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6vrg92k7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpil06altz.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpil06altz.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpil06altz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpil06altz.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpil06altz.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpil06altz.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpil06altz.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpil06altz.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpil06altz.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpil06altz.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0_counts = count_chars(s0)\n    s1_counts\
    \ = count_chars(s1)\n    for (k, v) in s0_counts\n        if s1_counts[k] != v\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk4imtq8a.jl:34\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpk4imtq8a.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk4imtq8a.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpk4imtq8a.jl:35\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpk4imtq8a.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk4imtq8a.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpk4imtq8a.jl:36\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpk4imtq8a.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk4imtq8a.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk4imtq8a.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    for i in s0\n        if\
    \ !(i in s1)\n            return false\n        end\n    end\n    for i in s1\n\
    \        if !(i in s0)\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbztxw91y.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbztxw91y.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbztxw91y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbztxw91y.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpbztxw91y.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbztxw91y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbztxw91y.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbztxw91y.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbztxw91y.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbztxw91y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpij17blhu.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpij17blhu.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij17blhu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpij17blhu.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpij17blhu.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij17blhu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpij17blhu.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpij17blhu.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij17blhu.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpij17blhu.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyn9v3k3p.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyn9v3k3p.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyn9v3k3p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyn9v3k3p.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpyn9v3k3p.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyn9v3k3p.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyn9v3k3p.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyn9v3k3p.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyn9v3k3p.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyn9v3k3p.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp96gbo9zi.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp96gbo9zi.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp96gbo9zi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp96gbo9zi.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp96gbo9zi.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp96gbo9zi.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp96gbo9zi.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp96gbo9zi.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp96gbo9zi.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp96gbo9zi.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpnjwyeoi7.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Bool\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ same_chars(s0::String, s1::String)\\n     @ Main /tmp/tmpnjwyeoi7.jl:18\\n \
    \  [2] macro expansion\\n     @ /tmp/tmpnjwyeoi7.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnjwyeoi7.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpnjwyeoi7.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\", \"dddddddabc\") == true\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ same_chars(s0::String, s1::String)\\n     @ Main /tmp/tmpnjwyeoi7.jl:18\\n \
    \  [2] macro expansion\\n     @ /tmp/tmpnjwyeoi7.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpnjwyeoi7.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpnjwyeoi7.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"dddddddabc\", \"abcd\") == true\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1eib7h1v.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1eib7h1v.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1eib7h1v.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1eib7h1v.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp1eib7h1v.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1eib7h1v.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1eib7h1v.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1eib7h1v.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1eib7h1v.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1eib7h1v.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if !(c in s1)\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpikuwdzy6.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpikuwdzy6.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpikuwdzy6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpikuwdzy6.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpikuwdzy6.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpikuwdzy6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpikuwdzy6.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpikuwdzy6.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpikuwdzy6.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpikuwdzy6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ s0 = sort(s0)\n    s1 = sort(s1)\n    if s0 == s1\n        return true\n   \
    \ else\n        return false\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpzuhgwi0c.jl:31\\n  Test threw\
    \ exception\\n  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true\\n  MethodError: no method matching sort(::String)\\n  Closest candidates\
    \ are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\n    sort(!Matched::AbstractRange)\
    \ at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...)\
    \ where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] same_chars(s0::String, s1::String)\\n     @\
    \ Main /tmp/tmpzuhgwi0c.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpzuhgwi0c.jl:31\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzuhgwi0c.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpzuhgwi0c.jl:32\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\", \"dddddddabc\") == true\\n  MethodError: no method matching\
    \ sort(::String)\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] same_chars(s0::String, s1::String)\\n     @\
    \ Main /tmp/tmpzuhgwi0c.jl:18\\n   [2] macro expansion\\n     @ /tmp/tmpzuhgwi0c.jl:32\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpzuhgwi0c.jl:30\\ntest set:\
    \ Error During Test at /tmp/tmpzuhgwi0c.jl:33\\n  Test threw exception\\n  Expression:\
    \ candidate(\"dddddddabc\", \"abcd\") == true\\n  MethodError: no method matching\
    \ sort(::String)\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_8he85bb.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_8he85bb.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_8he85bb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_8he85bb.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_8he85bb.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_8he85bb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_8he85bb.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_8he85bb.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_8he85bb.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_8he85bb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp48q0jpfb.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp48q0jpfb.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp48q0jpfb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp48q0jpfb.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp48q0jpfb.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp48q0jpfb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp48q0jpfb.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp48q0jpfb.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp48q0jpfb.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp48q0jpfb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0_sorted = sort(collect(s0))\n    s1_sorted\
    \ = sort(collect(s1))\n    for i in 1:length(s0)\n        if s0_sorted[i] != s1_sorted[i]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdcf66kt2.jl:34\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdcf66kt2.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdcf66kt2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpdcf66kt2.jl:35\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpdcf66kt2.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdcf66kt2.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpdcf66kt2.jl:36\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdcf66kt2.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdcf66kt2.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdcf66kt2.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyc2ovald.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyc2ovald.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyc2ovald.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyc2ovald.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpyc2ovald.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyc2ovald.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyc2ovald.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyc2ovald.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyc2ovald.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyc2ovald.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplu3guvr4.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplu3guvr4.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplu3guvr4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplu3guvr4.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmplu3guvr4.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplu3guvr4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmplu3guvr4.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmplu3guvr4.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplu3guvr4.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplu3guvr4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpumr9m3mf.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpumr9m3mf.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpumr9m3mf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpumr9m3mf.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpumr9m3mf.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpumr9m3mf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpumr9m3mf.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpumr9m3mf.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpumr9m3mf.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpumr9m3mf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ return false\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2caivj9y.jl:25\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2caivj9y.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2caivj9y.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp2caivj9y.jl:26\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp2caivj9y.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2caivj9y.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp2caivj9y.jl:27\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2caivj9y.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2caivj9y.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2caivj9y.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo9mp5jqd.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo9mp5jqd.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo9mp5jqd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo9mp5jqd.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpo9mp5jqd.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo9mp5jqd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo9mp5jqd.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo9mp5jqd.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo9mp5jqd.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo9mp5jqd.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpidwlhtzw.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpidwlhtzw.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpidwlhtzw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpidwlhtzw.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpidwlhtzw.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpidwlhtzw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpidwlhtzw.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpidwlhtzw.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpidwlhtzw.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpidwlhtzw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkbihhyu2.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkbihhyu2.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbihhyu2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkbihhyu2.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpkbihhyu2.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbihhyu2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkbihhyu2.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkbihhyu2.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbihhyu2.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkbihhyu2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdiot2sxv.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdiot2sxv.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdiot2sxv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdiot2sxv.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpdiot2sxv.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdiot2sxv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdiot2sxv.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdiot2sxv.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdiot2sxv.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdiot2sxv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in s0\n        if !(i in s1)\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1m7e7zv8.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1m7e7zv8.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1m7e7zv8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1m7e7zv8.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp1m7e7zv8.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1m7e7zv8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1m7e7zv8.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1m7e7zv8.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1m7e7zv8.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1m7e7zv8.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0krydau7.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0krydau7.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0krydau7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0krydau7.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0krydau7.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0krydau7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0krydau7.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0krydau7.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0krydau7.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0krydau7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq4mxyimb.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpq4mxyimb.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4mxyimb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpq4mxyimb.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpq4mxyimb.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4mxyimb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpq4mxyimb.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpq4mxyimb.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpq4mxyimb.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq4mxyimb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in s0\n        if count(s0, i) != count(s1,\
    \ i)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqte1x9w8.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqte1x9w8.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqte1x9w8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqte1x9w8.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpqte1x9w8.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqte1x9w8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqte1x9w8.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqte1x9w8.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqte1x9w8.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqte1x9w8.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcn18h7iw.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcn18h7iw.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcn18h7iw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcn18h7iw.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpcn18h7iw.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcn18h7iw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcn18h7iw.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcn18h7iw.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcn18h7iw.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcn18h7iw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyjdy102e.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyjdy102e.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjdy102e.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyjdy102e.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpyjdy102e.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjdy102e.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyjdy102e.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyjdy102e.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjdy102e.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjdy102e.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # check if the two strings\
    \ have the same characters\n    # (ignoring the order of the characters)\n   \
    \ #\n    # input: two strings\n    # output: True if the two strings have the\
    \ same characters\n    #         False otherwise\n    #\n    # example:\n    #\
    \ >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n    # True\n    # >>> same_chars('abcd',\
    \ 'dddddddabc')\n    # True\n    # >>> same_chars('dddddddabc', 'abcd')\n    #\
    \ True\n    # >>> same_chars('eabcd', 'dddddddabc')\n    # False\n    # >>> same_chars('abcd',\
    \ 'dddddddabce')\n    # False\n    # >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n\
    \    # False\n    #\n    # variables:\n    # s0: first string\n    # s1: second\
    \ string\n    #\n    # algorithm:\n    # 1. sort the two strings\n    # 2. compare\
    \ the two sorted strings\n    # 3. return the result of the comparison\n    \n\
    \    return sort(s0) == sort(s1)\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmp3hn5lp2d.jl:54\\n  Test threw\
    \ exception\\n  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true\\n  MethodError: no method matching sort(::String)\\n  Closest candidates\
    \ are:\\n    sort(!Matched::AbstractUnitRange) at range.jl:1060\\n    sort(!Matched::AbstractRange)\
    \ at range.jl:1063\\n    sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...)\
    \ where {Tv, Ti} at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] same_chars(s0::String, s1::String)\\n     @\
    \ Main /tmp/tmp3hn5lp2d.jl:47\\n   [2] macro expansion\\n     @ /tmp/tmp3hn5lp2d.jl:54\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3hn5lp2d.jl:53\\ntest set:\
    \ Error During Test at /tmp/tmp3hn5lp2d.jl:55\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\", \"dddddddabc\") == true\\n  MethodError: no method matching\
    \ sort(::String)\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at range.jl:1063\\n   \
    \ sort(!Matched::SparseArrays.SparseVector{Tv, Ti}; kws...) where {Tv, Ti} at\
    \ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/SparseArrays/src/sparsevector.jl:1942\\\
    n    ...\\n  Stacktrace:\\n   [1] same_chars(s0::String, s1::String)\\n     @\
    \ Main /tmp/tmp3hn5lp2d.jl:47\\n   [2] macro expansion\\n     @ /tmp/tmp3hn5lp2d.jl:55\
    \ [inlined]\\n   [3] macro expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmp3hn5lp2d.jl:53\\ntest set:\
    \ Error During Test at /tmp/tmp3hn5lp2d.jl:56\\n  Test threw exception\\n  Expression:\
    \ candidate(\"dddddddabc\", \"abcd\") == true\\n  MethodError: no method matching\
    \ sort(::String)\\n  Closest candidates are:\\n    sort(!Matched::AbstractUnitRange)\
    \ at range.jl:1060\\n    sort(!Matched::AbstractRange) at"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if !(c in s1)\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9y_7ozef.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9y_7ozef.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9y_7ozef.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9y_7ozef.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp9y_7ozef.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9y_7ozef.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9y_7ozef.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9y_7ozef.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9y_7ozef.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9y_7ozef.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in s0\n        if count(s0, i) != count(s1,\
    \ i)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0j8_lrep.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0j8_lrep.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0j8_lrep.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0j8_lrep.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0j8_lrep.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0j8_lrep.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0j8_lrep.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0j8_lrep.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0j8_lrep.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0j8_lrep.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu7wrkg4l.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpu7wrkg4l.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu7wrkg4l.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpu7wrkg4l.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpu7wrkg4l.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu7wrkg4l.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpu7wrkg4l.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpu7wrkg4l.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu7wrkg4l.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu7wrkg4l.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if !(c in s1)\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqk1u47l6.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqk1u47l6.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqk1u47l6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqk1u47l6.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpqk1u47l6.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqk1u47l6.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqk1u47l6.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqk1u47l6.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqk1u47l6.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqk1u47l6.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ if length(s0) != length(s1)\n        return false\n    end\n    for i in s0\n\
    \        if count(s0, i) != count(s1, i)\n            return false\n        end\n\
    \    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr5ynslqc.jl:33\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr5ynslqc.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr5ynslqc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr5ynslqc.jl:34\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpr5ynslqc.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr5ynslqc.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpr5ynslqc.jl:35\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr5ynslqc.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr5ynslqc.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr5ynslqc.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpary6_twc.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpary6_twc.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpary6_twc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpary6_twc.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpary6_twc.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpary6_twc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpary6_twc.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpary6_twc.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpary6_twc.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpary6_twc.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0_dict = Dict{Char, Int}()\n    s1_dict =\
    \ Dict{Char, Int}()\n    for c in s0\n        if haskey(s0_dict, c)\n        \
    \    s0_dict[c] += 1\n        else\n            s0_dict[c] = 1\n        end\n\
    \    end\n    for c in s1\n        if haskey(s1_dict, c)\n            s1_dict[c]\
    \ += 1\n        else\n            s1_dict[c] = 1\n        end\n    end\n    for\
    \ (k, v) in s0_dict\n        if !haskey(s1_dict, k) || s1_dict[k] != v\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_iy98ugq.jl:48\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_iy98ugq.jl:48 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_iy98ugq.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp_iy98ugq.jl:49\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_iy98ugq.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_iy98ugq.jl:47\ntest set: Test\
    \ Failed at /tmp/tmp_iy98ugq.jl:50\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_iy98ugq.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_iy98ugq.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_iy98ugq.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppozhrpnq.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppozhrpnq.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppozhrpnq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppozhrpnq.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmppozhrpnq.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppozhrpnq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppozhrpnq.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppozhrpnq.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppozhrpnq.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppozhrpnq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0pxlfq3q.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0pxlfq3q.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0pxlfq3q.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0pxlfq3q.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0pxlfq3q.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0pxlfq3q.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0pxlfq3q.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0pxlfq3q.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0pxlfq3q.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0pxlfq3q.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in s0\n        if count(s0, i) != count(s1,\
    \ i)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0lwm1cri.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0lwm1cri.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0lwm1cri.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0lwm1cri.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0lwm1cri.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0lwm1cri.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0lwm1cri.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0lwm1cri.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0lwm1cri.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0lwm1cri.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # Check if the two strings\
    \ have the same length\n    if length(s0) != length(s1)\n        return false\n\
    \    end\n    \n    # Check if the two strings have the same characters\n    for\
    \ i in 1:length(s0)\n        if !(s0[i] in s1)\n            return false\n   \
    \     end\n    end\n    \n    return true\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpibc1ycro.jl:36\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpibc1ycro.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpibc1ycro.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpibc1ycro.jl:37\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpibc1ycro.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpibc1ycro.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpibc1ycro.jl:38\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpibc1ycro.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpibc1ycro.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpibc1ycro.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3en8rrsr.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3en8rrsr.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3en8rrsr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3en8rrsr.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp3en8rrsr.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3en8rrsr.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3en8rrsr.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3en8rrsr.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3en8rrsr.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3en8rrsr.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_v4r8tlh.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_v4r8tlh.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_v4r8tlh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_v4r8tlh.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_v4r8tlh.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_v4r8tlh.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_v4r8tlh.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_v4r8tlh.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_v4r8tlh.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_v4r8tlh.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpql6k41rv.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpql6k41rv.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpql6k41rv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpql6k41rv.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpql6k41rv.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpql6k41rv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpql6k41rv.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpql6k41rv.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpql6k41rv.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpql6k41rv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphxi915x7.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphxi915x7.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphxi915x7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphxi915x7.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmphxi915x7.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphxi915x7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphxi915x7.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphxi915x7.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphxi915x7.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphxi915x7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if !(s0[i]\
    \ in s1)\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv8srr4rw.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpv8srr4rw.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv8srr4rw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpv8srr4rw.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpv8srr4rw.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv8srr4rw.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpv8srr4rw.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpv8srr4rw.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv8srr4rw.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv8srr4rw.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4e63s0m9.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4e63s0m9.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4e63s0m9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4e63s0m9.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp4e63s0m9.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4e63s0m9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4e63s0m9.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4e63s0m9.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4e63s0m9.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4e63s0m9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcku77gss.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcku77gss.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcku77gss.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcku77gss.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpcku77gss.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcku77gss.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcku77gss.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcku77gss.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcku77gss.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcku77gss.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw8k79qff.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpw8k79qff.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8k79qff.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw8k79qff.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpw8k79qff.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8k79qff.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw8k79qff.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw8k79qff.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw8k79qff.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw8k79qff.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_6qhkx48.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_6qhkx48.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_6qhkx48.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_6qhkx48.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_6qhkx48.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_6qhkx48.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_6qhkx48.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_6qhkx48.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_6qhkx48.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_6qhkx48.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1o7i5imy.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1o7i5imy.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1o7i5imy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1o7i5imy.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp1o7i5imy.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1o7i5imy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1o7i5imy.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1o7i5imy.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1o7i5imy.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1o7i5imy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpga7ejior.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpga7ejior.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpga7ejior.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpga7ejior.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpga7ejior.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpga7ejior.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpga7ejior.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpga7ejior.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpga7ejior.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpga7ejior.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx76egy37.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpx76egy37.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx76egy37.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx76egy37.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpx76egy37.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx76egy37.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpx76egy37.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx76egy37.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx76egy37.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx76egy37.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    s0_sorted = sort(collect(s0))\n\
    \    s1_sorted = sort(collect(s1))\n    return s0_sorted == s1_sorted\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprpzwtwgp.jl:26\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprpzwtwgp.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpzwtwgp.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprpzwtwgp.jl:27\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmprpzwtwgp.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpzwtwgp.jl:25\ntest set: Test\
    \ Failed at /tmp/tmprpzwtwgp.jl:28\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmprpzwtwgp.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpzwtwgp.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprpzwtwgp.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp89y6s2sc.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp89y6s2sc.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp89y6s2sc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp89y6s2sc.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp89y6s2sc.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp89y6s2sc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp89y6s2sc.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp89y6s2sc.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp89y6s2sc.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp89y6s2sc.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    d0 = Dict{Char,Int}()\n\
    \    d1 = Dict{Char,Int}()\n    for c in s0\n        d0[c] = get(d0, c, 0) + 1\n\
    \    end\n    for c in s1\n        d1[c] = get(d1, c, 0) + 1\n    end\n    return\
    \ d0 == d1\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxiwb39lq.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxiwb39lq.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxiwb39lq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxiwb39lq.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpxiwb39lq.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxiwb39lq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxiwb39lq.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxiwb39lq.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxiwb39lq.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxiwb39lq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ return false\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0sd4lfm5.jl:25\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0sd4lfm5.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0sd4lfm5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp0sd4lfm5.jl:26\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0sd4lfm5.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0sd4lfm5.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp0sd4lfm5.jl:27\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0sd4lfm5.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0sd4lfm5.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0sd4lfm5.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5cfuz032.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5cfuz032.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5cfuz032.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5cfuz032.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp5cfuz032.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5cfuz032.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5cfuz032.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5cfuz032.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5cfuz032.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5cfuz032.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if !(c in s1)\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnieylufp.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpnieylufp.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnieylufp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnieylufp.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpnieylufp.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnieylufp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnieylufp.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnieylufp.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnieylufp.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnieylufp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if s0[i] !=\
    \ s1[i]\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg_i4wcal.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpg_i4wcal.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg_i4wcal.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpg_i4wcal.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpg_i4wcal.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg_i4wcal.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpg_i4wcal.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg_i4wcal.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg_i4wcal.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg_i4wcal.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # TODO: implement this\
    \ function\n    # Hint: you can use the `count` function\n    # Hint: you can\
    \ use the `count` function\n    if length(s0) != length(s1)\n        return false\n\
    \    end\n    for i in s0\n        if count(s0, i) != count(s1, i)\n         \
    \   return false\n        end\n    end\n    return true\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf8jotnmn.jl:35\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf8jotnmn.jl:35 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf8jotnmn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpf8jotnmn.jl:36\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpf8jotnmn.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf8jotnmn.jl:34\ntest set: Test\
    \ Failed at /tmp/tmpf8jotnmn.jl:37\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf8jotnmn.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf8jotnmn.jl:34\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf8jotnmn.jl:32\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4gju9v9y.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4gju9v9y.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4gju9v9y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4gju9v9y.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp4gju9v9y.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4gju9v9y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4gju9v9y.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4gju9v9y.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4gju9v9y.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4gju9v9y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppdiottp2.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppdiottp2.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppdiottp2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppdiottp2.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmppdiottp2.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppdiottp2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppdiottp2.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppdiottp2.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppdiottp2.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppdiottp2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm2l9yy85.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpm2l9yy85.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm2l9yy85.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm2l9yy85.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpm2l9yy85.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm2l9yy85.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm2l9yy85.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm2l9yy85.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm2l9yy85.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm2l9yy85.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in s0\n        if count(s0, i) != count(s1,\
    \ i)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsn4ez4tp.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsn4ez4tp.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsn4ez4tp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpsn4ez4tp.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpsn4ez4tp.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsn4ez4tp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpsn4ez4tp.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsn4ez4tp.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsn4ez4tp.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsn4ez4tp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8qr2afbg.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8qr2afbg.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qr2afbg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8qr2afbg.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp8qr2afbg.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qr2afbg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8qr2afbg.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8qr2afbg.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8qr2afbg.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8qr2afbg.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmueo4o1n.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmueo4o1n.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmueo4o1n.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmueo4o1n.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpmueo4o1n.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmueo4o1n.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpmueo4o1n.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmueo4o1n.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmueo4o1n.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmueo4o1n.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0_sorted = sort(collect(s0))\n    s1_sorted\
    \ = sort(collect(s1))\n    for i in 1:length(s0)\n        if s0_sorted[i] != s1_sorted[i]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpryusxdfp.jl:34\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpryusxdfp.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpryusxdfp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpryusxdfp.jl:35\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpryusxdfp.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpryusxdfp.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpryusxdfp.jl:36\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpryusxdfp.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpryusxdfp.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpryusxdfp.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_npec3ey.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_npec3ey.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_npec3ey.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_npec3ey.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_npec3ey.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_npec3ey.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_npec3ey.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_npec3ey.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_npec3ey.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_npec3ey.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjeo297rp.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjeo297rp.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjeo297rp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpjeo297rp.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpjeo297rp.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjeo297rp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpjeo297rp.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjeo297rp.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjeo297rp.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjeo297rp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm4dm7zvg.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpm4dm7zvg.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4dm7zvg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm4dm7zvg.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpm4dm7zvg.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4dm7zvg.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm4dm7zvg.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm4dm7zvg.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm4dm7zvg.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm4dm7zvg.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpam2x22a_.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpam2x22a_.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpam2x22a_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpam2x22a_.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpam2x22a_.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpam2x22a_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpam2x22a_.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpam2x22a_.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpam2x22a_.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpam2x22a_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd2zrqgx_.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpd2zrqgx_.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd2zrqgx_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd2zrqgx_.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpd2zrqgx_.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd2zrqgx_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd2zrqgx_.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd2zrqgx_.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd2zrqgx_.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd2zrqgx_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if !contains(s1,\
    \ s0[i])\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptaf8kg90.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptaf8kg90.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptaf8kg90.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptaf8kg90.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmptaf8kg90.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptaf8kg90.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptaf8kg90.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptaf8kg90.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptaf8kg90.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptaf8kg90.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if s0[i] !=\
    \ s1[i]\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwvo9400e.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwvo9400e.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwvo9400e.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwvo9400e.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwvo9400e.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwvo9400e.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwvo9400e.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwvo9400e.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwvo9400e.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwvo9400e.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnl7kyjfj.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpnl7kyjfj.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnl7kyjfj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnl7kyjfj.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpnl7kyjfj.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnl7kyjfj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnl7kyjfj.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnl7kyjfj.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnl7kyjfj.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnl7kyjfj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ return false\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1io79rov.jl:25\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1io79rov.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1io79rov.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1io79rov.jl:26\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp1io79rov.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1io79rov.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp1io79rov.jl:27\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1io79rov.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1io79rov.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1io79rov.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpusqcn328.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpusqcn328.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpusqcn328.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpusqcn328.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpusqcn328.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpusqcn328.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpusqcn328.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpusqcn328.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpusqcn328.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpusqcn328.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4g0evyvl.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4g0evyvl.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g0evyvl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4g0evyvl.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp4g0evyvl.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g0evyvl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4g0evyvl.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4g0evyvl.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4g0evyvl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4g0evyvl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr0ikp54d.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr0ikp54d.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr0ikp54d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr0ikp54d.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpr0ikp54d.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr0ikp54d.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr0ikp54d.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr0ikp54d.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr0ikp54d.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr0ikp54d.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ebzwhg9.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8ebzwhg9.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ebzwhg9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8ebzwhg9.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp8ebzwhg9.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ebzwhg9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8ebzwhg9.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8ebzwhg9.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ebzwhg9.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ebzwhg9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjv3p_q52.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpjv3p_q52.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjv3p_q52.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpjv3p_q52.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpjv3p_q52.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjv3p_q52.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpjv3p_q52.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpjv3p_q52.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpjv3p_q52.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjv3p_q52.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe9fqfyew.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe9fqfyew.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9fqfyew.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe9fqfyew.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpe9fqfyew.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9fqfyew.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe9fqfyew.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe9fqfyew.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe9fqfyew.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe9fqfyew.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqzoh7wwq.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqzoh7wwq.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqzoh7wwq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqzoh7wwq.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpqzoh7wwq.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqzoh7wwq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqzoh7wwq.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqzoh7wwq.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqzoh7wwq.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqzoh7wwq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph27hlm02.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmph27hlm02.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph27hlm02.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph27hlm02.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmph27hlm02.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph27hlm02.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph27hlm02.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmph27hlm02.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph27hlm02.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph27hlm02.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn42v81nc.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpn42v81nc.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn42v81nc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpn42v81nc.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpn42v81nc.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn42v81nc.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpn42v81nc.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpn42v81nc.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn42v81nc.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn42v81nc.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0 = sort(s0)\n    s1 = sort(s1)\n    for\
    \ i in 1:length(s0)\n        if s0[i] != s1[i]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkbjz11vx.jl:34\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkbjz11vx.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbjz11vx.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkbjz11vx.jl:35\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpkbjz11vx.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbjz11vx.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpkbjz11vx.jl:36\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkbjz11vx.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkbjz11vx.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkbjz11vx.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpup_hs3re.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpup_hs3re.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpup_hs3re.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpup_hs3re.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpup_hs3re.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpup_hs3re.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpup_hs3re.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpup_hs3re.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpup_hs3re.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpup_hs3re.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    d = Dict{Char, Int}()\n    for c in s0\n \
    \       if haskey(d, c)\n            d[c] += 1\n        else\n            d[c]\
    \ = 1\n        end\n    end\n    for c in s1\n        if haskey(d, c)\n      \
    \      d[c] -= 1\n        else\n            return false\n        end\n    end\n\
    \    for v in values(d)\n        if v != 0\n            return false\n       \
    \ end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8u9fxsxs.jl:47\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8u9fxsxs.jl:47 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8u9fxsxs.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp8u9fxsxs.jl:48\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp8u9fxsxs.jl:48 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8u9fxsxs.jl:46\ntest set: Test\
    \ Failed at /tmp/tmp8u9fxsxs.jl:49\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8u9fxsxs.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8u9fxsxs.jl:46\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8u9fxsxs.jl:44\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0 = sort(collect(s0))\n    s1 = sort(collect(s1))\n\
    \    for i in 1:length(s0)\n        if s0[i] != s1[i]\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph0vsphnd.jl:34\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmph0vsphnd.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph0vsphnd.jl:33\ntest set: Test\
    \ Failed at /tmp/tmph0vsphnd.jl:35\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmph0vsphnd.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph0vsphnd.jl:33\ntest set: Test\
    \ Failed at /tmp/tmph0vsphnd.jl:36\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmph0vsphnd.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph0vsphnd.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph0vsphnd.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvxgltwvk.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvxgltwvk.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxgltwvk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvxgltwvk.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpvxgltwvk.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxgltwvk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvxgltwvk.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvxgltwvk.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvxgltwvk.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvxgltwvk.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8ltxcgd8.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8ltxcgd8.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ltxcgd8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8ltxcgd8.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp8ltxcgd8.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ltxcgd8.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8ltxcgd8.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8ltxcgd8.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8ltxcgd8.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8ltxcgd8.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    return sort(collect(s0))\
    \ == sort(collect(s1))\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmbfoh7pk.jl:24\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmbfoh7pk.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmbfoh7pk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmbfoh7pk.jl:25\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpmbfoh7pk.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmbfoh7pk.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpmbfoh7pk.jl:26\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpmbfoh7pk.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmbfoh7pk.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmbfoh7pk.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph2551_3w.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmph2551_3w.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2551_3w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph2551_3w.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmph2551_3w.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2551_3w.jl:31\ntest set: Test\
    \ Failed at /tmp/tmph2551_3w.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmph2551_3w.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph2551_3w.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph2551_3w.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe0fk5bnd.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe0fk5bnd.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe0fk5bnd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe0fk5bnd.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpe0fk5bnd.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe0fk5bnd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe0fk5bnd.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe0fk5bnd.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe0fk5bnd.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe0fk5bnd.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc109qq11.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc109qq11.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc109qq11.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc109qq11.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpc109qq11.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc109qq11.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc109qq11.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc109qq11.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc109qq11.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc109qq11.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwxy2ihpl.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwxy2ihpl.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwxy2ihpl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwxy2ihpl.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwxy2ihpl.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwxy2ihpl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwxy2ihpl.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwxy2ihpl.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwxy2ihpl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwxy2ihpl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp205s8nqu.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp205s8nqu.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp205s8nqu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp205s8nqu.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp205s8nqu.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp205s8nqu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp205s8nqu.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp205s8nqu.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp205s8nqu.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp205s8nqu.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in s0\n        if count(s0, i) != count(s1,\
    \ i)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxa9cc3vv.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxa9cc3vv.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxa9cc3vv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxa9cc3vv.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpxa9cc3vv.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxa9cc3vv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxa9cc3vv.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxa9cc3vv.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxa9cc3vv.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxa9cc3vv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8stagkjd.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8stagkjd.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8stagkjd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8stagkjd.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp8stagkjd.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8stagkjd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp8stagkjd.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp8stagkjd.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8stagkjd.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8stagkjd.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if !in(s0[i],\
    \ s1)\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwkhz93b4.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwkhz93b4.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwkhz93b4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwkhz93b4.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpwkhz93b4.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwkhz93b4.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpwkhz93b4.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpwkhz93b4.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwkhz93b4.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwkhz93b4.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if !(c in s1)\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9z7rjjiq.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp9z7rjjiq.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9z7rjjiq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9z7rjjiq.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp9z7rjjiq.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9z7rjjiq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp9z7rjjiq.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp9z7rjjiq.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9z7rjjiq.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9z7rjjiq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvgx6zc7y.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvgx6zc7y.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvgx6zc7y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvgx6zc7y.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpvgx6zc7y.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvgx6zc7y.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpvgx6zc7y.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvgx6zc7y.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvgx6zc7y.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvgx6zc7y.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if !(s0[i]\
    \ in s1)\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6tbv8jud.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6tbv8jud.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6tbv8jud.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6tbv8jud.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp6tbv8jud.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6tbv8jud.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp6tbv8jud.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6tbv8jud.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6tbv8jud.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6tbv8jud.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if !(c in s1)\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphkjln3a2.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphkjln3a2.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphkjln3a2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphkjln3a2.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmphkjln3a2.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphkjln3a2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphkjln3a2.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphkjln3a2.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphkjln3a2.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphkjln3a2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe5m4c_ny.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe5m4c_ny.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe5m4c_ny.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe5m4c_ny.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpe5m4c_ny.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe5m4c_ny.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpe5m4c_ny.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpe5m4c_ny.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe5m4c_ny.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe5m4c_ny.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcgx6wr1g.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcgx6wr1g.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcgx6wr1g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcgx6wr1g.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpcgx6wr1g.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcgx6wr1g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcgx6wr1g.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcgx6wr1g.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcgx6wr1g.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcgx6wr1g.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    for c in s0\n        if\
    \ c \u2209 s1\n            return false\n        end\n    end\n    for c in s1\n\
    \        if c \u2209 s0\n            return false\n        end\n    end\n    return\
    \ true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    7      7\n"
  exit_code: 0
  status: OK
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ return sort(collect(s0)) == sort(collect(s1))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphbzs5_t1.jl:25\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphbzs5_t1.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphbzs5_t1.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphbzs5_t1.jl:26\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmphbzs5_t1.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphbzs5_t1.jl:24\ntest set: Test\
    \ Failed at /tmp/tmphbzs5_t1.jl:27\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphbzs5_t1.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphbzs5_t1.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphbzs5_t1.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyhomn26g.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyhomn26g.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyhomn26g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyhomn26g.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpyhomn26g.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyhomn26g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyhomn26g.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyhomn26g.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyhomn26g.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyhomn26g.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpewp7mchf.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpewp7mchf.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewp7mchf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpewp7mchf.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpewp7mchf.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewp7mchf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpewp7mchf.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpewp7mchf.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpewp7mchf.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpewp7mchf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2nwthzks.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2nwthzks.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2nwthzks.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2nwthzks.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp2nwthzks.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2nwthzks.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2nwthzks.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2nwthzks.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2nwthzks.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2nwthzks.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    return sort(collect(s0))\
    \ == sort(collect(s1))\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz04a9oqo.jl:24\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpz04a9oqo.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz04a9oqo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz04a9oqo.jl:25\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpz04a9oqo.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz04a9oqo.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpz04a9oqo.jl:26\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpz04a9oqo.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpz04a9oqo.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz04a9oqo.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp583_j_o3.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp583_j_o3.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp583_j_o3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp583_j_o3.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp583_j_o3.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp583_j_o3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp583_j_o3.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp583_j_o3.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp583_j_o3.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp583_j_o3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in s0\n        if !(i in s1)\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj8s9so84.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpj8s9so84.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8s9so84.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj8s9so84.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpj8s9so84.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8s9so84.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpj8s9so84.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpj8s9so84.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj8s9so84.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj8s9so84.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0_dict = Dict{Char, Int}()\n    s1_dict =\
    \ Dict{Char, Int}()\n    for c in s0\n        if haskey(s0_dict, c)\n        \
    \    s0_dict[c] += 1\n        else\n            s0_dict[c] = 1\n        end\n\
    \    end\n    for c in s1\n        if haskey(s1_dict, c)\n            s1_dict[c]\
    \ += 1\n        else\n            s1_dict[c] = 1\n        end\n    end\n    for\
    \ key in keys(s0_dict)\n        if !haskey(s1_dict, key) || s0_dict[key] != s1_dict[key]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpop9ttwqw.jl:48\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpop9ttwqw.jl:48 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpop9ttwqw.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpop9ttwqw.jl:49\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpop9ttwqw.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpop9ttwqw.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpop9ttwqw.jl:50\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpop9ttwqw.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpop9ttwqw.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpop9ttwqw.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0_sorted = sort(collect(s0))\n    s1_sorted\
    \ = sort(collect(s1))\n    for i in 1:length(s0)\n        if s0_sorted[i] != s1_sorted[i]\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvczd5zx5.jl:34\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvczd5zx5.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvczd5zx5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpvczd5zx5.jl:35\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpvczd5zx5.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvczd5zx5.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpvczd5zx5.jl:36\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpvczd5zx5.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvczd5zx5.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvczd5zx5.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0_counts = count_chars(s0)\n    s1_counts\
    \ = count_chars(s1)\n    for (k, v) in s0_counts\n        if s1_counts[k] != v\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpch0rp4rv.jl:34\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpch0rp4rv.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpch0rp4rv.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpch0rp4rv.jl:35\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpch0rp4rv.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpch0rp4rv.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpch0rp4rv.jl:36\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpch0rp4rv.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpch0rp4rv.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpch0rp4rv.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc1vovyrx.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc1vovyrx.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc1vovyrx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc1vovyrx.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpc1vovyrx.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc1vovyrx.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc1vovyrx.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc1vovyrx.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc1vovyrx.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc1vovyrx.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1cyiqcfa.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1cyiqcfa.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1cyiqcfa.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1cyiqcfa.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp1cyiqcfa.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1cyiqcfa.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp1cyiqcfa.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp1cyiqcfa.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1cyiqcfa.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1cyiqcfa.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5v5hf0lv.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5v5hf0lv.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5v5hf0lv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5v5hf0lv.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp5v5hf0lv.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5v5hf0lv.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp5v5hf0lv.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp5v5hf0lv.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5v5hf0lv.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5v5hf0lv.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkzhit0r9.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkzhit0r9.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkzhit0r9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkzhit0r9.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpkzhit0r9.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkzhit0r9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpkzhit0r9.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpkzhit0r9.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkzhit0r9.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkzhit0r9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0_dict = Dict{Char, Int}()\n    s1_dict =\
    \ Dict{Char, Int}()\n    for c in s0\n        if haskey(s0_dict, c)\n        \
    \    s0_dict[c] += 1\n        else\n            s0_dict[c] = 1\n        end\n\
    \    end\n    for c in s1\n        if haskey(s1_dict, c)\n            s1_dict[c]\
    \ += 1\n        else\n            s1_dict[c] = 1\n        end\n    end\n    for\
    \ (k, v) in s0_dict\n        if !haskey(s1_dict, k) || s1_dict[k] != v\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo302o7_0.jl:48\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo302o7_0.jl:48 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo302o7_0.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpo302o7_0.jl:49\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpo302o7_0.jl:49 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo302o7_0.jl:47\ntest set: Test\
    \ Failed at /tmp/tmpo302o7_0.jl:50\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo302o7_0.jl:50 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo302o7_0.jl:47\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo302o7_0.jl:45\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnvy9vpqu.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpnvy9vpqu.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnvy9vpqu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnvy9vpqu.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpnvy9vpqu.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnvy9vpqu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpnvy9vpqu.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpnvy9vpqu.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnvy9vpqu.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnvy9vpqu.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfq8_i0j0.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfq8_i0j0.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfq8_i0j0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfq8_i0j0.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpfq8_i0j0.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfq8_i0j0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpfq8_i0j0.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfq8_i0j0.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfq8_i0j0.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfq8_i0j0.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxzor83kl.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxzor83kl.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxzor83kl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxzor83kl.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpxzor83kl.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxzor83kl.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpxzor83kl.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxzor83kl.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxzor83kl.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxzor83kl.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ if length(s0) != length(s1)\n        return false\n    end\n    for i in 1:length(s0)\n\
    \        if count(s0, s0[i]) != count(s1, s0[i])\n            return false\n \
    \       end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeehy20zt.jl:33\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpeehy20zt.jl:33 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeehy20zt.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpeehy20zt.jl:34\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpeehy20zt.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeehy20zt.jl:32\ntest set: Test\
    \ Failed at /tmp/tmpeehy20zt.jl:35\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpeehy20zt.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeehy20zt.jl:32\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeehy20zt.jl:30\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0_counts = count_chars(s0)\n    s1_counts\
    \ = count_chars(s1)\n    for (k, v) in s0_counts\n        if s1_counts[k] != v\n\
    \            return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpalmr4762.jl:34\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpalmr4762.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpalmr4762.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpalmr4762.jl:35\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpalmr4762.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpalmr4762.jl:33\ntest set: Test\
    \ Failed at /tmp/tmpalmr4762.jl:36\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpalmr4762.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpalmr4762.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpalmr4762.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ke2x9jb.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4ke2x9jb.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ke2x9jb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4ke2x9jb.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp4ke2x9jb.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ke2x9jb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp4ke2x9jb.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4ke2x9jb.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ke2x9jb.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ke2x9jb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ return false\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt4e9s51a.jl:25\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpt4e9s51a.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt4e9s51a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt4e9s51a.jl:26\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpt4e9s51a.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt4e9s51a.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpt4e9s51a.jl:27\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpt4e9s51a.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt4e9s51a.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt4e9s51a.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphea85bij.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphea85bij.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphea85bij.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphea85bij.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmphea85bij.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphea85bij.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphea85bij.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphea85bij.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphea85bij.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphea85bij.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ return false\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm1g5ee0u.jl:25\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpm1g5ee0u.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm1g5ee0u.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpm1g5ee0u.jl:26\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpm1g5ee0u.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm1g5ee0u.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpm1g5ee0u.jl:27\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm1g5ee0u.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm1g5ee0u.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm1g5ee0u.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphrj06s4v.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphrj06s4v.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphrj06s4v.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphrj06s4v.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmphrj06s4v.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphrj06s4v.jl:31\ntest set: Test\
    \ Failed at /tmp/tmphrj06s4v.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmphrj06s4v.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphrj06s4v.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphrj06s4v.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbg0jwq7c.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbg0jwq7c.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbg0jwq7c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbg0jwq7c.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpbg0jwq7c.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbg0jwq7c.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbg0jwq7c.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbg0jwq7c.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbg0jwq7c.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbg0jwq7c.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm7w9y010.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpm7w9y010.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm7w9y010.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm7w9y010.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpm7w9y010.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm7w9y010.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpm7w9y010.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpm7w9y010.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm7w9y010.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm7w9y010.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    s0_counts = count_chars(s0)\n\
    \    s1_counts = count_chars(s1)\n    return s0_counts == s1_counts\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl8b8y6fl.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n  UndefVarError:\
    \ count_chars not defined\n  Stacktrace:\n   [1] same_chars(s0::String, s1::String)\n\
    \     @ Main /tmp/tmpl8b8y6fl.jl:17\n   [2] macro expansion\n     @ /tmp/tmpl8b8y6fl.jl:26\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl8b8y6fl.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpl8b8y6fl.jl:27\n  Test threw exception\n  Expression:\
    \ candidate(\"abcd\", \"dddddddabc\") == true\n  UndefVarError: count_chars not\
    \ defined\n  Stacktrace:\n   [1] same_chars(s0::String, s1::String)\n     @ Main\
    \ /tmp/tmpl8b8y6fl.jl:17\n   [2] macro expansion\n     @ /tmp/tmpl8b8y6fl.jl:27\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl8b8y6fl.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpl8b8y6fl.jl:28\n  Test threw exception\n  Expression:\
    \ candidate(\"dddddddabc\", \"abcd\") == true\n  UndefVarError: count_chars not\
    \ defined\n  Stacktrace:\n   [1] same_chars(s0::String, s1::String)\n     @ Main\
    \ /tmp/tmpl8b8y6fl.jl:17\n   [2] macro expansion\n     @ /tmp/tmpl8b8y6fl.jl:28\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl8b8y6fl.jl:25\ntest set:\
    \ Error During Test at /tmp/tmpl8b8y6fl.jl:29\n  Test threw exception\n  Expression:\
    \ candidate(\"eabcd\", \"dddddddabc\") == false\n  UndefVarError: count_chars\
    \ not defined\n  Stacktrace:\n   [1] same_chars(s0::String, s1::String)\n    \
    \ @ Main /tmp/tmpl8b8y6fl.jl:17\n   [2] macro expansion\n     @ /tmp/tmpl8b8y6fl.jl:29\
    \ [inlined]\n   [3] macro expansion\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n   [4] top-level scope\n     @ /tmp/tmpl8b8"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 7 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl8b8y6fl.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyjv9sebd.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpyjv9sebd.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjv9sebd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyjv9sebd.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpyjv9sebd.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjv9sebd.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpyjv9sebd.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpyjv9sebd.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyjv9sebd.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyjv9sebd.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if !(s0[i]\
    \ in s1)\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdo4zus_q.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdo4zus_q.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdo4zus_q.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdo4zus_q.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpdo4zus_q.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdo4zus_q.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdo4zus_q.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdo4zus_q.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdo4zus_q.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdo4zus_q.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "b'test set: Error During Test at /tmp/tmpo8msn3w8.jl:24\\n  Test threw\
    \ exception\\n  Expression: candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") ==\
    \ true\\n  MethodError: Cannot `convert` an object of type Nothing to an object\
    \ of type Bool\\n  Closest candidates are:\\n    convert(::Type{T}, !Matched::T)\
    \ where T<:Number at number.jl:6\\n    convert(::Type{T}, !Matched::Number) where\
    \ T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ same_chars(s0::String, s1::String)\\n     @ Main /tmp/tmpo8msn3w8.jl:18\\n \
    \  [2] macro expansion\\n     @ /tmp/tmpo8msn3w8.jl:24 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo8msn3w8.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpo8msn3w8.jl:25\\n  Test threw exception\\n  Expression:\
    \ candidate(\"abcd\", \"dddddddabc\") == true\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number) where T<:Number at number.jl:7\\n    convert(::Type{T}, !Matched::Base.TwicePrecision)\
    \ where T<:Number at twiceprecision.jl:250\\n    ...\\n  Stacktrace:\\n   [1]\
    \ same_chars(s0::String, s1::String)\\n     @ Main /tmp/tmpo8msn3w8.jl:18\\n \
    \  [2] macro expansion\\n     @ /tmp/tmpo8msn3w8.jl:25 [inlined]\\n   [3] macro\
    \ expansion\\n     @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\\n   [4] top-level scope\\n     @ /tmp/tmpo8msn3w8.jl:23\\ntest set:\
    \ Error During Test at /tmp/tmpo8msn3w8.jl:26\\n  Test threw exception\\n  Expression:\
    \ candidate(\"dddddddabc\", \"abcd\") == true\\n  MethodError: Cannot `convert`\
    \ an object of type Nothing to an object of type Bool\\n  Closest candidates are:\\\
    n    convert(::Type{T}, !Matched::T) where T<:Number at number.jl:6\\n    convert(::Type{T},\
    \ !Matched::Number"
  stderr: None
  exit_code: -1
  status: Timeout
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpql_o_ouk.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpql_o_ouk.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpql_o_ouk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpql_o_ouk.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpql_o_ouk.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpql_o_ouk.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpql_o_ouk.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpql_o_ouk.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpql_o_ouk.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpql_o_ouk.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc6iiwrkq.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc6iiwrkq.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6iiwrkq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc6iiwrkq.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpc6iiwrkq.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6iiwrkq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc6iiwrkq.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc6iiwrkq.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6iiwrkq.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc6iiwrkq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    s0_chars = sort(collect(s0))\n\
    \    s1_chars = sort(collect(s1))\n    return s0_chars == s1_chars\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6idt89mn.jl:26\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp6idt89mn.jl:26 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6idt89mn.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6idt89mn.jl:27\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp6idt89mn.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6idt89mn.jl:25\ntest set: Test\
    \ Failed at /tmp/tmp6idt89mn.jl:28\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp6idt89mn.jl:28 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6idt89mn.jl:25\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6idt89mn.jl:23\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdx9aaczu.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdx9aaczu.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdx9aaczu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdx9aaczu.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpdx9aaczu.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdx9aaczu.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdx9aaczu.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdx9aaczu.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdx9aaczu.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdx9aaczu.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_fnabacp.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_fnabacp.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fnabacp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_fnabacp.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_fnabacp.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fnabacp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_fnabacp.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_fnabacp.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_fnabacp.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_fnabacp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbjzxq548.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbjzxq548.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbjzxq548.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbjzxq548.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpbjzxq548.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbjzxq548.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbjzxq548.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbjzxq548.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbjzxq548.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbjzxq548.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0 = sort(s0)\n    s1 = sort(s1)\n    for\
    \ i in 1:length(s0)\n        if s0[i] != s1[i]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp378sev3j.jl:34\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp378sev3j.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp378sev3j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp378sev3j.jl:35\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp378sev3j.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp378sev3j.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp378sev3j.jl:36\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp378sev3j.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp378sev3j.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp378sev3j.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0lyibgjj.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp0lyibgjj.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0lyibgjj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0lyibgjj.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp0lyibgjj.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0lyibgjj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp0lyibgjj.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp0lyibgjj.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0lyibgjj.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0lyibgjj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptqgcth8z.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptqgcth8z.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptqgcth8z.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptqgcth8z.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmptqgcth8z.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptqgcth8z.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptqgcth8z.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptqgcth8z.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptqgcth8z.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptqgcth8z.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgjro4lxq.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpgjro4lxq.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgjro4lxq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgjro4lxq.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpgjro4lxq.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgjro4lxq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpgjro4lxq.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpgjro4lxq.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgjro4lxq.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgjro4lxq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd9x8c43_.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpd9x8c43_.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9x8c43_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd9x8c43_.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpd9x8c43_.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9x8c43_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpd9x8c43_.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpd9x8c43_.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd9x8c43_.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd9x8c43_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo_nl4s_i.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo_nl4s_i.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_nl4s_i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo_nl4s_i.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpo_nl4s_i.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_nl4s_i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpo_nl4s_i.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo_nl4s_i.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_nl4s_i.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_nl4s_i.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_gdh_iv3.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_gdh_iv3.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gdh_iv3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_gdh_iv3.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_gdh_iv3.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gdh_iv3.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_gdh_iv3.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_gdh_iv3.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_gdh_iv3.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_gdh_iv3.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw7hhp37u.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpw7hhp37u.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw7hhp37u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw7hhp37u.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpw7hhp37u.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw7hhp37u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw7hhp37u.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw7hhp37u.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw7hhp37u.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw7hhp37u.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqqzr0cb9.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqqzr0cb9.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqqzr0cb9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqqzr0cb9.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpqqzr0cb9.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqqzr0cb9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpqqzr0cb9.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpqqzr0cb9.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqqzr0cb9.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqqzr0cb9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_w0u_nw9.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_w0u_nw9.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_w0u_nw9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_w0u_nw9.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp_w0u_nw9.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_w0u_nw9.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp_w0u_nw9.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp_w0u_nw9.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_w0u_nw9.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_w0u_nw9.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if !contains(s1,\
    \ s0[i])\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptv9pevtq.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptv9pevtq.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptv9pevtq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptv9pevtq.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmptv9pevtq.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptv9pevtq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptv9pevtq.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptv9pevtq.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptv9pevtq.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptv9pevtq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    s0 = sort(s0)\n    s1 = sort(s1)\n    for\
    \ i in 1:length(s0)\n        if s0[i] != s1[i]\n            return false\n   \
    \     end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\
    \t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\"\
    , \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\
    \t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"aaccc\") ==\
    \ false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp38dps0tw.jl:34\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp38dps0tw.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp38dps0tw.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp38dps0tw.jl:35\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp38dps0tw.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp38dps0tw.jl:33\ntest set: Test\
    \ Failed at /tmp/tmp38dps0tw.jl:36\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp38dps0tw.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp38dps0tw.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp38dps0tw.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    return sort(collect(s0))\
    \ == sort(collect(s1))\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxpn5xz_1.jl:24\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxpn5xz_1.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxpn5xz_1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxpn5xz_1.jl:25\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpxpn5xz_1.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxpn5xz_1.jl:23\ntest set: Test\
    \ Failed at /tmp/tmpxpn5xz_1.jl:26\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpxpn5xz_1.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxpn5xz_1.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxpn5xz_1.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if !(s0[i]\
    \ in s1)\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpytqtlmpf.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpytqtlmpf.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpytqtlmpf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpytqtlmpf.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpytqtlmpf.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpytqtlmpf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpytqtlmpf.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpytqtlmpf.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpytqtlmpf.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpytqtlmpf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    s0_counts = Dict{Char,\
    \ Int}()\n    s1_counts = Dict{Char, Int}()\n    for c in s0\n        if haskey(s0_counts,\
    \ c)\n            s0_counts[c] += 1\n        else\n            s0_counts[c] =\
    \ 1\n        end\n    end\n    for c in s1\n        if haskey(s1_counts, c)\n\
    \            s1_counts[c] += 1\n        else\n            s1_counts[c] = 1\n \
    \       end\n    end\n    return s0_counts == s1_counts\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfphvumkr.jl:40\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpfphvumkr.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfphvumkr.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpfphvumkr.jl:41\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpfphvumkr.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfphvumkr.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpfphvumkr.jl:42\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpfphvumkr.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfphvumkr.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfphvumkr.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpot06az0u.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpot06az0u.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot06az0u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpot06az0u.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpot06az0u.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot06az0u.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpot06az0u.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpot06az0u.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpot06az0u.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpot06az0u.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpojed7ii5.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpojed7ii5.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpojed7ii5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpojed7ii5.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpojed7ii5.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpojed7ii5.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpojed7ii5.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpojed7ii5.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpojed7ii5.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpojed7ii5.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if !(c in s1)\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp45oo4hna.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp45oo4hna.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45oo4hna.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp45oo4hna.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp45oo4hna.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45oo4hna.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp45oo4hna.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp45oo4hna.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp45oo4hna.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp45oo4hna.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in s0\n        if count(s0, i) != count(s1,\
    \ i)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpflb2i_vj.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpflb2i_vj.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpflb2i_vj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpflb2i_vj.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpflb2i_vj.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpflb2i_vj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpflb2i_vj.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpflb2i_vj.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpflb2i_vj.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpflb2i_vj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in s0\n        if i \u2209 s1\n    \
    \        return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc_4py48i.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc_4py48i.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_4py48i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc_4py48i.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpc_4py48i.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_4py48i.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpc_4py48i.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpc_4py48i.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc_4py48i.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc_4py48i.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2qhuhhuy.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp2qhuhhuy.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2qhuhhuy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2qhuhhuy.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp2qhuhhuy.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2qhuhhuy.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp2qhuhhuy.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp2qhuhhuy.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2qhuhhuy.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2qhuhhuy.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptkeo5e8o.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmptkeo5e8o.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptkeo5e8o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptkeo5e8o.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmptkeo5e8o.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptkeo5e8o.jl:31\ntest set: Test\
    \ Failed at /tmp/tmptkeo5e8o.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmptkeo5e8o.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptkeo5e8o.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptkeo5e8o.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3tz_o7v_.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp3tz_o7v_.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3tz_o7v_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3tz_o7v_.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp3tz_o7v_.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3tz_o7v_.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp3tz_o7v_.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp3tz_o7v_.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3tz_o7v_.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3tz_o7v_.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp98jwr_lj.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp98jwr_lj.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp98jwr_lj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp98jwr_lj.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp98jwr_lj.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp98jwr_lj.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp98jwr_lj.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp98jwr_lj.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp98jwr_lj.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp98jwr_lj.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp08i0i3y0.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp08i0i3y0.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp08i0i3y0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp08i0i3y0.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp08i0i3y0.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp08i0i3y0.jl:31\ntest set: Test\
    \ Failed at /tmp/tmp08i0i3y0.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp08i0i3y0.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp08i0i3y0.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp08i0i3y0.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ return false\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsminvj7e.jl:25\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsminvj7e.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsminvj7e.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpsminvj7e.jl:26\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpsminvj7e.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsminvj7e.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpsminvj7e.jl:27\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpsminvj7e.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsminvj7e.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsminvj7e.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if !(c in s1)\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg8rosbr2.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpg8rosbr2.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg8rosbr2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpg8rosbr2.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpg8rosbr2.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg8rosbr2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpg8rosbr2.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpg8rosbr2.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg8rosbr2.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg8rosbr2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ return sort(collect(s0)) == sort(collect(s1))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ppcj3n2.jl:25\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4ppcj3n2.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ppcj3n2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp4ppcj3n2.jl:26\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmp4ppcj3n2.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ppcj3n2.jl:24\ntest set: Test\
    \ Failed at /tmp/tmp4ppcj3n2.jl:27\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmp4ppcj3n2.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ppcj3n2.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ppcj3n2.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppdfctobf.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmppdfctobf.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppdfctobf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppdfctobf.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmppdfctobf.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppdfctobf.jl:31\ntest set: Test\
    \ Failed at /tmp/tmppdfctobf.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmppdfctobf.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmppdfctobf.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppdfctobf.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf96jqt2g.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf96jqt2g.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf96jqt2g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpf96jqt2g.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpf96jqt2g.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf96jqt2g.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpf96jqt2g.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpf96jqt2g.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf96jqt2g.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf96jqt2g.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr6vu3ynt.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr6vu3ynt.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr6vu3ynt.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr6vu3ynt.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpr6vu3ynt.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr6vu3ynt.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr6vu3ynt.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr6vu3ynt.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr6vu3ynt.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr6vu3ynt.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # check if the two strings\
    \ have the same length\n    if length(s0) != length(s1)\n        return false\n\
    \    end\n    # sort the two strings\n    s0_sorted = sort(s0)\n    s1_sorted\
    \ = sort(s1)\n    # check if the two strings are the same\n    if s0_sorted ==\
    \ s1_sorted\n        return true\n    else\n        return false\n    end\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo8vezzek.jl:36\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpo8vezzek.jl:36 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8vezzek.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpo8vezzek.jl:37\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpo8vezzek.jl:37 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8vezzek.jl:35\ntest set: Test\
    \ Failed at /tmp/tmpo8vezzek.jl:38\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpo8vezzek.jl:38 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo8vezzek.jl:35\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo8vezzek.jl:33\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if !(c in s1)\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpme5pg0xq.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpme5pg0xq.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpme5pg0xq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpme5pg0xq.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpme5pg0xq.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpme5pg0xq.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpme5pg0xq.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpme5pg0xq.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpme5pg0xq.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpme5pg0xq.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if !(c in s1)\n     \
    \       return false\n        end\n    end\n    return true\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\",\
    \ \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcbbdclbp.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpcbbdclbp.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcbbdclbp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcbbdclbp.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpcbbdclbp.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcbbdclbp.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpcbbdclbp.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpcbbdclbp.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcbbdclbp.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcbbdclbp.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if count(s0,\
    \ s0[i]) != count(s1, s0[i])\n            return false\n        end\n    end\n\
    \    return true\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw13zmktb.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpw13zmktb.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw13zmktb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw13zmktb.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpw13zmktb.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw13zmktb.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpw13zmktb.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpw13zmktb.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw13zmktb.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw13zmktb.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ return false\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx0g7psgp.jl:25\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpx0g7psgp.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0g7psgp.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpx0g7psgp.jl:26\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpx0g7psgp.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0g7psgp.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpx0g7psgp.jl:27\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpx0g7psgp.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx0g7psgp.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx0g7psgp.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for c in s0\n        if count(s0, c) != count(s1,\
    \ c)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr5wvolq2.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpr5wvolq2.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr5wvolq2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr5wvolq2.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpr5wvolq2.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr5wvolq2.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpr5wvolq2.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpr5wvolq2.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr5wvolq2.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr5wvolq2.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    return sort(collect(s0))\
    \ == sort(collect(s1))\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps75_ixs8.jl:24\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps75_ixs8.jl:24 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps75_ixs8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps75_ixs8.jl:25\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmps75_ixs8.jl:25 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps75_ixs8.jl:23\ntest set: Test\
    \ Failed at /tmp/tmps75_ixs8.jl:26\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps75_ixs8.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps75_ixs8.jl:23\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps75_ixs8.jl:21\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if !(s0[i]\
    \ in s1)\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy60fpwys.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy60fpwys.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy60fpwys.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy60fpwys.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpy60fpwys.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy60fpwys.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpy60fpwys.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpy60fpwys.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy60fpwys.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy60fpwys.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    s0_counts = Dict{Char,\
    \ Int}()\n    s1_counts = Dict{Char, Int}()\n    for c in s0\n        s0_counts[c]\
    \ = get(s0_counts, c, 0) + 1\n    end\n    for c in s1\n        s1_counts[c] =\
    \ get(s1_counts, c, 0) + 1\n    end\n    return s0_counts == s1_counts\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdj48_aw7.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdj48_aw7.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdj48_aw7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdj48_aw7.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpdj48_aw7.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdj48_aw7.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpdj48_aw7.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdj48_aw7.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdj48_aw7.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdj48_aw7.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in s0\n        if count(s0, i) != count(s1,\
    \ i)\n            return false\n        end\n    end\n    return true\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\"\
    , \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\"\
    ) == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"\
    eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\"\
    ) == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\
    \t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpij77j47s.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpij77j47s.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij77j47s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpij77j47s.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpij77j47s.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij77j47s.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpij77j47s.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpij77j47s.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpij77j47s.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpij77j47s.jl:29\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in s0\n        if i in s1\n        \
    \    deleteat!(s1, findfirst(s1, i))\n        else\n            return false\n\
    \        end\n    end\n    return true\nend\nusing Test\n\n@testset begin\n\n\
    candidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps7gdy12q.jl:34\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmps7gdy12q.jl:34 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps7gdy12q.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps7gdy12q.jl:35\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmps7gdy12q.jl:35 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps7gdy12q.jl:33\ntest set: Test\
    \ Failed at /tmp/tmps7gdy12q.jl:36\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmps7gdy12q.jl:36 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmps7gdy12q.jl:33\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps7gdy12q.jl:31\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    s0_counts = Dict{Char,\
    \ Int}()\n    s1_counts = Dict{Char, Int}()\n    for c in s0\n        if haskey(s0_counts,\
    \ c)\n            s0_counts[c] += 1\n        else\n            s0_counts[c] =\
    \ 1\n        end\n    end\n    for c in s1\n        if haskey(s1_counts, c)\n\
    \            s1_counts[c] += 1\n        else\n            s1_counts[c] = 1\n \
    \       end\n    end\n    return s0_counts == s1_counts\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = same_chars;\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\"\
    ) == true)\n\t@test(candidate(\"abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"\
    dddddddabc\", \"abcd\") == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\"\
    ) == false)\n\t@test(candidate(\"abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddddabc\") == false)\n\t@test(candidate(\"aabb\", \"\
    aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdbu4anlb.jl:40\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpdbu4anlb.jl:40 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdbu4anlb.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpdbu4anlb.jl:41\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpdbu4anlb.jl:41 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdbu4anlb.jl:39\ntest set: Test\
    \ Failed at /tmp/tmpdbu4anlb.jl:42\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpdbu4anlb.jl:42 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdbu4anlb.jl:39\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdbu4anlb.jl:37\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    # YOUR CODE HERE\n   \
    \ return false\nend\nusing Test\n\n@testset begin\n\ncandidate = same_chars;\n\
    \t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"\
    abcd\", \"dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\")\
    \ == true)\n\t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"\
    abcd\", \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpser75qnp.jl:25\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpser75qnp.jl:25 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpser75qnp.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpser75qnp.jl:26\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpser75qnp.jl:26 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpser75qnp.jl:24\ntest set: Test\
    \ Failed at /tmp/tmpser75qnp.jl:27\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpser75qnp.jl:27 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpser75qnp.jl:24\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpser75qnp.jl:22\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    Check if two words have the same characters.\n    >>> same_chars('eabcdzzzz',\
    \ 'dddzzzzzzzddeddabc')\n    True\n    >>> same_chars('abcd', 'dddddddabc')\n\
    \    True\n    >>> same_chars('dddddddabc', 'abcd')\n    True\n    >>> same_chars('eabcd',\
    \ 'dddddddabc')\n    False\n    >>> same_chars('abcd', 'dddddddabce')\n    False\n\
    \    >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n    False\n    \"\"\"\n\
    function same_chars(s0::String, s1::String)::Bool \n    if length(s0) != length(s1)\n\
    \        return false\n    end\n    for i in 1:length(s0)\n        if !(s0[i]\
    \ in s1)\n            return false\n        end\n    end\n    return true\nend\n\
    using Test\n\n@testset begin\n\ncandidate = same_chars;\n\t@test(candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true)\n\t@test(candidate(\"abcd\", \"\
    dddddddabc\") == true)\n\t@test(candidate(\"dddddddabc\", \"abcd\") == true)\n\
    \t@test(candidate(\"eabcd\", \"dddddddabc\") == false)\n\t@test(candidate(\"abcd\"\
    , \"dddddddabcf\") == false)\n\t@test(candidate(\"eabcdzzzz\", \"dddzzzzzzzddddabc\"\
    ) == false)\n\t@test(candidate(\"aabb\", \"aaccc\") == false)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbs9p3img.jl:32\n  Expression: candidate(\"\
    eabcdzzzz\", \"dddzzzzzzzddeddabc\") == true\n   Evaluated: false == true\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpbs9p3img.jl:32 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbs9p3img.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbs9p3img.jl:33\n  Expression: candidate(\"abcd\", \"dddddddabc\"\
    ) == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n  \
    \ @ /tmp/tmpbs9p3img.jl:33 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbs9p3img.jl:31\ntest set: Test\
    \ Failed at /tmp/tmpbs9p3img.jl:34\n  Expression: candidate(\"dddddddabc\", \"\
    abcd\") == true\n   Evaluated: false == true\nStacktrace:\n [1] macro expansion\n\
    \   @ /tmp/tmpbs9p3img.jl:34 [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbs9p3img.jl:31\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     3      7\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbs9p3img.jl:29\n"
  exit_code: 1
  status: SyntaxError
