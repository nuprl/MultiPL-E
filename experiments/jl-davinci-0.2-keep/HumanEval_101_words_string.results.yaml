name: HumanEval_101_words_string
language: julia
results:
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt5usqfo8.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt5usqfo8.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt5usqfo8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpt5usqfo8.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt5usqfo8.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt5usqfo8.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt5usqfo8.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3o61f4wi.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3o61f4wi.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3o61f4wi.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3o61f4wi.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3o61f4wi.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3o61f4wi.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3o61f4wi.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1qipkxmp.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1qipkxmp.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1qipkxmp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1qipkxmp.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1qipkxmp.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1qipkxmp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1qipkxmp.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1qipkxmp.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1qipkxmp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1qipkxmp.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1qipkxmp.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1qipkxmp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1qipkxmp.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1qipkxmp.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplu77hwiu.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplu77hwiu.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplu77hwiu.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplu77hwiu.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplu77hwiu.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplu77hwiu.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplu77hwiu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeemmaram.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeemmaram.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeemmaram.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpeemmaram.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeemmaram.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeemmaram.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeemmaram.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4xjhxagb.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4xjhxagb.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4xjhxagb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4xjhxagb.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4xjhxagb.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4xjhxagb.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4xjhxagb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi8n1emch.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi8n1emch.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi8n1emch.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi8n1emch.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi8n1emch.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi8n1emch.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi8n1emch.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzav7_0pq.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzav7_0pq.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzav7_0pq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpzav7_0pq.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzav7_0pq.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzav7_0pq.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzav7_0pq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpad58m24u.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpad58m24u.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpad58m24u.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpad58m24u.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpad58m24u.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpad58m24u.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpad58m24u.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi2ginhw0.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi2ginhw0.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi2ginhw0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi2ginhw0.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi2ginhw0.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi2ginhw0.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi2ginhw0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7tynivni.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7tynivni.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7tynivni.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp7tynivni.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7tynivni.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7tynivni.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7tynivni.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, \", \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpswtsr2pe.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpswtsr2pe.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpswtsr2pe.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpswtsr2pe.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"my name\"] == [\"Hi\",\
    \ \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpswtsr2pe.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpswtsr2pe.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpswtsr2pe.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,\", \"two\", \"three\", \"four\", \"five\", \"six,\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpswtsr2pe.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpswtsr2pe.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpswtsr2pe.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpswtsr2pe.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpswtsr2pe.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpswtsr2pe.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal\"]\n   Evaluated: [\"ahmed     \", \"gamal\"] == [\"\
    ahmed\", \"gamal\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpswtsr2pe.jl:22\
    \ [inlined]\n [2] macro expansion\n   @ /bui"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpswtsr2pe.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpf3bqzhsn.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf3bqzhsn.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3bqzhsn.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpf3bqzhsn.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf3bqzhsn.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3bqzhsn.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpf3bqzhsn.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpf3bqzhsn.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3bqzhsn.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpf3bqzhsn.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpf3bqzhsn.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpf3bqzhsn.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpf3bqzhsn.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf3bqzhsn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl2bopmar.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl2bopmar.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl2bopmar.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpl2bopmar.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl2bopmar.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl2bopmar.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl2bopmar.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa3lawzu4.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa3lawzu4.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3lawzu4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpa3lawzu4.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa3lawzu4.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa3lawzu4.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa3lawzu4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpddzp5hem.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpddzp5hem.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpddzp5hem.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpddzp5hem.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpddzp5hem.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpddzp5hem.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpddzp5hem.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplsylw5jh.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplsylw5jh.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplsylw5jh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplsylw5jh.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplsylw5jh.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplsylw5jh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplsylw5jh.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplsylw5jh.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplsylw5jh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplsylw5jh.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplsylw5jh.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplsylw5jh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplsylw5jh.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplsylw5jh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3f0fz65m.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3f0fz65m.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3f0fz65m.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3f0fz65m.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3f0fz65m.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3f0fz65m.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3f0fz65m.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5hljup08.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5hljup08.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5hljup08.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5hljup08.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5hljup08.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5hljup08.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5hljup08.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplqj8z4v0.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplqj8z4v0.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplqj8z4v0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplqj8z4v0.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplqj8z4v0.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplqj8z4v0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplqj8z4v0.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplqj8z4v0.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplqj8z4v0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplqj8z4v0.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplqj8z4v0.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplqj8z4v0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplqj8z4v0.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplqj8z4v0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwtx4mpa2.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwtx4mpa2.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtx4mpa2.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpwtx4mpa2.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwtx4mpa2.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtx4mpa2.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpwtx4mpa2.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwtx4mpa2.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtx4mpa2.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpwtx4mpa2.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwtx4mpa2.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwtx4mpa2.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpwtx4mpa2.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwtx4mpa2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwfh_1q1m.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwfh_1q1m.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfh_1q1m.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpwfh_1q1m.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwfh_1q1m.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfh_1q1m.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpwfh_1q1m.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwfh_1q1m.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfh_1q1m.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpwfh_1q1m.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpwfh_1q1m.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwfh_1q1m.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpwfh_1q1m.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwfh_1q1m.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplb2l2itr.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplb2l2itr.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplb2l2itr.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplb2l2itr.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplb2l2itr.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplb2l2itr.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplb2l2itr.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpb29ofaj3.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb29ofaj3.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb29ofaj3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpb29ofaj3.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\"\
    , \"five\", \"\", \"six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb29ofaj3.jl:18 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb29ofaj3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpb29ofaj3.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"\", \"my\", \"name\"] ==\
    \ [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb29ofaj3.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb29ofaj3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpb29ofaj3.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \"\", \"two\", \"\", \"three\", \"\", \"\
    four\", \"\", \"five\", \"\", \"six\", \"\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpb29ofaj3.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpb29ofaj3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpb29ofaj3.jl:21\n  Expression: candidat"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb29ofaj3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr_id4fjt.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr_id4fjt.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr_id4fjt.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpr_id4fjt.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr_id4fjt.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr_id4fjt.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr_id4fjt.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgc_xzcbj.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgc_xzcbj.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgc_xzcbj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpgc_xzcbj.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgc_xzcbj.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgc_xzcbj.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgc_xzcbj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp75uo5jaw.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp75uo5jaw.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp75uo5jaw.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp75uo5jaw.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp75uo5jaw.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp75uo5jaw.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp75uo5jaw.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc6_01r0j.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc6_01r0j.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6_01r0j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpc6_01r0j.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc6_01r0j.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6_01r0j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpc6_01r0j.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc6_01r0j.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6_01r0j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpc6_01r0j.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpc6_01r0j.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc6_01r0j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpc6_01r0j.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc6_01r0j.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp350lmfq0.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp350lmfq0.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp350lmfq0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp350lmfq0.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp350lmfq0.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp350lmfq0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp350lmfq0.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp350lmfq0.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp350lmfq0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp350lmfq0.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp350lmfq0.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp350lmfq0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp350lmfq0.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp350lmfq0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1k_v0akb.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1k_v0akb.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1k_v0akb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1k_v0akb.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1k_v0akb.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1k_v0akb.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1k_v0akb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm2g6l2on.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm2g6l2on.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm2g6l2on.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpm2g6l2on.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpm2g6l2on.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpm2g6l2on.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm2g6l2on.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt36olbxr.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt36olbxr.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt36olbxr.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpt36olbxr.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt36olbxr.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt36olbxr.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt36olbxr.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv6se_au4.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv6se_au4.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv6se_au4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpv6se_au4.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpv6se_au4.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpv6se_au4.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv6se_au4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptr30soa6.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptr30soa6.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptr30soa6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptr30soa6.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptr30soa6.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptr30soa6.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptr30soa6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1elim9h2.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1elim9h2.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1elim9h2.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1elim9h2.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1elim9h2.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1elim9h2.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1elim9h2.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpylrd6_i1.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpylrd6_i1.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpylrd6_i1.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpylrd6_i1.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpylrd6_i1.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpylrd6_i1.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpylrd6_i1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplwhad38z.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplwhad38z.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplwhad38z.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplwhad38z.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplwhad38z.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplwhad38z.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplwhad38z.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpecxe5vgx.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpecxe5vgx.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpecxe5vgx.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpecxe5vgx.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpecxe5vgx.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpecxe5vgx.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpecxe5vgx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfpwlikme.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfpwlikme.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfpwlikme.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpfpwlikme.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfpwlikme.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfpwlikme.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfpwlikme.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpei0ec28r.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpei0ec28r.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpei0ec28r.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpei0ec28r.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpei0ec28r.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpei0ec28r.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpei0ec28r.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpubw0y_88.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpubw0y_88.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpubw0y_88.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpubw0y_88.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpubw0y_88.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpubw0y_88.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpubw0y_88.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1197o73a.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1197o73a.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1197o73a.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1197o73a.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1197o73a.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1197o73a.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1197o73a.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1197o73a.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1197o73a.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1197o73a.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1197o73a.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1197o73a.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1197o73a.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1197o73a.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmv8why5d.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmv8why5d.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmv8why5d.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmv8why5d.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmv8why5d.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmv8why5d.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmv8why5d.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpodpjcflt.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpodpjcflt.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpodpjcflt.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpodpjcflt.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\"\
    , \"five\", \"\", \"six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpodpjcflt.jl:18 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpodpjcflt.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpodpjcflt.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"\", \"my\", \"name\"] ==\
    \ [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpodpjcflt.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpodpjcflt.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpodpjcflt.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \"\", \"two\", \"\", \"three\", \"\", \"\
    four\", \"\", \"five\", \"\", \"six\", \"\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpodpjcflt.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpodpjcflt.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpodpjcflt.jl:21\n  Expression: candidat"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpodpjcflt.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, \",\")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsegrrq1n.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsegrrq1n.jl:17 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsegrrq1n.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsegrrq1n.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \" two\", \" three\", \" four\", \" five\", \" six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsegrrq1n.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsegrrq1n.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsegrrq1n.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \" my name\"] == [\"Hi\"\
    , \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsegrrq1n.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsegrrq1n.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsegrrq1n.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \" two\", \" three\", \" four\", \" five\"\
    , \" six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsegrrq1n.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsegrrq1n.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsegrrq1n.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] ="
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsegrrq1n.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5suvd09n.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5suvd09n.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5suvd09n.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5suvd09n.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5suvd09n.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5suvd09n.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5suvd09n.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5suvd09n.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5suvd09n.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5suvd09n.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5suvd09n.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5suvd09n.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5suvd09n.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5suvd09n.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvqrkvfxm.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvqrkvfxm.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqrkvfxm.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvqrkvfxm.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvqrkvfxm.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvqrkvfxm.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvqrkvfxm.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5xnwjfz9.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5xnwjfz9.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5xnwjfz9.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5xnwjfz9.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\"\
    , \"five\", \"\", \"six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5xnwjfz9.jl:18 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5xnwjfz9.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5xnwjfz9.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"\", \"my\", \"name\"] ==\
    \ [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5xnwjfz9.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5xnwjfz9.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5xnwjfz9.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \"\", \"two\", \"\", \"three\", \"\", \"\
    four\", \"\", \"five\", \"\", \"six\", \"\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5xnwjfz9.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5xnwjfz9.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5xnwjfz9.jl:21\n  Expression: candidat"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5xnwjfz9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprmzpilp0.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprmzpilp0.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprmzpilp0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprmzpilp0.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprmzpilp0.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprmzpilp0.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprmzpilp0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsa6yhrmz.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsa6yhrmz.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsa6yhrmz.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsa6yhrmz.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsa6yhrmz.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsa6yhrmz.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsa6yhrmz.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsa6yhrmz.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsa6yhrmz.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsa6yhrmz.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsa6yhrmz.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsa6yhrmz.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsa6yhrmz.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsa6yhrmz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnu2l8hnb.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnu2l8hnb.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnu2l8hnb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpnu2l8hnb.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpnu2l8hnb.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpnu2l8hnb.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnu2l8hnb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpygyxzsta.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpygyxzsta.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygyxzsta.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpygyxzsta.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpygyxzsta.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpygyxzsta.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygyxzsta.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwbx4zcwx.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwbx4zcwx.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwbx4zcwx.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpwbx4zcwx.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwbx4zcwx.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwbx4zcwx.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwbx4zcwx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9g0s4dvl.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9g0s4dvl.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9g0s4dvl.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp9g0s4dvl.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9g0s4dvl.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9g0s4dvl.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9g0s4dvl.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprpu6k5ra.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprpu6k5ra.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpu6k5ra.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprpu6k5ra.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprpu6k5ra.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpu6k5ra.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprpu6k5ra.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprpu6k5ra.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpu6k5ra.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprpu6k5ra.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprpu6k5ra.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprpu6k5ra.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprpu6k5ra.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprpu6k5ra.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpftndyofj.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpftndyofj.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpftndyofj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpftndyofj.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpftndyofj.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpftndyofj.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpftndyofj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprvp5rh71.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprvp5rh71.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprvp5rh71.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprvp5rh71.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprvp5rh71.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprvp5rh71.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprvp5rh71.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprvp5rh71.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprvp5rh71.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprvp5rh71.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprvp5rh71.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprvp5rh71.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprvp5rh71.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprvp5rh71.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_f983ae9.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_f983ae9.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_f983ae9.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_f983ae9.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_f983ae9.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_f983ae9.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_f983ae9.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_f983ae9.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_f983ae9.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_f983ae9.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_f983ae9.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_f983ae9.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_f983ae9.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_f983ae9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8abhifjc.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8abhifjc.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8abhifjc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8abhifjc.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8abhifjc.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8abhifjc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8abhifjc.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8abhifjc.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8abhifjc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8abhifjc.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8abhifjc.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8abhifjc.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8abhifjc.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8abhifjc.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy_tr8wiv.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy_tr8wiv.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy_tr8wiv.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy_tr8wiv.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy_tr8wiv.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy_tr8wiv.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy_tr8wiv.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy_tr8wiv.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy_tr8wiv.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy_tr8wiv.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpy_tr8wiv.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy_tr8wiv.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy_tr8wiv.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy_tr8wiv.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7w6n3qxb.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7w6n3qxb.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7w6n3qxb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp7w6n3qxb.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7w6n3qxb.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7w6n3qxb.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7w6n3qxb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"\\s|,\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp29kditag.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp29kditag.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp29kditag.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp29kditag.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\"\
    , \"five\", \"\", \"six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp29kditag.jl:18 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp29kditag.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp29kditag.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"\", \"my\", \"name\"] ==\
    \ [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp29kditag.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp29kditag.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp29kditag.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \"\", \"two\", \"\", \"three\", \"\", \"\
    four\", \"\", \"five\", \"\", \"six\", \"\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp29kditag.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp29kditag.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp29kditag.jl:21\n  Expression: candidat"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp29kditag.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsbtt5e2v.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsbtt5e2v.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsbtt5e2v.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsbtt5e2v.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsbtt5e2v.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsbtt5e2v.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsbtt5e2v.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqn7rw9sp.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqn7rw9sp.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqn7rw9sp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpqn7rw9sp.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqn7rw9sp.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqn7rw9sp.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqn7rw9sp.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfiqd032z.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfiqd032z.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfiqd032z.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpfiqd032z.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfiqd032z.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfiqd032z.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfiqd032z.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr21a4t74.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr21a4t74.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr21a4t74.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpr21a4t74.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpr21a4t74.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpr21a4t74.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr21a4t74.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_5y51sms.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_5y51sms.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_5y51sms.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_5y51sms.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_5y51sms.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_5y51sms.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_5y51sms.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_1uj6l7h.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_1uj6l7h.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_1uj6l7h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_1uj6l7h.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_1uj6l7h.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_1uj6l7h.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_1uj6l7h.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpobymfuzm.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpobymfuzm.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobymfuzm.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpobymfuzm.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpobymfuzm.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpobymfuzm.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpobymfuzm.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprx3t7u81.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprx3t7u81.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprx3t7u81.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprx3t7u81.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprx3t7u81.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprx3t7u81.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprx3t7u81.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpetx6fkub.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpetx6fkub.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpetx6fkub.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpetx6fkub.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpetx6fkub.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpetx6fkub.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpetx6fkub.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpetx6fkub.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpetx6fkub.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpetx6fkub.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpetx6fkub.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpetx6fkub.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpetx6fkub.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpetx6fkub.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx8tt5h4j.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx8tt5h4j.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx8tt5h4j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx8tt5h4j.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\"\
    , \"five\", \"\", \"six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx8tt5h4j.jl:18 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx8tt5h4j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx8tt5h4j.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"\", \"my\", \"name\"] ==\
    \ [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx8tt5h4j.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx8tt5h4j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx8tt5h4j.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \"\", \"two\", \"\", \"three\", \"\", \"\
    four\", \"\", \"five\", \"\", \"six\", \"\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpx8tt5h4j.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpx8tt5h4j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpx8tt5h4j.jl:21\n  Expression: candidat"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx8tt5h4j.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkd070l69.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkd070l69.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkd070l69.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkd070l69.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkd070l69.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkd070l69.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkd070l69.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkd070l69.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkd070l69.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkd070l69.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpkd070l69.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkd070l69.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkd070l69.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkd070l69.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa7hp1cai.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa7hp1cai.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa7hp1cai.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpa7hp1cai.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa7hp1cai.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa7hp1cai.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa7hp1cai.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpduognqoo.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpduognqoo.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpduognqoo.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpduognqoo.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpduognqoo.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpduognqoo.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpduognqoo.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj9mo4vxm.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj9mo4vxm.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj9mo4vxm.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpj9mo4vxm.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj9mo4vxm.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj9mo4vxm.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj9mo4vxm.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptrwysawb.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptrwysawb.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptrwysawb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptrwysawb.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\"\
    , \"five\", \"\", \"six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptrwysawb.jl:18 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptrwysawb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptrwysawb.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"\", \"my\", \"name\"] ==\
    \ [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptrwysawb.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptrwysawb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptrwysawb.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \"\", \"two\", \"\", \"three\", \"\", \"\
    four\", \"\", \"five\", \"\", \"six\", \"\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptrwysawb.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptrwysawb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptrwysawb.jl:21\n  Expression: candidat"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptrwysawb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe7tgin6j.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe7tgin6j.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe7tgin6j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpe7tgin6j.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe7tgin6j.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe7tgin6j.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe7tgin6j.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5r7vmwka.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5r7vmwka.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5r7vmwka.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5r7vmwka.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5r7vmwka.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5r7vmwka.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5r7vmwka.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_t251eth.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_t251eth.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_t251eth.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_t251eth.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_t251eth.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_t251eth.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_t251eth.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp53ebuaxh.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp53ebuaxh.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp53ebuaxh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp53ebuaxh.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\"\
    , \"five\", \"\", \"six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp53ebuaxh.jl:18 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp53ebuaxh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp53ebuaxh.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"\", \"my\", \"name\"] ==\
    \ [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp53ebuaxh.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp53ebuaxh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp53ebuaxh.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \"\", \"two\", \"\", \"three\", \"\", \"\
    four\", \"\", \"five\", \"\", \"six\", \"\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp53ebuaxh.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp53ebuaxh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp53ebuaxh.jl:21\n  Expression: candidat"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp53ebuaxh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzl5xs35f.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzl5xs35f.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzl5xs35f.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpzl5xs35f.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzl5xs35f.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzl5xs35f.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzl5xs35f.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpssk3kqz6.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpssk3kqz6.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpssk3kqz6.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpssk3kqz6.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpssk3kqz6.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpssk3kqz6.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpssk3kqz6.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpym128___.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpym128___.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpym128___.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpym128___.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpym128___.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpym128___.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpym128___.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa2l_l6l0.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2l_l6l0.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2l_l6l0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpa2l_l6l0.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa2l_l6l0.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa2l_l6l0.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa2l_l6l0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8oxhn82t.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8oxhn82t.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8oxhn82t.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8oxhn82t.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8oxhn82t.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8oxhn82t.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8oxhn82t.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8oxhn82t.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8oxhn82t.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8oxhn82t.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp8oxhn82t.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8oxhn82t.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8oxhn82t.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8oxhn82t.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp12lrkeuj.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp12lrkeuj.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp12lrkeuj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp12lrkeuj.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp12lrkeuj.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp12lrkeuj.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp12lrkeuj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4ngr8ek0.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4ngr8ek0.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ngr8ek0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4ngr8ek0.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4ngr8ek0.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4ngr8ek0.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4ngr8ek0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcjn93mm1.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcjn93mm1.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcjn93mm1.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpcjn93mm1.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpcjn93mm1.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpcjn93mm1.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcjn93mm1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi_3i5fon.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi_3i5fon.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_3i5fon.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi_3i5fon.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi_3i5fon.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_3i5fon.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi_3i5fon.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi_3i5fon.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_3i5fon.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi_3i5fon.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi_3i5fon.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi_3i5fon.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi_3i5fon.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi_3i5fon.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqwyj7nnl.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqwyj7nnl.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqwyj7nnl.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpqwyj7nnl.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqwyj7nnl.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqwyj7nnl.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpqwyj7nnl.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqwyj7nnl.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqwyj7nnl.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpqwyj7nnl.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpqwyj7nnl.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqwyj7nnl.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpqwyj7nnl.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqwyj7nnl.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8l2q27j5.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8l2q27j5.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8l2q27j5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8l2q27j5.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8l2q27j5.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8l2q27j5.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8l2q27j5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg38kch5r.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg38kch5r.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg38kch5r.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpg38kch5r.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg38kch5r.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg38kch5r.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg38kch5r.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfd7uim1l.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfd7uim1l.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfd7uim1l.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpfd7uim1l.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfd7uim1l.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfd7uim1l.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfd7uim1l.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0uc7kxt5.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0uc7kxt5.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0uc7kxt5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp0uc7kxt5.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0uc7kxt5.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0uc7kxt5.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0uc7kxt5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk4a_dc7z.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk4a_dc7z.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk4a_dc7z.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpk4a_dc7z.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpk4a_dc7z.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpk4a_dc7z.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk4a_dc7z.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpg46h8nb7.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg46h8nb7.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg46h8nb7.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpg46h8nb7.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpg46h8nb7.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpg46h8nb7.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpg46h8nb7.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoxhkos26.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoxhkos26.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoxhkos26.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpoxhkos26.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoxhkos26.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoxhkos26.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoxhkos26.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdy6a_g0w.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdy6a_g0w.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdy6a_g0w.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpdy6a_g0w.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpdy6a_g0w.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpdy6a_g0w.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdy6a_g0w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3hmbv7y4.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3hmbv7y4.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3hmbv7y4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp3hmbv7y4.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp3hmbv7y4.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp3hmbv7y4.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3hmbv7y4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmproe6w4v4.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmproe6w4v4.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmproe6w4v4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmproe6w4v4.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmproe6w4v4.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmproe6w4v4.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmproe6w4v4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl63k5rog.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl63k5rog.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl63k5rog.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpl63k5rog.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl63k5rog.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl63k5rog.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl63k5rog.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi9yu6g1j.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi9yu6g1j.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi9yu6g1j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi9yu6g1j.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi9yu6g1j.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi9yu6g1j.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi9yu6g1j.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5a5g5wqi.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5a5g5wqi.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5a5g5wqi.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5a5g5wqi.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5a5g5wqi.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5a5g5wqi.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5a5g5wqi.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5a5g5wqi.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5a5g5wqi.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5a5g5wqi.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5a5g5wqi.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5a5g5wqi.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5a5g5wqi.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5a5g5wqi.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfzpxjp4q.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfzpxjp4q.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfzpxjp4q.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpfzpxjp4q.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfzpxjp4q.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfzpxjp4q.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfzpxjp4q.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpprwnp4nn.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpprwnp4nn.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpprwnp4nn.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpprwnp4nn.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpprwnp4nn.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpprwnp4nn.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpprwnp4nn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmptvllgve0.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptvllgve0.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptvllgve0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmptvllgve0.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmptvllgve0.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmptvllgve0.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptvllgve0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4o9y9mf0.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4o9y9mf0.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4o9y9mf0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o9y9mf0.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\"\
    , \"five\", \"\", \"six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4o9y9mf0.jl:18 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4o9y9mf0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o9y9mf0.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"\", \"my\", \"name\"] ==\
    \ [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4o9y9mf0.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4o9y9mf0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o9y9mf0.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \"\", \"two\", \"\", \"three\", \"\", \"\
    four\", \"\", \"five\", \"\", \"six\", \"\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4o9y9mf0.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4o9y9mf0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4o9y9mf0.jl:21\n  Expression: candidat"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4o9y9mf0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp4d0he6k.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp4d0he6k.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp4d0he6k.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpp4d0he6k.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp4d0he6k.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp4d0he6k.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp4d0he6k.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpycl8jq_j.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpycl8jq_j.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpycl8jq_j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpycl8jq_j.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpycl8jq_j.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpycl8jq_j.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpycl8jq_j.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi7j_n0yj.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi7j_n0yj.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi7j_n0yj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi7j_n0yj.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi7j_n0yj.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi7j_n0yj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi7j_n0yj.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpi7j_n0yj.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi7j_n0yj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi7j_n0yj.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpi7j_n0yj.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpi7j_n0yj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpi7j_n0yj.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi7j_n0yj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphb4nytbj.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphb4nytbj.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphb4nytbj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphb4nytbj.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphb4nytbj.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphb4nytbj.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphb4nytbj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpydqb1pmz.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpydqb1pmz.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpydqb1pmz.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpydqb1pmz.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpydqb1pmz.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpydqb1pmz.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpydqb1pmz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp71fq7hrv.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp71fq7hrv.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp71fq7hrv.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp71fq7hrv.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp71fq7hrv.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp71fq7hrv.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp71fq7hrv.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5tzoy5e8.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5tzoy5e8.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tzoy5e8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5tzoy5e8.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5tzoy5e8.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tzoy5e8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5tzoy5e8.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5tzoy5e8.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tzoy5e8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5tzoy5e8.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp5tzoy5e8.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5tzoy5e8.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5tzoy5e8.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5tzoy5e8.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeuh3cqtn.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeuh3cqtn.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeuh3cqtn.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpeuh3cqtn.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpeuh3cqtn.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpeuh3cqtn.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeuh3cqtn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxfrula1l.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxfrula1l.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxfrula1l.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxfrula1l.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxfrula1l.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxfrula1l.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxfrula1l.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2aarre2m.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2aarre2m.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2aarre2m.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp2aarre2m.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp2aarre2m.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp2aarre2m.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2aarre2m.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo_pm6sn1.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo_pm6sn1.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_pm6sn1.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpo_pm6sn1.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpo_pm6sn1.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpo_pm6sn1.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo_pm6sn1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph9wnpl3e.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph9wnpl3e.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph9wnpl3e.jl:16\ntest set: Test\
    \ Failed at /tmp/tmph9wnpl3e.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmph9wnpl3e.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph9wnpl3e.jl:16\ntest set: Test\
    \ Failed at /tmp/tmph9wnpl3e.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmph9wnpl3e.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph9wnpl3e.jl:16\ntest set: Test\
    \ Failed at /tmp/tmph9wnpl3e.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmph9wnpl3e.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmph9wnpl3e.jl:16\ntest set: Test\
    \ Failed at /tmp/tmph9wnpl3e.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph9wnpl3e.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, \" \")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp94fcc8mp.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp94fcc8mp.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp94fcc8mp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp94fcc8mp.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp94fcc8mp.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp94fcc8mp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp94fcc8mp.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp94fcc8mp.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp94fcc8mp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp94fcc8mp.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp94fcc8mp.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp94fcc8mp.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp94fcc8mp.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: "
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp94fcc8mp.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprm_4zobh.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprm_4zobh.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprm_4zobh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprm_4zobh.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprm_4zobh.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprm_4zobh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprm_4zobh.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprm_4zobh.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprm_4zobh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprm_4zobh.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmprm_4zobh.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprm_4zobh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprm_4zobh.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprm_4zobh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzn8o649e.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzn8o649e.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzn8o649e.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpzn8o649e.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzn8o649e.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzn8o649e.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzn8o649e.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5eoigfrx.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5eoigfrx.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5eoigfrx.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5eoigfrx.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5eoigfrx.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5eoigfrx.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5eoigfrx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp83oyvksi.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp83oyvksi.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp83oyvksi.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp83oyvksi.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp83oyvksi.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp83oyvksi.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp83oyvksi.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp83oyvksi.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp83oyvksi.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp83oyvksi.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp83oyvksi.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp83oyvksi.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp83oyvksi.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp83oyvksi.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbrvztnm9.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrvztnm9.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrvztnm9.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpbrvztnm9.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpbrvztnm9.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpbrvztnm9.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbrvztnm9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8a4e_g2i.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8a4e_g2i.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8a4e_g2i.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8a4e_g2i.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8a4e_g2i.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8a4e_g2i.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8a4e_g2i.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7736f1oe.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7736f1oe.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7736f1oe.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp7736f1oe.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7736f1oe.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7736f1oe.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7736f1oe.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpde9fmj92.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpde9fmj92.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpde9fmj92.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpde9fmj92.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpde9fmj92.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpde9fmj92.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpde9fmj92.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ij7pt3i.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9ij7pt3i.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ij7pt3i.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp9ij7pt3i.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp9ij7pt3i.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp9ij7pt3i.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ij7pt3i.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyddw35un.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyddw35un.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyddw35un.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpyddw35un.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyddw35un.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyddw35un.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyddw35un.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqmyqj27s.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqmyqj27s.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqmyqj27s.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpqmyqj27s.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqmyqj27s.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqmyqj27s.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqmyqj27s.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe1goy1ze.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe1goy1ze.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe1goy1ze.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpe1goy1ze.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe1goy1ze.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe1goy1ze.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe1goy1ze.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw_wribsj.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw_wribsj.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw_wribsj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpw_wribsj.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpw_wribsj.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw_wribsj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpw_wribsj.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpw_wribsj.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw_wribsj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpw_wribsj.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpw_wribsj.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpw_wribsj.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpw_wribsj.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw_wribsj.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzqlsxk1w.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzqlsxk1w.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzqlsxk1w.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpzqlsxk1w.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzqlsxk1w.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzqlsxk1w.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzqlsxk1w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1s8005_r.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1s8005_r.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1s8005_r.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1s8005_r.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1s8005_r.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1s8005_r.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1s8005_r.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1s8005_r.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1s8005_r.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1s8005_r.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp1s8005_r.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1s8005_r.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1s8005_r.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1s8005_r.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpslm97ed3.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpslm97ed3.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpslm97ed3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpslm97ed3.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\"\
    , \"five\", \"\", \"six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpslm97ed3.jl:18 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpslm97ed3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpslm97ed3.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"\", \"my\", \"name\"] ==\
    \ [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpslm97ed3.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpslm97ed3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpslm97ed3.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \"\", \"two\", \"\", \"three\", \"\", \"\
    four\", \"\", \"five\", \"\", \"six\", \"\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpslm97ed3.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpslm97ed3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpslm97ed3.jl:21\n  Expression: candidat"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpslm97ed3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoi6lg8t1.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoi6lg8t1.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoi6lg8t1.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpoi6lg8t1.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpoi6lg8t1.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpoi6lg8t1.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoi6lg8t1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc1it_bpb.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc1it_bpb.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc1it_bpb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpc1it_bpb.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpc1it_bpb.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpc1it_bpb.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc1it_bpb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpymtqzpsk.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpymtqzpsk.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpymtqzpsk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpymtqzpsk.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpymtqzpsk.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpymtqzpsk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpymtqzpsk.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpymtqzpsk.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpymtqzpsk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpymtqzpsk.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpymtqzpsk.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpymtqzpsk.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpymtqzpsk.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpymtqzpsk.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp85zavv52.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp85zavv52.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85zavv52.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp85zavv52.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp85zavv52.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp85zavv52.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp85zavv52.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqou_i_cn.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqou_i_cn.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqou_i_cn.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpqou_i_cn.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqou_i_cn.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqou_i_cn.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqou_i_cn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_9kpcj5u.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_9kpcj5u.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_9kpcj5u.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_9kpcj5u.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_9kpcj5u.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_9kpcj5u.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_9kpcj5u.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1xefhdgh.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1xefhdgh.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1xefhdgh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1xefhdgh.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1xefhdgh.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1xefhdgh.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1xefhdgh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmwrfl9pa.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmwrfl9pa.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwrfl9pa.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmwrfl9pa.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmwrfl9pa.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwrfl9pa.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmwrfl9pa.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmwrfl9pa.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwrfl9pa.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmwrfl9pa.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpmwrfl9pa.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmwrfl9pa.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmwrfl9pa.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmwrfl9pa.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxu4uzki_.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxu4uzki_.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxu4uzki_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxu4uzki_.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxu4uzki_.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxu4uzki_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxu4uzki_.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpxu4uzki_.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxu4uzki_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxu4uzki_.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpxu4uzki_.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpxu4uzki_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpxu4uzki_.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxu4uzki_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsvfl5b3l.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsvfl5b3l.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsvfl5b3l.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsvfl5b3l.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsvfl5b3l.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsvfl5b3l.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsvfl5b3l.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpsvfl5b3l.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsvfl5b3l.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsvfl5b3l.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpsvfl5b3l.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpsvfl5b3l.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpsvfl5b3l.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsvfl5b3l.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5rsnwmkq.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5rsnwmkq.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5rsnwmkq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp5rsnwmkq.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp5rsnwmkq.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp5rsnwmkq.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5rsnwmkq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphnkp0rg4.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphnkp0rg4.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphnkp0rg4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphnkp0rg4.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphnkp0rg4.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphnkp0rg4.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphnkp0rg4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphlj30897.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphlj30897.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphlj30897.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphlj30897.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphlj30897.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphlj30897.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphlj30897.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmphlj30897.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphlj30897.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphlj30897.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmphlj30897.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmphlj30897.jl:16\ntest set: Test\
    \ Failed at /tmp/tmphlj30897.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphlj30897.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqznq9rwm.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqznq9rwm.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqznq9rwm.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpqznq9rwm.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpqznq9rwm.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpqznq9rwm.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqznq9rwm.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyp0w55zg.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyp0w55zg.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyp0w55zg.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpyp0w55zg.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyp0w55zg.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyp0w55zg.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyp0w55zg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_dvmbl3s.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_dvmbl3s.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_dvmbl3s.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_dvmbl3s.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_dvmbl3s.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_dvmbl3s.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_dvmbl3s.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_dvmbl3s.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_dvmbl3s.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_dvmbl3s.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_dvmbl3s.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_dvmbl3s.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_dvmbl3s.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_dvmbl3s.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7_z04s9f.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7_z04s9f.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7_z04s9f.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp7_z04s9f.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp7_z04s9f.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp7_z04s9f.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7_z04s9f.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp53_m7gi0.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp53_m7gi0.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp53_m7gi0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp53_m7gi0.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp53_m7gi0.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp53_m7gi0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp53_m7gi0.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp53_m7gi0.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp53_m7gi0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp53_m7gi0.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp53_m7gi0.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp53_m7gi0.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp53_m7gi0.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp53_m7gi0.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvi0v6dbu.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvi0v6dbu.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvi0v6dbu.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvi0v6dbu.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvi0v6dbu.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvi0v6dbu.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvi0v6dbu.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfggwrm71.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfggwrm71.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfggwrm71.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpfggwrm71.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpfggwrm71.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpfggwrm71.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfggwrm71.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp216ren1w.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp216ren1w.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp216ren1w.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp216ren1w.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp216ren1w.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp216ren1w.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp216ren1w.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpil_r6c1h.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpil_r6c1h.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpil_r6c1h.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpil_r6c1h.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpil_r6c1h.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpil_r6c1h.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpil_r6c1h.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp91j1k4xg.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp91j1k4xg.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp91j1k4xg.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp91j1k4xg.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp91j1k4xg.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp91j1k4xg.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp91j1k4xg.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp91j1k4xg.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp91j1k4xg.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp91j1k4xg.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp91j1k4xg.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp91j1k4xg.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp91j1k4xg.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp91j1k4xg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_7lv8bm5.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_7lv8bm5.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7lv8bm5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_7lv8bm5.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_7lv8bm5.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7lv8bm5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_7lv8bm5.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp_7lv8bm5.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7lv8bm5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_7lv8bm5.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp_7lv8bm5.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp_7lv8bm5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp_7lv8bm5.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_7lv8bm5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu1mr5pvm.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu1mr5pvm.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu1mr5pvm.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpu1mr5pvm.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu1mr5pvm.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu1mr5pvm.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu1mr5pvm.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0j4prrzb.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0j4prrzb.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0j4prrzb.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp0j4prrzb.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp0j4prrzb.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp0j4prrzb.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0j4prrzb.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl17r5xts.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl17r5xts.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl17r5xts.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpl17r5xts.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpl17r5xts.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpl17r5xts.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl17r5xts.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwbzwplq5.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwbzwplq5.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwbzwplq5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpwbzwplq5.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwbzwplq5.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwbzwplq5.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwbzwplq5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1ze7mc2p.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1ze7mc2p.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ze7mc2p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1ze7mc2p.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\"\
    , \"five\", \"\", \"six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1ze7mc2p.jl:18 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ze7mc2p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1ze7mc2p.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"\", \"my\", \"name\"] ==\
    \ [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1ze7mc2p.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ze7mc2p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1ze7mc2p.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \"\", \"two\", \"\", \"three\", \"\", \"\
    four\", \"\", \"five\", \"\", \"six\", \"\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp1ze7mc2p.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp1ze7mc2p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp1ze7mc2p.jl:21\n  Expression: candidat"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1ze7mc2p.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj46jc186.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj46jc186.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj46jc186.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpj46jc186.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\"\
    , \"five\", \"\", \"six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj46jc186.jl:18 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj46jc186.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpj46jc186.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"\", \"my\", \"name\"] ==\
    \ [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj46jc186.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj46jc186.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpj46jc186.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \"\", \"two\", \"\", \"three\", \"\", \"\
    four\", \"\", \"five\", \"\", \"six\", \"\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj46jc186.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj46jc186.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpj46jc186.jl:21\n  Expression: candidat"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj46jc186.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuxm6zmbg.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuxm6zmbg.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuxm6zmbg.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpuxm6zmbg.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuxm6zmbg.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuxm6zmbg.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuxm6zmbg.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpe_95xk4u.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe_95xk4u.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe_95xk4u.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpe_95xk4u.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe_95xk4u.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe_95xk4u.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpe_95xk4u.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpe_95xk4u.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe_95xk4u.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpe_95xk4u.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpe_95xk4u.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpe_95xk4u.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpe_95xk4u.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpe_95xk4u.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy9s6qxj5.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy9s6qxj5.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9s6qxj5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy9s6qxj5.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy9s6qxj5.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy9s6qxj5.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy9s6qxj5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkf8lviol.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkf8lviol.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkf8lviol.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpkf8lviol.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpkf8lviol.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpkf8lviol.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkf8lviol.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp42k1awa5.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp42k1awa5.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp42k1awa5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp42k1awa5.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp42k1awa5.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp42k1awa5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp42k1awa5.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp42k1awa5.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp42k1awa5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp42k1awa5.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp42k1awa5.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp42k1awa5.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp42k1awa5.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp42k1awa5.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzdkf9b9g.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzdkf9b9g.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdkf9b9g.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpzdkf9b9g.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpzdkf9b9g.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpzdkf9b9g.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzdkf9b9g.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa20oss0p.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa20oss0p.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa20oss0p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpa20oss0p.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa20oss0p.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa20oss0p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpa20oss0p.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpa20oss0p.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa20oss0p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpa20oss0p.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpa20oss0p.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpa20oss0p.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpa20oss0p.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa20oss0p.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgstp9rkh.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgstp9rkh.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgstp9rkh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpgstp9rkh.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpgstp9rkh.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpgstp9rkh.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgstp9rkh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4euqv7s3.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4euqv7s3.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4euqv7s3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4euqv7s3.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4euqv7s3.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4euqv7s3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4euqv7s3.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp4euqv7s3.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4euqv7s3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4euqv7s3.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp4euqv7s3.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp4euqv7s3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp4euqv7s3.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4euqv7s3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp72tpqn_.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp72tpqn_.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp72tpqn_.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpp72tpqn_.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpp72tpqn_.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpp72tpqn_.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp72tpqn_.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp64xyzrz1.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp64xyzrz1.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp64xyzrz1.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp64xyzrz1.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp64xyzrz1.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp64xyzrz1.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp64xyzrz1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpszx83tvq.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpszx83tvq.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpszx83tvq.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpszx83tvq.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpszx83tvq.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpszx83tvq.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpszx83tvq.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyucvdt0u.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyucvdt0u.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyucvdt0u.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpyucvdt0u.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpyucvdt0u.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpyucvdt0u.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyucvdt0u.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu7s7gtr1.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu7s7gtr1.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu7s7gtr1.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpu7s7gtr1.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpu7s7gtr1.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpu7s7gtr1.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu7s7gtr1.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpd6n5tc8j.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd6n5tc8j.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd6n5tc8j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpd6n5tc8j.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpd6n5tc8j.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd6n5tc8j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpd6n5tc8j.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpd6n5tc8j.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd6n5tc8j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpd6n5tc8j.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpd6n5tc8j.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpd6n5tc8j.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpd6n5tc8j.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpd6n5tc8j.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8j_g2vvh.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8j_g2vvh.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8j_g2vvh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8j_g2vvh.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8j_g2vvh.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8j_g2vvh.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8j_g2vvh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8iim6wob.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8iim6wob.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8iim6wob.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp8iim6wob.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp8iim6wob.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp8iim6wob.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8iim6wob.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmzebdmr4.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmzebdmr4.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmzebdmr4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpmzebdmr4.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpmzebdmr4.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpmzebdmr4.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmzebdmr4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaq6ms6f4.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaq6ms6f4.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq6ms6f4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpaq6ms6f4.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One\", \"\", \"two\", \"\", \"three\", \"\", \"four\", \"\"\
    , \"five\", \"\", \"six\"] == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaq6ms6f4.jl:18 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq6ms6f4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpaq6ms6f4.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi\", \"\", \"my\", \"name\"] ==\
    \ [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaq6ms6f4.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq6ms6f4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpaq6ms6f4.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One\", \"\", \"\", \"two\", \"\", \"three\", \"\", \"\
    four\", \"\", \"five\", \"\", \"six\", \"\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpaq6ms6f4.jl:20\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpaq6ms6f4.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpaq6ms6f4.jl:21\n  Expression: candidat"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaq6ms6f4.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplcwkqlq3.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplcwkqlq3.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplcwkqlq3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplcwkqlq3.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplcwkqlq3.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplcwkqlq3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplcwkqlq3.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmplcwkqlq3.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplcwkqlq3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplcwkqlq3.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmplcwkqlq3.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmplcwkqlq3.jl:16\ntest set: Test\
    \ Failed at /tmp/tmplcwkqlq3.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplcwkqlq3.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt89rl_v9.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt89rl_v9.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt89rl_v9.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpt89rl_v9.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpt89rl_v9.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpt89rl_v9.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt89rl_v9.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn29y_fgz.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn29y_fgz.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn29y_fgz.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpn29y_fgz.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpn29y_fgz.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpn29y_fgz.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn29y_fgz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp705astwn.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp705astwn.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp705astwn.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp705astwn.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp705astwn.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp705astwn.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp705astwn.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp57ri3_ic.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp57ri3_ic.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57ri3_ic.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp57ri3_ic.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp57ri3_ic.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57ri3_ic.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp57ri3_ic.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp57ri3_ic.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57ri3_ic.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp57ri3_ic.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmp57ri3_ic.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp57ri3_ic.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp57ri3_ic.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp57ri3_ic.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpog_wpx3t.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpog_wpx3t.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpog_wpx3t.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpog_wpx3t.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpog_wpx3t.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpog_wpx3t.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpog_wpx3t.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6silkvgh.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6silkvgh.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6silkvgh.jl:16\ntest set: Test\
    \ Failed at /tmp/tmp6silkvgh.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmp6silkvgh.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmp6silkvgh.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6silkvgh.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprkw1_wkx.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprkw1_wkx.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprkw1_wkx.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprkw1_wkx.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprkw1_wkx.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprkw1_wkx.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprkw1_wkx.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprrmehkro.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprrmehkro.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprrmehkro.jl:16\ntest set: Test\
    \ Failed at /tmp/tmprrmehkro.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmprrmehkro.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmprrmehkro.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprrmehkro.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[\\s,]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj9_mkhyo.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj9_mkhyo.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj9_mkhyo.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpj9_mkhyo.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpj9_mkhyo.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpj9_mkhyo.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj9_mkhyo.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuezikmfe.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuezikmfe.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuezikmfe.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpuezikmfe.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpuezikmfe.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpuezikmfe.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuezikmfe.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[, ]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwojd4fsz.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwojd4fsz.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwojd4fsz.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpwojd4fsz.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpwojd4fsz.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpwojd4fsz.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwojd4fsz.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s, r\"[,\\s]+\")\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpy091k1oe.jl:20\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n   Evaluated: [\"One\", \"two\", \"three\", \"four\", \"\
    five\", \"six\", \"\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy091k1oe.jl:20 [inlined]\n\
    \ [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy091k1oe.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpy091k1oe.jl:21\n  Expression: candidate(\"\") == Vector{String}([])\n\
    \   Evaluated: [\"\"] == String[]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpy091k1oe.jl:21\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpy091k1oe.jl:16\nTest Summary:\
    \ | Pass  Fail  Total\ntest set      |    4     2      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy091k1oe.jl:14\n"
  exit_code: 1
  status: SyntaxError
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  return split(s)\nend\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvg7sysca.jl:17\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvg7sysca.jl:17\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg7sysca.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvg7sysca.jl:18\n  Expression: candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ]\n   Evaluated: [\"One,\", \"two,\", \"three,\", \"four,\", \"five,\", \"six\"\
    ] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvg7sysca.jl:18 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg7sysca.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvg7sysca.jl:19\n  Expression: candidate(\"Hi, my name\") ==\
    \ [\"Hi\", \"my\", \"name\"]\n   Evaluated: [\"Hi,\", \"my\", \"name\"] == [\"\
    Hi\", \"my\", \"name\"]\nStacktrace:\n [1] macro expansion\n   @ /tmp/tmpvg7sysca.jl:19\
    \ [inlined]\n [2] macro expansion\n   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg7sysca.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvg7sysca.jl:20\n  Expression: candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"]\n   Evaluated: [\"One,,\", \"two,\", \"three,\", \"four,\", \"five,\",\
    \ \"six,\"] == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n\
    \ [1] macro expansion\n   @ /tmp/tmpvg7sysca.jl:20 [inlined]\n [2] macro expansion\n\
    \   @ /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151\
    \ [inlined]\n [3] top-level scope\n   @ /tmp/tmpvg7sysca.jl:16\ntest set: Test\
    \ Failed at /tmp/tmpvg7sysca.jl:22\n  Expression: candidate(\"ahmed     , gamal\"\
    ) == [\"ahmed\", \"gamal"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvg7sysca.jl:14\n"
  exit_code: 1
  status: SyntaxError
