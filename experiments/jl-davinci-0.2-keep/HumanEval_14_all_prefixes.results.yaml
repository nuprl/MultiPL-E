name: HumanEval_14_all_prefixes
language: julia
results:
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n \
    \   return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ = 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n \
    \   return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n \
    \   return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n \
    \   return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = Vector{String}()\n\
    \    for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n\
    \    return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = String[]\n   \
    \ for i in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n \
    \   return prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    return [string[1:i] for i\
    \ in 1:length(string)]\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\
    \t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\")\
    \ == [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
- program: "\"\"\" Return list of all prefixes from shortest to longest of the input\
    \ string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\nfunction\
    \ all_prefixes(string::String)::Vector{String} \n    prefixes = []\n    for i\
    \ in 1:length(string)\n        push!(prefixes, string[1:i])\n    end\n    return\
    \ prefixes\nend\nusing Test\n\n@testset begin\n\ncandidate = all_prefixes;\n\t\
    @test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"asdfgh\") ==\
    \ [\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"])\n\t@test(candidate(\"\
    WWW\") == [\"W\", \"WW\", \"WWW\"])\nend\n"
  stdout: ''
  stderr: "Test Summary: | Pass  Total\ntest set      |    3      3\n"
  exit_code: 0
  status: OK
